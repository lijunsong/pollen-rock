{"version":3,"sources":["../node_modules/codemirror/mode/ttcn/ttcn.js"],"names":["CodeMirror","words","str","obj","split","i","length","defineMode","config","parserConfig","curPunc","indentUnit","keywords","builtin","timerOps","portOps","configOps","verdictOps","sutOps","functionOps","verdictConsts","booleanConsts","otherConsts","types","visibilityModifiers","templateMatch","multiLineStrings","indentStatements","isOperatorChar","tokenBase","stream","state","quote","ch","next","tokenize","escaped","end","afterQuote","peek","toLowerCase","test","skipToEnd","eatWhile","eat","tokenComment","match","cur","current","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","electricChars","blockCommentStart","blockCommentEnd","lineComment","fold","mimes","mode","add","prop","hasOwnProperty","push","helperType","registerHelper","defineMIME","def","name","mod","__webpack_require__"],"mappings":"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","file":"static/js/96.cfe20546.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ttcn\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        keywords = parserConfig.keywords || {},\n        builtin = parserConfig.builtin || {},\n        timerOps = parserConfig.timerOps || {},\n        portOps = parserConfig.portOps || {},\n        configOps = parserConfig.configOps || {},\n        verdictOps = parserConfig.verdictOps || {},\n        sutOps = parserConfig.sutOps || {},\n        functionOps = parserConfig.functionOps || {},\n        verdictConsts = parserConfig.verdictConsts || {},\n        booleanConsts = parserConfig.booleanConsts || {},\n        otherConsts = parserConfig.otherConsts || {},\n        types = parserConfig.types || {},\n        visibilityModifiers = parserConfig.visibilityModifiers || {},\n        templateMatch = parserConfig.templateMatch || {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[+\\-*&@=<>!\\/]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (/[\\[\\]{}\\(\\),;\\\\:\\?\\.]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n\n      if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"atom preprocessor\";\n      }\n\n      if (ch == \"%\") {\n        stream.eatWhile(/\\b/);\n        return \"atom ttcn3Macros\";\n      }\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n\n      if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (isOperatorChar.test(ch)) {\n        if (ch == \"@\") {\n          if (stream.match(\"try\") || stream.match(\"catch\") || stream.match(\"lazy\")) {\n            return \"keyword\";\n          }\n        }\n\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (builtin.propertyIsEnumerable(cur)) return \"builtin\";\n      if (timerOps.propertyIsEnumerable(cur)) return \"def timerOps\";\n      if (configOps.propertyIsEnumerable(cur)) return \"def configOps\";\n      if (verdictOps.propertyIsEnumerable(cur)) return \"def verdictOps\";\n      if (portOps.propertyIsEnumerable(cur)) return \"def portOps\";\n      if (sutOps.propertyIsEnumerable(cur)) return \"def sutOps\";\n      if (functionOps.propertyIsEnumerable(cur)) return \"def functionOps\";\n      if (verdictConsts.propertyIsEnumerable(cur)) return \"string verdictConsts\";\n      if (booleanConsts.propertyIsEnumerable(cur)) return \"string booleanConsts\";\n      if (otherConsts.propertyIsEnumerable(cur)) return \"string otherConsts\";\n      if (types.propertyIsEnumerable(cur)) return \"builtin types\";\n      if (visibilityModifiers.propertyIsEnumerable(cur)) return \"builtin visibilityModifiers\";\n      if (templateMatch.propertyIsEnumerable(cur)) return \"atom templateMatch\";\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            var afterQuote = stream.peek(); //look if the character after the quote is like the B in '10100010'B\n\n            if (afterQuote) {\n              afterQuote = afterQuote.toLowerCase();\n              if (afterQuote == \"b\" || afterQuote == \"h\" || afterQuote == \"o\") stream.next();\n            }\n\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    } //Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n      token: function token(stream, state) {\n        var ctx = state.context;\n\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") {\n          popContext(state);\n        } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n\n          if (ctx.type == \"}\") ctx = popContext(state);\n\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n        } else if (curPunc == ctx.type) popContext(state);else if (indentStatements && ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\")) pushContext(state, stream.column(), \"statement\");\n\n        state.startOfLine = false;\n        return style;\n      },\n      electricChars: \"{}\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {},\n        words = str.split(\" \");\n\n    for (var i = 0; i < words.length; ++i) {\n      obj[words[i]] = true;\n    }\n\n    return obj;\n  }\n\n  function def(mimes, mode) {\n    if (typeof mimes == \"string\") mimes = [mimes];\n    var words = [];\n\n    function add(obj) {\n      if (obj) for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) words.push(prop);\n      }\n    }\n\n    add(mode.keywords);\n    add(mode.builtin);\n    add(mode.timerOps);\n    add(mode.portOps);\n\n    if (words.length) {\n      mode.helperType = mimes[0];\n      CodeMirror.registerHelper(\"hintWords\", mimes[0], words);\n    }\n\n    for (var i = 0; i < mimes.length; ++i) {\n      CodeMirror.defineMIME(mimes[i], mode);\n    }\n  }\n\n  def([\"text/x-ttcn\", \"text/x-ttcn3\", \"text/x-ttcnpp\"], {\n    name: \"ttcn\",\n    keywords: words(\"activate address alive all alt altstep and and4b any\" + \" break case component const continue control deactivate\" + \" display do else encode enumerated except exception\" + \" execute extends extension external for from function\" + \" goto group if import in infinity inout interleave\" + \" label language length log match message mixed mod\" + \" modifies module modulepar mtc noblock not not4b nowait\" + \" of on optional or or4b out override param pattern port\" + \" procedure record recursive rem repeat return runs select\" + \" self sender set signature system template testcase to\" + \" type union value valueof var variant while with xor xor4b\"),\n    builtin: words(\"bit2hex bit2int bit2oct bit2str char2int char2oct encvalue\" + \" decomp decvalue float2int float2str hex2bit hex2int\" + \" hex2oct hex2str int2bit int2char int2float int2hex\" + \" int2oct int2str int2unichar isbound ischosen ispresent\" + \" isvalue lengthof log2str oct2bit oct2char oct2hex oct2int\" + \" oct2str regexp replace rnd sizeof str2bit str2float\" + \" str2hex str2int str2oct substr unichar2int unichar2char\" + \" enum2int\"),\n    types: words(\"anytype bitstring boolean char charstring default float\" + \" hexstring integer objid octetstring universal verdicttype timer\"),\n    timerOps: words(\"read running start stop timeout\"),\n    portOps: words(\"call catch check clear getcall getreply halt raise receive\" + \" reply send trigger\"),\n    configOps: words(\"create connect disconnect done kill killed map unmap\"),\n    verdictOps: words(\"getverdict setverdict\"),\n    sutOps: words(\"action\"),\n    functionOps: words(\"apply derefers refers\"),\n    verdictConsts: words(\"error fail inconc none pass\"),\n    booleanConsts: words(\"true false\"),\n    otherConsts: words(\"null NULL omit\"),\n    visibilityModifiers: words(\"private public friend\"),\n    templateMatch: words(\"complement ifpresent subset superset permutation\"),\n    multiLineStrings: true\n  });\n});"],"sourceRoot":""}