{"version":3,"sources":["../node_modules/codemirror/mode/vhdl/vhdl.js"],"names":["CodeMirror","words","str","obj","split","i","length","allCaps","toUpperCase","firstCap","charAt","slice","metaHook","stream","eatWhile","defineMode","config","parserConfig","curPunc","indentUnit","atoms","hooks","`","$","multiLineStrings","keywords","blockKeywords","isOperatorChar","tokenBase","state","quote","ch","next","result","tokenize","escaped","end","tokenString","test","eat","skipToEnd","cur","current","propertyIsEnumerable","toLowerCase","Context","indented","column","type","align","prev","this","pushContext","col","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","firstChar","closing","electricChars","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/104.6ccacfc7.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Originally written by Alf Nielsen, re-written by Michael Zhou\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function words(str) {\n    var obj = {},\n        words = str.split(\",\");\n\n    for (var i = 0; i < words.length; ++i) {\n      var allCaps = words[i].toUpperCase();\n      var firstCap = words[i].charAt(0).toUpperCase() + words[i].slice(1);\n      obj[words[i]] = true;\n      obj[allCaps] = true;\n      obj[firstCap] = true;\n    }\n\n    return obj;\n  }\n\n  function metaHook(stream) {\n    stream.eatWhile(/[\\w\\$_]/);\n    return \"meta\";\n  }\n\n  CodeMirror.defineMode(\"vhdl\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        atoms = parserConfig.atoms || words(\"null\"),\n        hooks = parserConfig.hooks || {\n      \"`\": metaHook,\n      \"$\": metaHook\n    },\n        multiLineStrings = parserConfig.multiLineStrings;\n    var keywords = words(\"abs,access,after,alias,all,and,architecture,array,assert,attribute,begin,block,\" + \"body,buffer,bus,case,component,configuration,constant,disconnect,downto,else,elsif,end,end block,end case,\" + \"end component,end for,end generate,end if,end loop,end process,end record,end units,entity,exit,file,for,\" + \"function,generate,generic,generic map,group,guarded,if,impure,in,inertial,inout,is,label,library,linkage,\" + \"literal,loop,map,mod,nand,new,next,nor,null,of,on,open,or,others,out,package,package body,port,port map,\" + \"postponed,procedure,process,pure,range,record,register,reject,rem,report,return,rol,ror,select,severity,signal,\" + \"sla,sll,sra,srl,subtype,then,to,transport,type,unaffected,units,until,use,variable,wait,when,while,with,xnor,xor\");\n    var blockKeywords = words(\"architecture,entity,begin,case,port,else,elsif,end,for,function,if\");\n    var isOperatorChar = /[&|~><!\\)\\(*#%@+\\/=?\\:;}{,\\.\\^\\-\\[\\]]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (hooks[ch]) {\n        var result = hooks[ch](stream, state);\n        if (result !== false) return result;\n      }\n\n      if (ch == '\"') {\n        state.tokenize = tokenString2(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n        curPunc = ch;\n        return null;\n      }\n\n      if (/[\\d']/.test(ch)) {\n        stream.eatWhile(/[\\w\\.']/);\n        return \"number\";\n      }\n\n      if (ch == \"-\") {\n        if (stream.eat(\"-\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\$_]/);\n      var cur = stream.current();\n\n      if (keywords.propertyIsEnumerable(cur.toLowerCase())) {\n        if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n        return \"keyword\";\n      }\n\n      if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"--\";\n        }\n\n        if (end || !(escaped || multiLineStrings)) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n\n    function tokenString2(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"--\";\n        }\n\n        if (end || !(escaped || multiLineStrings)) state.tokenize = tokenBase;\n        return \"string-2\";\n      };\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      return state.context = new Context(state.indented, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    } // Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n      token: function token(stream, state) {\n        var ctx = state.context;\n\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\" || style == \"meta\") return style;\n        if (ctx.align == null) ctx.align = true;\n        if ((curPunc == \";\" || curPunc == \":\") && ctx.type == \"statement\") popContext(state);else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n\n          if (ctx.type == \"}\") ctx = popContext(state);\n\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n        } else if (curPunc == ctx.type) popContext(state);else if (ctx.type == \"}\" || ctx.type == \"top\" || ctx.type == \"statement\" && curPunc == \"newstatement\") pushContext(state, stream.column(), \"statement\");\n        state.startOfLine = false;\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n        var firstChar = textAfter && textAfter.charAt(0),\n            ctx = state.context,\n            closing = firstChar == ctx.type;\n        if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : indentUnit);else if (ctx.align) return ctx.column + (closing ? 0 : 1);else return ctx.indented + (closing ? 0 : indentUnit);\n      },\n      electricChars: \"{}\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-vhdl\", \"vhdl\");\n});"],"sourceRoot":""}