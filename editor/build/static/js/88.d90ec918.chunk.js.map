{"version":3,"sources":["../node_modules/codemirror/mode/swift/swift.js"],"names":["CodeMirror","wordSet","words","set","i","length","keywords","definingKeywords","atoms","types","operators","punc","binary","octal","hexadecimal","decimal","identifier","property","instruction","attribute","tokenBase","stream","state","prev","sol","indented","indentation","eatSpace","ch","peek","match","skipToEnd","tokenize","push","tokenComment","indexOf","next","quote","singleLine","escaped","tokenUntilClosingParen","pop","tokenString","ident","current","hasOwnProperty","depth","inner","backUp","eat","Context","align","this","defineMode","config","startState","context","token","style","bracket","exec","column","indent","textAfter","cx","closing","test","indentUnit","electricInput","lineComment","blockCommentStart","blockCommentEnd","fold","closeBrackets","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/88.d90ec918.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Swift mode created by Michael Kaminsky https://github.com/mkaminsky11\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) define([\"../../lib/codemirror\"], mod);else mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function wordSet(words) {\n    var set = {};\n\n    for (var i = 0; i < words.length; i++) {\n      set[words[i]] = true;\n    }\n\n    return set;\n  }\n\n  var keywords = wordSet([\"_\", \"var\", \"let\", \"class\", \"enum\", \"extension\", \"import\", \"protocol\", \"struct\", \"func\", \"typealias\", \"associatedtype\", \"open\", \"public\", \"internal\", \"fileprivate\", \"private\", \"deinit\", \"init\", \"new\", \"override\", \"self\", \"subscript\", \"super\", \"convenience\", \"dynamic\", \"final\", \"indirect\", \"lazy\", \"required\", \"static\", \"unowned\", \"unowned(safe)\", \"unowned(unsafe)\", \"weak\", \"as\", \"is\", \"break\", \"case\", \"continue\", \"default\", \"else\", \"fallthrough\", \"for\", \"guard\", \"if\", \"in\", \"repeat\", \"switch\", \"where\", \"while\", \"defer\", \"return\", \"inout\", \"mutating\", \"nonmutating\", \"catch\", \"do\", \"rethrows\", \"throw\", \"throws\", \"try\", \"didSet\", \"get\", \"set\", \"willSet\", \"assignment\", \"associativity\", \"infix\", \"left\", \"none\", \"operator\", \"postfix\", \"precedence\", \"precedencegroup\", \"prefix\", \"right\", \"Any\", \"AnyObject\", \"Type\", \"dynamicType\", \"Self\", \"Protocol\", \"__COLUMN__\", \"__FILE__\", \"__FUNCTION__\", \"__LINE__\"]);\n  var definingKeywords = wordSet([\"var\", \"let\", \"class\", \"enum\", \"extension\", \"import\", \"protocol\", \"struct\", \"func\", \"typealias\", \"associatedtype\", \"for\"]);\n  var atoms = wordSet([\"true\", \"false\", \"nil\", \"self\", \"super\", \"_\"]);\n  var types = wordSet([\"Array\", \"Bool\", \"Character\", \"Dictionary\", \"Double\", \"Float\", \"Int\", \"Int8\", \"Int16\", \"Int32\", \"Int64\", \"Never\", \"Optional\", \"Set\", \"String\", \"UInt8\", \"UInt16\", \"UInt32\", \"UInt64\", \"Void\"]);\n  var operators = \"+-/*%=|&<>~^?!\";\n  var punc = \":;,.(){}[]\";\n  var binary = /^\\-?0b[01][01_]*/;\n  var octal = /^\\-?0o[0-7][0-7_]*/;\n  var hexadecimal = /^\\-?0x[\\dA-Fa-f][\\dA-Fa-f_]*(?:(?:\\.[\\dA-Fa-f][\\dA-Fa-f_]*)?[Pp]\\-?\\d[\\d_]*)?/;\n  var decimal = /^\\-?\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[Ee]\\-?\\d[\\d_]*)?/;\n  var identifier = /^\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1/;\n  var property = /^\\.(?:\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1)/;\n  var instruction = /^\\#[A-Za-z]+/;\n  var attribute = /^@(?:\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1)/; //var regexp = /^\\/(?!\\s)(?:\\/\\/)?(?:\\\\.|[^\\/])+\\//\n\n  function tokenBase(stream, state, prev) {\n    if (stream.sol()) state.indented = stream.indentation();\n    if (stream.eatSpace()) return null;\n    var ch = stream.peek();\n\n    if (ch == \"/\") {\n      if (stream.match(\"//\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (stream.match(\"/*\")) {\n        state.tokenize.push(tokenComment);\n        return tokenComment(stream, state);\n      }\n    }\n\n    if (stream.match(instruction)) return \"builtin\";\n    if (stream.match(attribute)) return \"attribute\";\n    if (stream.match(binary)) return \"number\";\n    if (stream.match(octal)) return \"number\";\n    if (stream.match(hexadecimal)) return \"number\";\n    if (stream.match(decimal)) return \"number\";\n    if (stream.match(property)) return \"property\";\n\n    if (operators.indexOf(ch) > -1) {\n      stream.next();\n      return \"operator\";\n    }\n\n    if (punc.indexOf(ch) > -1) {\n      stream.next();\n      stream.match(\"..\");\n      return \"punctuation\";\n    }\n\n    if (ch = stream.match(/(\"{3}|\"|')/)) {\n      var tokenize = tokenString(ch[0]);\n      state.tokenize.push(tokenize);\n      return tokenize(stream, state);\n    }\n\n    if (stream.match(identifier)) {\n      var ident = stream.current();\n      if (types.hasOwnProperty(ident)) return \"variable-2\";\n      if (atoms.hasOwnProperty(ident)) return \"atom\";\n\n      if (keywords.hasOwnProperty(ident)) {\n        if (definingKeywords.hasOwnProperty(ident)) state.prev = \"define\";\n        return \"keyword\";\n      }\n\n      if (prev == \"define\") return \"def\";\n      return \"variable\";\n    }\n\n    stream.next();\n    return null;\n  }\n\n  function tokenUntilClosingParen() {\n    var depth = 0;\n    return function (stream, state, prev) {\n      var inner = tokenBase(stream, state, prev);\n\n      if (inner == \"punctuation\") {\n        if (stream.current() == \"(\") ++depth;else if (stream.current() == \")\") {\n          if (depth == 0) {\n            stream.backUp(1);\n            state.tokenize.pop();\n            return state.tokenize[state.tokenize.length - 1](stream, state);\n          } else --depth;\n        }\n      }\n\n      return inner;\n    };\n  }\n\n  function tokenString(quote) {\n    var singleLine = quote.length == 1;\n    return function (stream, state) {\n      var ch,\n          escaped = false;\n\n      while (ch = stream.next()) {\n        if (escaped) {\n          if (ch == \"(\") {\n            state.tokenize.push(tokenUntilClosingParen());\n            return \"string\";\n          }\n\n          escaped = false;\n        } else if (stream.match(quote)) {\n          state.tokenize.pop();\n          return \"string\";\n        } else {\n          escaped = ch == \"\\\\\";\n        }\n      }\n\n      if (singleLine) {\n        state.tokenize.pop();\n      }\n\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var ch;\n\n    while (true) {\n      stream.match(/^[^/*]+/, true);\n      ch = stream.next();\n      if (!ch) break;\n\n      if (ch === \"/\" && stream.eat(\"*\")) {\n        state.tokenize.push(tokenComment);\n      } else if (ch === \"*\" && stream.eat(\"/\")) {\n        state.tokenize.pop();\n      }\n    }\n\n    return \"comment\";\n  }\n\n  function Context(prev, align, indented) {\n    this.prev = prev;\n    this.align = align;\n    this.indented = indented;\n  }\n\n  function pushContext(state, stream) {\n    var align = stream.match(/^\\s*($|\\/[\\/\\*])/, false) ? null : stream.column() + 1;\n    state.context = new Context(state.context, align, state.indented);\n  }\n\n  function popContext(state) {\n    if (state.context) {\n      state.indented = state.context.indented;\n      state.context = state.context.prev;\n    }\n  }\n\n  CodeMirror.defineMode(\"swift\", function (config) {\n    return {\n      startState: function startState() {\n        return {\n          prev: null,\n          context: null,\n          indented: 0,\n          tokenize: []\n        };\n      },\n      token: function token(stream, state) {\n        var prev = state.prev;\n        state.prev = null;\n        var tokenize = state.tokenize[state.tokenize.length - 1] || tokenBase;\n        var style = tokenize(stream, state, prev);\n        if (!style || style == \"comment\") state.prev = prev;else if (!state.prev) state.prev = style;\n\n        if (style == \"punctuation\") {\n          var bracket = /[\\(\\[\\{]|([\\]\\)\\}])/.exec(stream.current());\n          if (bracket) (bracket[1] ? popContext : pushContext)(state, stream);\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        var cx = state.context;\n        if (!cx) return 0;\n        var closing = /^[\\]\\}\\)]/.test(textAfter);\n        if (cx.align != null) return cx.align - (closing ? 1 : 0);\n        return cx.indented + (closing ? 0 : config.indentUnit);\n      },\n      electricInput: /^\\s*[\\)\\}\\]]$/,\n      lineComment: \"//\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      fold: \"brace\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-swift\", \"swift\");\n});"],"sourceRoot":""}