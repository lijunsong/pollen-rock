{"version":3,"sources":["../node_modules/codemirror/addon/mode/simple.js","../node_modules/codemirror/addon/mode/multiplex.js","../node_modules/codemirror/mode/handlebars/handlebars.js"],"names":["CodeMirror","ensureState","states","name","hasOwnProperty","Error","toRegex","val","caret","flags","RegExp","ignoreCase","source","String","Rule","data","next","push","this","regex","token","apply","replace","result","i","length","asToken","tokenFunction","config","stream","state","pending","pend","shift","pos","text","local","end","match","tok","endToken","localState","m","mode","endScan","exec","current","start","index","curState","rule","matches","sol","stack","pop","enterLocalMode","indent","indentation","indentUnit","dedent","j","backUp","join","cmp","a","b","props","prop","spec","pers","persistent","p","persistentStates","getMode","lState","startState","forceEnd","indentFunction","meta","textAfter","line","dontIndentStates","arr","indexOf","Pass","rules","scan","dedentIfLineStart","slice","defineSimpleMode","defineMode","simpleMode","states_","hasIndentation","list","orig","copyState","s","innerMode","mod","__webpack_require__","multiplexingMode","outer","others","Array","prototype","call","arguments","string","pattern","from","returnEnd","found","innerActive","inner","curInner","oldContent","close","parseDelimiters","delimStyle","innerToken","innerStyle","cutOff","Infinity","other","open","outerIndent","possibleOuterIndent","outerToken","blankLine","electricChars","handlebars","dash_comment","comment","blockCommentStart","blockCommentEnd","parserConfig","base","defineMIME"],"mappings":"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","file":"static/js/39.1542e745.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode = function (name, states) {\n    CodeMirror.defineMode(name, function (config) {\n      return CodeMirror.simpleMode(config, states);\n    });\n  };\n\n  CodeMirror.simpleMode = function (config, states) {\n    ensureState(states, \"start\");\n    var states_ = {},\n        meta = states.meta || {},\n        hasIndentation = false;\n\n    for (var state in states) {\n      if (state != meta && states.hasOwnProperty(state)) {\n        var list = states_[state] = [],\n            orig = states[state];\n\n        for (var i = 0; i < orig.length; i++) {\n          var data = orig[i];\n          list.push(new Rule(data, states));\n          if (data.indent || data.dedent) hasIndentation = true;\n        }\n      }\n    }\n\n    var mode = {\n      startState: function startState() {\n        return {\n          state: \"start\",\n          pending: null,\n          local: null,\n          localState: null,\n          indent: hasIndentation ? [] : null\n        };\n      },\n      copyState: function copyState(state) {\n        var s = {\n          state: state.state,\n          pending: state.pending,\n          local: state.local,\n          localState: null,\n          indent: state.indent && state.indent.slice(0)\n        };\n        if (state.localState) s.localState = CodeMirror.copyState(state.local.mode, state.localState);\n        if (state.stack) s.stack = state.stack.slice(0);\n\n        for (var pers = state.persistentStates; pers; pers = pers.next) {\n          s.persistentStates = {\n            mode: pers.mode,\n            spec: pers.spec,\n            state: pers.state == state.localState ? s.localState : CodeMirror.copyState(pers.mode, pers.state),\n            next: s.persistentStates\n          };\n        }\n\n        return s;\n      },\n      token: tokenFunction(states_, config),\n      innerMode: function innerMode(state) {\n        return state.local && {\n          mode: state.local.mode,\n          state: state.localState\n        };\n      },\n      indent: indentFunction(states_, meta)\n    };\n    if (meta) for (var prop in meta) {\n      if (meta.hasOwnProperty(prop)) mode[prop] = meta[prop];\n    }\n    return mode;\n  };\n\n  function ensureState(states, name) {\n    if (!states.hasOwnProperty(name)) throw new Error(\"Undefined state \" + name + \" in simple mode\");\n  }\n\n  function toRegex(val, caret) {\n    if (!val) return /(?:)/;\n    var flags = \"\";\n\n    if (val instanceof RegExp) {\n      if (val.ignoreCase) flags = \"i\";\n      val = val.source;\n    } else {\n      val = String(val);\n    }\n\n    return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n  }\n\n  function asToken(val) {\n    if (!val) return null;\n    if (val.apply) return val;\n    if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n    var result = [];\n\n    for (var i = 0; i < val.length; i++) {\n      result.push(val[i] && val[i].replace(/\\./g, \" \"));\n    }\n\n    return result;\n  }\n\n  function Rule(data, states) {\n    if (data.next || data.push) ensureState(states, data.next || data.push);\n    this.regex = toRegex(data.regex);\n    this.token = asToken(data.token);\n    this.data = data;\n  }\n\n  function tokenFunction(states, config) {\n    return function (stream, state) {\n      if (state.pending) {\n        var pend = state.pending.shift();\n        if (state.pending.length == 0) state.pending = null;\n        stream.pos += pend.text.length;\n        return pend.token;\n      }\n\n      if (state.local) {\n        if (state.local.end && stream.match(state.local.end)) {\n          var tok = state.local.endToken || null;\n          state.local = state.localState = null;\n          return tok;\n        } else {\n          var tok = state.local.mode.token(stream, state.localState),\n              m;\n          if (state.local.endScan && (m = state.local.endScan.exec(stream.current()))) stream.pos = stream.start + m.index;\n          return tok;\n        }\n      }\n\n      var curState = states[state.state];\n\n      for (var i = 0; i < curState.length; i++) {\n        var rule = curState[i];\n        var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n\n        if (matches) {\n          if (rule.data.next) {\n            state.state = rule.data.next;\n          } else if (rule.data.push) {\n            (state.stack || (state.stack = [])).push(state.state);\n            state.state = rule.data.push;\n          } else if (rule.data.pop && state.stack && state.stack.length) {\n            state.state = state.stack.pop();\n          }\n\n          if (rule.data.mode) enterLocalMode(config, state, rule.data.mode, rule.token);\n          if (rule.data.indent) state.indent.push(stream.indentation() + config.indentUnit);\n          if (rule.data.dedent) state.indent.pop();\n          var token = rule.token;\n          if (token && token.apply) token = token(matches);\n\n          if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n            state.pending = [];\n\n            for (var j = 2; j < matches.length; j++) {\n              if (matches[j]) state.pending.push({\n                text: matches[j],\n                token: rule.token[j - 1]\n              });\n            }\n\n            stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n            return token[0];\n          } else if (token && token.join) {\n            return token[0];\n          } else {\n            return token;\n          }\n        }\n      }\n\n      stream.next();\n      return null;\n    };\n  }\n\n  function cmp(a, b) {\n    if (a === b) return true;\n    if (!a || typeof a != \"object\" || !b || typeof b != \"object\") return false;\n    var props = 0;\n\n    for (var prop in a) {\n      if (a.hasOwnProperty(prop)) {\n        if (!b.hasOwnProperty(prop) || !cmp(a[prop], b[prop])) return false;\n        props++;\n      }\n    }\n\n    for (var prop in b) {\n      if (b.hasOwnProperty(prop)) props--;\n    }\n\n    return props == 0;\n  }\n\n  function enterLocalMode(config, state, spec, token) {\n    var pers;\n    if (spec.persistent) for (var p = state.persistentStates; p && !pers; p = p.next) {\n      if (spec.spec ? cmp(spec.spec, p.spec) : spec.mode == p.mode) pers = p;\n    }\n    var mode = pers ? pers.mode : spec.mode || CodeMirror.getMode(config, spec.spec);\n    var lState = pers ? pers.state : CodeMirror.startState(mode);\n    if (spec.persistent && !pers) state.persistentStates = {\n      mode: mode,\n      spec: spec.spec,\n      state: lState,\n      next: state.persistentStates\n    };\n    state.localState = lState;\n    state.local = {\n      mode: mode,\n      end: spec.end && toRegex(spec.end),\n      endScan: spec.end && spec.forceEnd !== false && toRegex(spec.end, false),\n      endToken: token && token.join ? token[token.length - 1] : token\n    };\n  }\n\n  function indexOf(val, arr) {\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] === val) return true;\n    }\n  }\n\n  function indentFunction(states, meta) {\n    return function (state, textAfter, line) {\n      if (state.local && state.local.mode.indent) return state.local.mode.indent(state.localState, textAfter, line);\n      if (state.indent == null || state.local || meta.dontIndentStates && indexOf(state.state, meta.dontIndentStates) > -1) return CodeMirror.Pass;\n      var pos = state.indent.length - 1,\n          rules = states[state.state];\n\n      scan: for (;;) {\n        for (var i = 0; i < rules.length; i++) {\n          var rule = rules[i];\n\n          if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n            var m = rule.regex.exec(textAfter);\n\n            if (m && m[0]) {\n              pos--;\n              if (rule.next || rule.push) rules = states[rule.next || rule.push];\n              textAfter = textAfter.slice(m[0].length);\n              continue scan;\n            }\n          }\n        }\n\n        break;\n      }\n\n      return pos < 0 ? 0 : state.indent[pos];\n    };\n  }\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.multiplexingMode = function (outer\n  /*, others */\n  ) {\n    // Others should be {open, close, mode [, delimStyle] [, innerStyle]} objects\n    var others = Array.prototype.slice.call(arguments, 1);\n\n    function indexOf(string, pattern, from, returnEnd) {\n      if (typeof pattern == \"string\") {\n        var found = string.indexOf(pattern, from);\n        return returnEnd && found > -1 ? found + pattern.length : found;\n      }\n\n      var m = pattern.exec(from ? string.slice(from) : string);\n      return m ? m.index + from + (returnEnd ? m[0].length : 0) : -1;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          outer: CodeMirror.startState(outer),\n          innerActive: null,\n          inner: null\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          outer: CodeMirror.copyState(outer, state.outer),\n          innerActive: state.innerActive,\n          inner: state.innerActive && CodeMirror.copyState(state.innerActive.mode, state.inner)\n        };\n      },\n      token: function token(stream, state) {\n        if (!state.innerActive) {\n          var cutOff = Infinity,\n              oldContent = stream.string;\n\n          for (var i = 0; i < others.length; ++i) {\n            var other = others[i];\n            var found = indexOf(oldContent, other.open, stream.pos);\n\n            if (found == stream.pos) {\n              if (!other.parseDelimiters) stream.match(other.open);\n              state.innerActive = other; // Get the outer indent, making sure to handle CodeMirror.Pass\n\n              var outerIndent = 0;\n\n              if (outer.indent) {\n                var possibleOuterIndent = outer.indent(state.outer, \"\");\n                if (possibleOuterIndent !== CodeMirror.Pass) outerIndent = possibleOuterIndent;\n              }\n\n              state.inner = CodeMirror.startState(other.mode, outerIndent);\n              return other.delimStyle && other.delimStyle + \" \" + other.delimStyle + \"-open\";\n            } else if (found != -1 && found < cutOff) {\n              cutOff = found;\n            }\n          }\n\n          if (cutOff != Infinity) stream.string = oldContent.slice(0, cutOff);\n          var outerToken = outer.token(stream, state.outer);\n          if (cutOff != Infinity) stream.string = oldContent;\n          return outerToken;\n        } else {\n          var curInner = state.innerActive,\n              oldContent = stream.string;\n\n          if (!curInner.close && stream.sol()) {\n            state.innerActive = state.inner = null;\n            return this.token(stream, state);\n          }\n\n          var found = curInner.close ? indexOf(oldContent, curInner.close, stream.pos, curInner.parseDelimiters) : -1;\n\n          if (found == stream.pos && !curInner.parseDelimiters) {\n            stream.match(curInner.close);\n            state.innerActive = state.inner = null;\n            return curInner.delimStyle && curInner.delimStyle + \" \" + curInner.delimStyle + \"-close\";\n          }\n\n          if (found > -1) stream.string = oldContent.slice(0, found);\n          var innerToken = curInner.mode.token(stream, state.inner);\n          if (found > -1) stream.string = oldContent;\n          if (found == stream.pos && curInner.parseDelimiters) state.innerActive = state.inner = null;\n\n          if (curInner.innerStyle) {\n            if (innerToken) innerToken = innerToken + \" \" + curInner.innerStyle;else innerToken = curInner.innerStyle;\n          }\n\n          return innerToken;\n        }\n      },\n      indent: function indent(state, textAfter) {\n        var mode = state.innerActive ? state.innerActive.mode : outer;\n        if (!mode.indent) return CodeMirror.Pass;\n        return mode.indent(state.innerActive ? state.inner : state.outer, textAfter);\n      },\n      blankLine: function blankLine(state) {\n        var mode = state.innerActive ? state.innerActive.mode : outer;\n\n        if (mode.blankLine) {\n          mode.blankLine(state.innerActive ? state.inner : state.outer);\n        }\n\n        if (!state.innerActive) {\n          for (var i = 0; i < others.length; ++i) {\n            var other = others[i];\n\n            if (other.open === \"\\n\") {\n              state.innerActive = other;\n              state.inner = CodeMirror.startState(other.mode, mode.indent ? mode.indent(state.outer, \"\") : 0);\n            }\n          }\n        } else if (state.innerActive.close === \"\\n\") {\n          state.innerActive = state.inner = null;\n        }\n      },\n      electricChars: outer.electricChars,\n      innerMode: function innerMode(state) {\n        return state.inner ? {\n          state: state.inner,\n          mode: state.innerActive.mode\n        } : {\n          state: state.outer,\n          mode: outer\n        };\n      }\n    };\n  };\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"), require(\"../../addon/mode/multiplex\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\", \"../../addon/mode/multiplex\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"handlebars-tags\", {\n    start: [{\n      regex: /\\{\\{!--/,\n      push: \"dash_comment\",\n      token: \"comment\"\n    }, {\n      regex: /\\{\\{!/,\n      push: \"comment\",\n      token: \"comment\"\n    }, {\n      regex: /\\{\\{/,\n      push: \"handlebars\",\n      token: \"tag\"\n    }],\n    handlebars: [{\n      regex: /\\}\\}/,\n      pop: true,\n      token: \"tag\"\n    }, // Double and single quotes\n    {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n      token: \"string\"\n    }, {\n      regex: /'(?:[^\\\\']|\\\\.)*'?/,\n      token: \"string\"\n    }, // Handlebars keywords\n    {\n      regex: />|[#\\/]([A-Za-z_]\\w*)/,\n      token: \"keyword\"\n    }, {\n      regex: /(?:else|this)\\b/,\n      token: \"keyword\"\n    }, // Numeral\n    {\n      regex: /\\d+/i,\n      token: \"number\"\n    }, // Atoms like = and .\n    {\n      regex: /=|~|@|true|false/,\n      token: \"atom\"\n    }, // Paths\n    {\n      regex: /(?:\\.\\.\\/)*(?:[A-Za-z_][\\w\\.]*)+/,\n      token: \"variable-2\"\n    }],\n    dash_comment: [{\n      regex: /--\\}\\}/,\n      pop: true,\n      token: \"comment\"\n    }, // Commented code\n    {\n      regex: /./,\n      token: \"comment\"\n    }],\n    comment: [{\n      regex: /\\}\\}/,\n      pop: true,\n      token: \"comment\"\n    }, {\n      regex: /./,\n      token: \"comment\"\n    }],\n    meta: {\n      blockCommentStart: \"{{--\",\n      blockCommentEnd: \"--}}\"\n    }\n  });\n  CodeMirror.defineMode(\"handlebars\", function (config, parserConfig) {\n    var handlebars = CodeMirror.getMode(config, \"handlebars-tags\");\n    if (!parserConfig || !parserConfig.base) return handlebars;\n    return CodeMirror.multiplexingMode(CodeMirror.getMode(config, parserConfig.base), {\n      open: \"{{\",\n      close: \"}}\",\n      mode: handlebars,\n      parseDelimiters: true\n    });\n  });\n  CodeMirror.defineMIME(\"text/x-handlebars-template\", \"handlebars\");\n});"],"sourceRoot":""}