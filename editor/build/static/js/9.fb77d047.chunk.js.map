{"version":3,"sources":["../node_modules/codemirror/mode/asn.1/asn.1.js"],"names":["CodeMirror","words","str","obj","split","i","length","defineMode","config","parserConfig","curPunc","indentUnit","keywords","cmipVerbs","compareTypes","status","tags","storage","modifier","accessTypes","multiLineStrings","indentStatements","isOperatorChar","tokenBase","stream","state","quote","ch","next","tokenize","escaped","end","afterNext","peek","toLowerCase","test","eat","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","electricChars","lineComment","fold","defineMIME","name","mod","__webpack_require__"],"mappings":"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","file":"static/js/9.fb77d047.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"asn.1\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        keywords = parserConfig.keywords || {},\n        cmipVerbs = parserConfig.cmipVerbs || {},\n        compareTypes = parserConfig.compareTypes || {},\n        status = parserConfig.status || {},\n        tags = parserConfig.tags || {},\n        storage = parserConfig.storage || {},\n        modifier = parserConfig.modifier || {},\n        accessTypes = parserConfig.accessTypes || {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[\\|\\^]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (/[\\[\\]\\(\\){}:=,;]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n\n      if (ch == \"-\") {\n        if (stream.eat(\"-\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\-]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (cmipVerbs.propertyIsEnumerable(cur)) return \"variable cmipVerbs\";\n      if (compareTypes.propertyIsEnumerable(cur)) return \"atom compareTypes\";\n      if (status.propertyIsEnumerable(cur)) return \"comment status\";\n      if (tags.propertyIsEnumerable(cur)) return \"variable-3 tags\";\n      if (storage.propertyIsEnumerable(cur)) return \"builtin storage\";\n      if (modifier.propertyIsEnumerable(cur)) return \"string-2 modifier\";\n      if (accessTypes.propertyIsEnumerable(cur)) return \"atom accessTypes\";\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            var afterNext = stream.peek(); //look if the character if the quote is like the B in '10100010'B\n\n            if (afterNext) {\n              afterNext = afterNext.toLowerCase();\n              if (afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\") stream.next();\n            }\n\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    } //Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n      token: function token(stream, state) {\n        var ctx = state.context;\n\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") {\n          popContext(state);\n        } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n\n          if (ctx.type == \"}\") ctx = popContext(state);\n\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n        } else if (curPunc == ctx.type) popContext(state);else if (indentStatements && ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\")) pushContext(state, stream.column(), \"statement\");\n\n        state.startOfLine = false;\n        return style;\n      },\n      electricChars: \"{}\",\n      lineComment: \"--\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {},\n        words = str.split(\" \");\n\n    for (var i = 0; i < words.length; ++i) {\n      obj[words[i]] = true;\n    }\n\n    return obj;\n  }\n\n  CodeMirror.defineMIME(\"text/x-ttcn-asn\", {\n    name: \"asn.1\",\n    keywords: words(\"DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION\" + \" REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED\" + \" WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN\" + \" IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS\" + \" MINACCESS MAXACCESS REVISION STATUS DESCRIPTION\" + \" SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName\" + \" ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY\" + \" IMPLIED EXPORTS\"),\n    cmipVerbs: words(\"ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE\"),\n    compareTypes: words(\"OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY\" + \" MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY\" + \" OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL\" + \" SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL\" + \" TEXTUAL-CONVENTION\"),\n    status: words(\"current deprecated mandatory obsolete\"),\n    tags: words(\"APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS\" + \" UNIVERSAL\"),\n    storage: words(\"BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING\" + \" UTCTime InterfaceIndex IANAifType CMIP-Attribute\" + \" REAL PACKAGE PACKAGES IpAddress PhysAddress\" + \" NetworkAddress BITS BMPString TimeStamp TimeTicks\" + \" TruthValue RowStatus DisplayString GeneralString\" + \" GraphicString IA5String NumericString\" + \" PrintableString SnmpAdminAtring TeletexString\" + \" UTF8String VideotexString VisibleString StringStore\" + \" ISO646String T61String UniversalString Unsigned32\" + \" Integer32 Gauge Gauge32 Counter Counter32 Counter64\"),\n    modifier: words(\"ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS\" + \" GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS\" + \" DEFINED\"),\n    accessTypes: words(\"not-accessible accessible-for-notify read-only\" + \" read-create read-write\"),\n    multiLineStrings: true\n  });\n});"],"sourceRoot":""}