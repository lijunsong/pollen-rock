{"version":3,"sources":["../node_modules/codemirror/mode/markdown/markdown.js","../node_modules/codemirror/mode/xml/xml.js"],"names":["CodeMirror","defineMode","cmCfg","modeCfg","htmlMode","getMode","htmlModeMissing","name","undefined","highlightFormatting","maxBlockquoteDepth","taskLists","strikethrough","emoji","fencedCodeBlockHighlighting","xml","tokenTypeOverrides","tokenTypes","header","code","quote","list1","list2","list3","hr","image","imageAltText","imageMarker","formatting","linkInline","linkEmail","linkText","linkHref","em","strong","tokenType","hasOwnProperty","hrRE","listRE","taskListRE","atxHeaderRE","allowAtxHeaderWithoutSpace","setextHeaderRE","textRE","fencedCodeRE","linkDefRE","punctuation","switchInline","stream","state","f","inline","switchBlock","block","blankLine","linkTitle","indentedCode","htmlBlock","exit","inner","innerMode","htmlState","mode","tagStart","context","tokenize","isInText","inlineNormal","blockNormal","trailingSpace","trailingSpaceNewLine","prevLine","thisLine","line","firstTokenOnLine","column","indentation","prevLineLineIsEmpty","test","string","prevLineIsIndentedCode","prevLineIsHr","prevLineIsList","list","maxNonCodeIndentation","listStack","length","lineIndentation","indentationDiff","pop","allowsInlineContinuation","fencedCodeEnd","isHr","match","skipToEnd","eatSpace","getType","eat","setext","listType","current","push","taskList","fencedEndRE","RegExp","localMode","findModeByName","found","mime","mimes","localState","startState","local","lookAhead","charAt","peek","footnoteLink","style","token","md_inside","indexOf","returnType","currListInd","hasExitedList","maxFencedEndInd","styles","i","taskOpen","join","taskClosed","listMod","handleText","text","ch","next","matchCh","regex","replace","previousFormatting","eatWhile","count","t","type","formattingEscape","end","pos","atts","substring","start","backUp","len","before","after","leftFlanking","rightFlanking","setEm","setStrong","retType","endChar","returnState","linkRE",")","]","footnoteLinkInside","footnoteUrl","copyState","s","slice","indent","textAfter","Pass","blockCommentStart","blockCommentEnd","closeBrackets","fold","defineMIME","mod","__webpack_require__","htmlConfig","autoSelfClosers","area","base","br","col","command","embed","frame","img","input","keygen","link","meta","param","source","track","wbr","menuitem","implicitlyClosed","dd","li","optgroup","option","p","rp","rt","tbody","td","tfoot","th","tr","contextGrabbers","dt","address","article","aside","blockquote","dir","div","dl","fieldset","footer","form","h1","h2","h3","h4","h5","h6","hgroup","menu","nav","ol","pre","section","table","ul","thead","doNotIndent","allowUnquoted","allowMissing","caseFold","xmlConfig","allowMissingTagName","editorConf","config_","setStyle","indentUnit","config","defaults","prop","inText","chain","parser","inBlock","doctype","depth","inTag","baseState","tagName","closure","eol","isInAttribute","inAttribute","stringStartCol","terminator","Context","startOfLine","this","prev","indented","noIndent","popContext","maybePopContext","nextTagName","parentTagName","tagNameState","closeTagNameState","attrState","matchClosing","closeState","closeStateErr","_stream","attrEqState","attrValueState","attrContinuedState","baseIndent","sol","fullLine","multilineTagIndentPastTag","multilineTagIndentFactor","alignCDATA","tagAfter","exec","grabbers","electricInput","configuration","helperType","skipAttribute","mimeModes"],"mappings":"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","file":"static/js/3.b1693942.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../meta\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../meta\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"markdown\", function (cmCfg, modeCfg) {\n    var htmlMode = CodeMirror.getMode(cmCfg, \"text/html\");\n    var htmlModeMissing = htmlMode.name == \"null\";\n\n    function getMode(name) {\n      if (CodeMirror.findModeByName) {\n        var found = CodeMirror.findModeByName(name);\n        if (found) name = found.mime || found.mimes[0];\n      }\n\n      var mode = CodeMirror.getMode(cmCfg, name);\n      return mode.name == \"null\" ? null : mode;\n    } // Should characters that affect highlighting be highlighted separate?\n    // Does not include characters that will be output (such as `1.` and `-` for lists)\n\n\n    if (modeCfg.highlightFormatting === undefined) modeCfg.highlightFormatting = false; // Maximum number of nested blockquotes. Set to 0 for infinite nesting.\n    // Excess `>` will emit `error` token.\n\n    if (modeCfg.maxBlockquoteDepth === undefined) modeCfg.maxBlockquoteDepth = 0; // Turn on task lists? (\"- [ ] \" and \"- [x] \")\n\n    if (modeCfg.taskLists === undefined) modeCfg.taskLists = false; // Turn on strikethrough syntax\n\n    if (modeCfg.strikethrough === undefined) modeCfg.strikethrough = false;\n    if (modeCfg.emoji === undefined) modeCfg.emoji = false;\n    if (modeCfg.fencedCodeBlockHighlighting === undefined) modeCfg.fencedCodeBlockHighlighting = true;\n    if (modeCfg.xml === undefined) modeCfg.xml = true; // Allow token types to be overridden by user-provided token types.\n\n    if (modeCfg.tokenTypeOverrides === undefined) modeCfg.tokenTypeOverrides = {};\n    var tokenTypes = {\n      header: \"header\",\n      code: \"comment\",\n      quote: \"quote\",\n      list1: \"variable-2\",\n      list2: \"variable-3\",\n      list3: \"keyword\",\n      hr: \"hr\",\n      image: \"image\",\n      imageAltText: \"image-alt-text\",\n      imageMarker: \"image-marker\",\n      formatting: \"formatting\",\n      linkInline: \"link\",\n      linkEmail: \"link\",\n      linkText: \"link\",\n      linkHref: \"string\",\n      em: \"em\",\n      strong: \"strong\",\n      strikethrough: \"strikethrough\",\n      emoji: \"builtin\"\n    };\n\n    for (var tokenType in tokenTypes) {\n      if (tokenTypes.hasOwnProperty(tokenType) && modeCfg.tokenTypeOverrides[tokenType]) {\n        tokenTypes[tokenType] = modeCfg.tokenTypeOverrides[tokenType];\n      }\n    }\n\n    var hrRE = /^([*\\-_])(?:\\s*\\1){2,}\\s*$/,\n        listRE = /^(?:[*\\-+]|^[0-9]+([.)]))\\s+/,\n        taskListRE = /^\\[(x| )\\](?=\\s)/i // Must follow listRE\n    ,\n        atxHeaderRE = modeCfg.allowAtxHeaderWithoutSpace ? /^(#+)/ : /^(#+)(?: |$)/,\n        setextHeaderRE = /^ *(?:\\={1,}|-{1,})\\s*$/,\n        textRE = /^[^#!\\[\\]*_\\\\<>` \"'(~:]+/,\n        fencedCodeRE = /^(~~~+|```+)[ \\t]*([\\w+#-]*)[^\\n`]*$/,\n        linkDefRE = /^\\s*\\[[^\\]]+?\\]:.*$/ // naive link-definition\n    ,\n        punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]/,\n        expandedTab = \"    \"; // CommonMark specifies tab as 4 spaces\n\n    function switchInline(stream, state, f) {\n      state.f = state.inline = f;\n      return f(stream, state);\n    }\n\n    function switchBlock(stream, state, f) {\n      state.f = state.block = f;\n      return f(stream, state);\n    }\n\n    function lineIsEmpty(line) {\n      return !line || !/\\S/.test(line.string);\n    } // Blocks\n\n\n    function blankLine(state) {\n      // Reset linkTitle state\n      state.linkTitle = false;\n      state.linkHref = false;\n      state.linkText = false; // Reset EM state\n\n      state.em = false; // Reset STRONG state\n\n      state.strong = false; // Reset strikethrough state\n\n      state.strikethrough = false; // Reset state.quote\n\n      state.quote = 0; // Reset state.indentedCode\n\n      state.indentedCode = false;\n\n      if (state.f == htmlBlock) {\n        var exit = htmlModeMissing;\n\n        if (!exit) {\n          var inner = CodeMirror.innerMode(htmlMode, state.htmlState);\n          exit = inner.mode.name == \"xml\" && inner.state.tagStart === null && !inner.state.context && inner.state.tokenize.isInText;\n        }\n\n        if (exit) {\n          state.f = inlineNormal;\n          state.block = blockNormal;\n          state.htmlState = null;\n        }\n      } // Reset state.trailingSpace\n\n\n      state.trailingSpace = 0;\n      state.trailingSpaceNewLine = false; // Mark this line as blank\n\n      state.prevLine = state.thisLine;\n      state.thisLine = {\n        stream: null\n      };\n      return null;\n    }\n\n    function blockNormal(stream, state) {\n      var firstTokenOnLine = stream.column() === state.indentation;\n      var prevLineLineIsEmpty = lineIsEmpty(state.prevLine.stream);\n      var prevLineIsIndentedCode = state.indentedCode;\n      var prevLineIsHr = state.prevLine.hr;\n      var prevLineIsList = state.list !== false;\n      var maxNonCodeIndentation = (state.listStack[state.listStack.length - 1] || 0) + 3;\n      state.indentedCode = false;\n      var lineIndentation = state.indentation; // compute once per line (on first token)\n\n      if (state.indentationDiff === null) {\n        state.indentationDiff = state.indentation;\n\n        if (prevLineIsList) {\n          // Reset inline styles which shouldn't propagate aross list items\n          state.em = false;\n          state.strong = false;\n          state.code = false;\n          state.strikethrough = false;\n          state.list = null; // While this list item's marker's indentation is less than the deepest\n          //  list item's content's indentation,pop the deepest list item\n          //  indentation off the stack, and update block indentation state\n\n          while (lineIndentation < state.listStack[state.listStack.length - 1]) {\n            state.listStack.pop();\n\n            if (state.listStack.length) {\n              state.indentation = state.listStack[state.listStack.length - 1]; // less than the first list's indent -> the line is no longer a list\n            } else {\n              state.list = false;\n            }\n          }\n\n          if (state.list !== false) {\n            state.indentationDiff = lineIndentation - state.listStack[state.listStack.length - 1];\n          }\n        }\n      } // not comprehensive (currently only for setext detection purposes)\n\n\n      var allowsInlineContinuation = !prevLineLineIsEmpty && !prevLineIsHr && !state.prevLine.header && (!prevLineIsList || !prevLineIsIndentedCode) && !state.prevLine.fencedCodeEnd;\n      var isHr = (state.list === false || prevLineIsHr || prevLineLineIsEmpty) && state.indentation <= maxNonCodeIndentation && stream.match(hrRE);\n      var match = null;\n\n      if (state.indentationDiff >= 4 && (prevLineIsIndentedCode || state.prevLine.fencedCodeEnd || state.prevLine.header || prevLineLineIsEmpty)) {\n        stream.skipToEnd();\n        state.indentedCode = true;\n        return tokenTypes.code;\n      } else if (stream.eatSpace()) {\n        return null;\n      } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(atxHeaderRE)) && match[1].length <= 6) {\n        state.quote = 0;\n        state.header = match[1].length;\n        state.thisLine.header = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"header\";\n        state.f = state.inline;\n        return getType(state);\n      } else if (state.indentation <= maxNonCodeIndentation && stream.eat('>')) {\n        state.quote = firstTokenOnLine ? 1 : state.quote + 1;\n        if (modeCfg.highlightFormatting) state.formatting = \"quote\";\n        stream.eatSpace();\n        return getType(state);\n      } else if (!isHr && !state.setext && firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(listRE))) {\n        var listType = match[1] ? \"ol\" : \"ul\";\n        state.indentation = lineIndentation + stream.current().length;\n        state.list = true;\n        state.quote = 0; // Add this list item's content's indentation to the stack\n\n        state.listStack.push(state.indentation);\n\n        if (modeCfg.taskLists && stream.match(taskListRE, false)) {\n          state.taskList = true;\n        }\n\n        state.f = state.inline;\n        if (modeCfg.highlightFormatting) state.formatting = [\"list\", \"list-\" + listType];\n        return getType(state);\n      } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(fencedCodeRE, true))) {\n        state.quote = 0;\n        state.fencedEndRE = new RegExp(match[1] + \"+ *$\"); // try switching mode\n\n        state.localMode = modeCfg.fencedCodeBlockHighlighting && getMode(match[2]);\n        if (state.localMode) state.localState = CodeMirror.startState(state.localMode);\n        state.f = state.block = local;\n        if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n        state.code = -1;\n        return getType(state); // SETEXT has lowest block-scope precedence after HR, so check it after\n        //  the others (code, blockquote, list...)\n      } else if ( // if setext set, indicates line after ---/===\n      state.setext || // line before ---/===\n      (!allowsInlineContinuation || !prevLineIsList) && !state.quote && state.list === false && !state.code && !isHr && !linkDefRE.test(stream.string) && (match = stream.lookAhead(1)) && (match = match.match(setextHeaderRE))) {\n        if (!state.setext) {\n          state.header = match[0].charAt(0) == '=' ? 1 : 2;\n          state.setext = state.header;\n        } else {\n          state.header = state.setext; // has no effect on type so we can reset it now\n\n          state.setext = 0;\n          stream.skipToEnd();\n          if (modeCfg.highlightFormatting) state.formatting = \"header\";\n        }\n\n        state.thisLine.header = true;\n        state.f = state.inline;\n        return getType(state);\n      } else if (isHr) {\n        stream.skipToEnd();\n        state.hr = true;\n        state.thisLine.hr = true;\n        return tokenTypes.hr;\n      } else if (stream.peek() === '[') {\n        return switchInline(stream, state, footnoteLink);\n      }\n\n      return switchInline(stream, state, state.inline);\n    }\n\n    function htmlBlock(stream, state) {\n      var style = htmlMode.token(stream, state.htmlState);\n\n      if (!htmlModeMissing) {\n        var inner = CodeMirror.innerMode(htmlMode, state.htmlState);\n\n        if (inner.mode.name == \"xml\" && inner.state.tagStart === null && !inner.state.context && inner.state.tokenize.isInText || state.md_inside && stream.current().indexOf(\">\") > -1) {\n          state.f = inlineNormal;\n          state.block = blockNormal;\n          state.htmlState = null;\n        }\n      }\n\n      return style;\n    }\n\n    function local(stream, state) {\n      var currListInd = state.listStack[state.listStack.length - 1] || 0;\n      var hasExitedList = state.indentation < currListInd;\n      var maxFencedEndInd = currListInd + 3;\n\n      if (state.fencedEndRE && state.indentation <= maxFencedEndInd && (hasExitedList || stream.match(state.fencedEndRE))) {\n        if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n        var returnType;\n        if (!hasExitedList) returnType = getType(state);\n        state.localMode = state.localState = null;\n        state.block = blockNormal;\n        state.f = inlineNormal;\n        state.fencedEndRE = null;\n        state.code = 0;\n        state.thisLine.fencedCodeEnd = true;\n        if (hasExitedList) return switchBlock(stream, state, state.block);\n        return returnType;\n      } else if (state.localMode) {\n        return state.localMode.token(stream, state.localState);\n      } else {\n        stream.skipToEnd();\n        return tokenTypes.code;\n      }\n    } // Inline\n\n\n    function getType(state) {\n      var styles = [];\n\n      if (state.formatting) {\n        styles.push(tokenTypes.formatting);\n        if (typeof state.formatting === \"string\") state.formatting = [state.formatting];\n\n        for (var i = 0; i < state.formatting.length; i++) {\n          styles.push(tokenTypes.formatting + \"-\" + state.formatting[i]);\n\n          if (state.formatting[i] === \"header\") {\n            styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.header);\n          } // Add `formatting-quote` and `formatting-quote-#` for blockquotes\n          // Add `error` instead if the maximum blockquote nesting depth is passed\n\n\n          if (state.formatting[i] === \"quote\") {\n            if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n              styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.quote);\n            } else {\n              styles.push(\"error\");\n            }\n          }\n        }\n      }\n\n      if (state.taskOpen) {\n        styles.push(\"meta\");\n        return styles.length ? styles.join(' ') : null;\n      }\n\n      if (state.taskClosed) {\n        styles.push(\"property\");\n        return styles.length ? styles.join(' ') : null;\n      }\n\n      if (state.linkHref) {\n        styles.push(tokenTypes.linkHref, \"url\");\n      } else {\n        // Only apply inline styles to non-url text\n        if (state.strong) {\n          styles.push(tokenTypes.strong);\n        }\n\n        if (state.em) {\n          styles.push(tokenTypes.em);\n        }\n\n        if (state.strikethrough) {\n          styles.push(tokenTypes.strikethrough);\n        }\n\n        if (state.emoji) {\n          styles.push(tokenTypes.emoji);\n        }\n\n        if (state.linkText) {\n          styles.push(tokenTypes.linkText);\n        }\n\n        if (state.code) {\n          styles.push(tokenTypes.code);\n        }\n\n        if (state.image) {\n          styles.push(tokenTypes.image);\n        }\n\n        if (state.imageAltText) {\n          styles.push(tokenTypes.imageAltText, \"link\");\n        }\n\n        if (state.imageMarker) {\n          styles.push(tokenTypes.imageMarker);\n        }\n      }\n\n      if (state.header) {\n        styles.push(tokenTypes.header, tokenTypes.header + \"-\" + state.header);\n      }\n\n      if (state.quote) {\n        styles.push(tokenTypes.quote); // Add `quote-#` where the maximum for `#` is modeCfg.maxBlockquoteDepth\n\n        if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n          styles.push(tokenTypes.quote + \"-\" + state.quote);\n        } else {\n          styles.push(tokenTypes.quote + \"-\" + modeCfg.maxBlockquoteDepth);\n        }\n      }\n\n      if (state.list !== false) {\n        var listMod = (state.listStack.length - 1) % 3;\n\n        if (!listMod) {\n          styles.push(tokenTypes.list1);\n        } else if (listMod === 1) {\n          styles.push(tokenTypes.list2);\n        } else {\n          styles.push(tokenTypes.list3);\n        }\n      }\n\n      if (state.trailingSpaceNewLine) {\n        styles.push(\"trailing-space-new-line\");\n      } else if (state.trailingSpace) {\n        styles.push(\"trailing-space-\" + (state.trailingSpace % 2 ? \"a\" : \"b\"));\n      }\n\n      return styles.length ? styles.join(' ') : null;\n    }\n\n    function handleText(stream, state) {\n      if (stream.match(textRE, true)) {\n        return getType(state);\n      }\n\n      return undefined;\n    }\n\n    function inlineNormal(stream, state) {\n      var style = state.text(stream, state);\n      if (typeof style !== 'undefined') return style;\n\n      if (state.list) {\n        // List marker (*, +, -, 1., etc)\n        state.list = null;\n        return getType(state);\n      }\n\n      if (state.taskList) {\n        var taskOpen = stream.match(taskListRE, true)[1] === \" \";\n        if (taskOpen) state.taskOpen = true;else state.taskClosed = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"task\";\n        state.taskList = false;\n        return getType(state);\n      }\n\n      state.taskOpen = false;\n      state.taskClosed = false;\n\n      if (state.header && stream.match(/^#+$/, true)) {\n        if (modeCfg.highlightFormatting) state.formatting = \"header\";\n        return getType(state);\n      }\n\n      var ch = stream.next(); // Matches link titles present on next line\n\n      if (state.linkTitle) {\n        state.linkTitle = false;\n        var matchCh = ch;\n\n        if (ch === '(') {\n          matchCh = ')';\n        }\n\n        matchCh = (matchCh + '').replace(/([.?*+^\\[\\]\\\\(){}|-])/g, \"\\\\$1\");\n        var regex = '^\\\\s*(?:[^' + matchCh + '\\\\\\\\]+|\\\\\\\\\\\\\\\\|\\\\\\\\.)' + matchCh;\n\n        if (stream.match(new RegExp(regex), true)) {\n          return tokenTypes.linkHref;\n        }\n      } // If this block is changed, it may need to be updated in GFM mode\n\n\n      if (ch === '`') {\n        var previousFormatting = state.formatting;\n        if (modeCfg.highlightFormatting) state.formatting = \"code\";\n        stream.eatWhile('`');\n        var count = stream.current().length;\n\n        if (state.code == 0 && (!state.quote || count == 1)) {\n          state.code = count;\n          return getType(state);\n        } else if (count == state.code) {\n          // Must be exact\n          var t = getType(state);\n          state.code = 0;\n          return t;\n        } else {\n          state.formatting = previousFormatting;\n          return getType(state);\n        }\n      } else if (state.code) {\n        return getType(state);\n      }\n\n      if (ch === '\\\\') {\n        stream.next();\n\n        if (modeCfg.highlightFormatting) {\n          var type = getType(state);\n          var formattingEscape = tokenTypes.formatting + \"-escape\";\n          return type ? type + \" \" + formattingEscape : formattingEscape;\n        }\n      }\n\n      if (ch === '!' && stream.match(/\\[[^\\]]*\\] ?(?:\\(|\\[)/, false)) {\n        state.imageMarker = true;\n        state.image = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"image\";\n        return getType(state);\n      }\n\n      if (ch === '[' && state.imageMarker && stream.match(/[^\\]]*\\](\\(.*?\\)| ?\\[.*?\\])/, false)) {\n        state.imageMarker = false;\n        state.imageAltText = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"image\";\n        return getType(state);\n      }\n\n      if (ch === ']' && state.imageAltText) {\n        if (modeCfg.highlightFormatting) state.formatting = \"image\";\n        var type = getType(state);\n        state.imageAltText = false;\n        state.image = false;\n        state.inline = state.f = linkHref;\n        return type;\n      }\n\n      if (ch === '[' && !state.image) {\n        if (state.linkText && stream.match(/^.*?\\]/)) return getType(state);\n        state.linkText = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        return getType(state);\n      }\n\n      if (ch === ']' && state.linkText) {\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n        state.linkText = false;\n        state.inline = state.f = stream.match(/\\(.*?\\)| ?\\[.*?\\]/, false) ? linkHref : inlineNormal;\n        return type;\n      }\n\n      if (ch === '<' && stream.match(/^(https?|ftps?):\\/\\/(?:[^\\\\>]|\\\\.)+>/, false)) {\n        state.f = state.inline = linkInline;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n\n        if (type) {\n          type += \" \";\n        } else {\n          type = \"\";\n        }\n\n        return type + tokenTypes.linkInline;\n      }\n\n      if (ch === '<' && stream.match(/^[^> \\\\]+@(?:[^\\\\>]|\\\\.)+>/, false)) {\n        state.f = state.inline = linkInline;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n\n        if (type) {\n          type += \" \";\n        } else {\n          type = \"\";\n        }\n\n        return type + tokenTypes.linkEmail;\n      }\n\n      if (modeCfg.xml && ch === '<' && stream.match(/^(!--|\\?|!\\[CDATA\\[|[a-z][a-z0-9-]*(?:\\s+[a-z_:.\\-]+(?:\\s*=\\s*[^>]+)?)*\\s*(?:>|$))/i, false)) {\n        var end = stream.string.indexOf(\">\", stream.pos);\n\n        if (end != -1) {\n          var atts = stream.string.substring(stream.start, end);\n          if (/markdown\\s*=\\s*('|\"){0,1}1('|\"){0,1}/.test(atts)) state.md_inside = true;\n        }\n\n        stream.backUp(1);\n        state.htmlState = CodeMirror.startState(htmlMode);\n        return switchBlock(stream, state, htmlBlock);\n      }\n\n      if (modeCfg.xml && ch === '<' && stream.match(/^\\/\\w*?>/)) {\n        state.md_inside = false;\n        return \"tag\";\n      } else if (ch === \"*\" || ch === \"_\") {\n        var len = 1,\n            before = stream.pos == 1 ? \" \" : stream.string.charAt(stream.pos - 2);\n\n        while (len < 3 && stream.eat(ch)) {\n          len++;\n        }\n\n        var after = stream.peek() || \" \"; // See http://spec.commonmark.org/0.27/#emphasis-and-strong-emphasis\n\n        var leftFlanking = !/\\s/.test(after) && (!punctuation.test(after) || /\\s/.test(before) || punctuation.test(before));\n        var rightFlanking = !/\\s/.test(before) && (!punctuation.test(before) || /\\s/.test(after) || punctuation.test(after));\n        var setEm = null,\n            setStrong = null;\n\n        if (len % 2) {\n          // Em\n          if (!state.em && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before))) setEm = true;else if (state.em == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after))) setEm = false;\n        }\n\n        if (len > 1) {\n          // Strong\n          if (!state.strong && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before))) setStrong = true;else if (state.strong == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after))) setStrong = false;\n        }\n\n        if (setStrong != null || setEm != null) {\n          if (modeCfg.highlightFormatting) state.formatting = setEm == null ? \"strong\" : setStrong == null ? \"em\" : \"strong em\";\n          if (setEm === true) state.em = ch;\n          if (setStrong === true) state.strong = ch;\n          var t = getType(state);\n          if (setEm === false) state.em = false;\n          if (setStrong === false) state.strong = false;\n          return t;\n        }\n      } else if (ch === ' ') {\n        if (stream.eat('*') || stream.eat('_')) {\n          // Probably surrounded by spaces\n          if (stream.peek() === ' ') {\n            // Surrounded by spaces, ignore\n            return getType(state);\n          } else {\n            // Not surrounded by spaces, back up pointer\n            stream.backUp(1);\n          }\n        }\n      }\n\n      if (modeCfg.strikethrough) {\n        if (ch === '~' && stream.eatWhile(ch)) {\n          if (state.strikethrough) {\n            // Remove strikethrough\n            if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n            var t = getType(state);\n            state.strikethrough = false;\n            return t;\n          } else if (stream.match(/^[^\\s]/, false)) {\n            // Add strikethrough\n            state.strikethrough = true;\n            if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n            return getType(state);\n          }\n        } else if (ch === ' ') {\n          if (stream.match(/^~~/, true)) {\n            // Probably surrounded by space\n            if (stream.peek() === ' ') {\n              // Surrounded by spaces, ignore\n              return getType(state);\n            } else {\n              // Not surrounded by spaces, back up pointer\n              stream.backUp(2);\n            }\n          }\n        }\n      }\n\n      if (modeCfg.emoji && ch === \":\" && stream.match(/^(?:[a-z_\\d+][a-z_\\d+-]*|\\-[a-z_\\d+][a-z_\\d+-]*):/)) {\n        state.emoji = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"emoji\";\n        var retType = getType(state);\n        state.emoji = false;\n        return retType;\n      }\n\n      if (ch === ' ') {\n        if (stream.match(/^ +$/, false)) {\n          state.trailingSpace++;\n        } else if (state.trailingSpace) {\n          state.trailingSpaceNewLine = true;\n        }\n      }\n\n      return getType(state);\n    }\n\n    function linkInline(stream, state) {\n      var ch = stream.next();\n\n      if (ch === \">\") {\n        state.f = state.inline = inlineNormal;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n\n        if (type) {\n          type += \" \";\n        } else {\n          type = \"\";\n        }\n\n        return type + tokenTypes.linkInline;\n      }\n\n      stream.match(/^[^>]+/, true);\n      return tokenTypes.linkInline;\n    }\n\n    function linkHref(stream, state) {\n      // Check if space, and return NULL if so (to avoid marking the space)\n      if (stream.eatSpace()) {\n        return null;\n      }\n\n      var ch = stream.next();\n\n      if (ch === '(' || ch === '[') {\n        state.f = state.inline = getLinkHrefInside(ch === \"(\" ? \")\" : \"]\");\n        if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n        state.linkHref = true;\n        return getType(state);\n      }\n\n      return 'error';\n    }\n\n    var linkRE = {\n      \")\": /^(?:[^\\\\\\(\\)]|\\\\.|\\((?:[^\\\\\\(\\)]|\\\\.)*\\))*?(?=\\))/,\n      \"]\": /^(?:[^\\\\\\[\\]]|\\\\.|\\[(?:[^\\\\\\[\\]]|\\\\.)*\\])*?(?=\\])/\n    };\n\n    function getLinkHrefInside(endChar) {\n      return function (stream, state) {\n        var ch = stream.next();\n\n        if (ch === endChar) {\n          state.f = state.inline = inlineNormal;\n          if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n          var returnState = getType(state);\n          state.linkHref = false;\n          return returnState;\n        }\n\n        stream.match(linkRE[endChar]);\n        state.linkHref = true;\n        return getType(state);\n      };\n    }\n\n    function footnoteLink(stream, state) {\n      if (stream.match(/^([^\\]\\\\]|\\\\.)*\\]:/, false)) {\n        state.f = footnoteLinkInside;\n        stream.next(); // Consume [\n\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        state.linkText = true;\n        return getType(state);\n      }\n\n      return switchInline(stream, state, inlineNormal);\n    }\n\n    function footnoteLinkInside(stream, state) {\n      if (stream.match(/^\\]:/, true)) {\n        state.f = state.inline = footnoteUrl;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var returnType = getType(state);\n        state.linkText = false;\n        return returnType;\n      }\n\n      stream.match(/^([^\\]\\\\]|\\\\.)+/, true);\n      return tokenTypes.linkText;\n    }\n\n    function footnoteUrl(stream, state) {\n      // Check if space, and return NULL if so (to avoid marking the space)\n      if (stream.eatSpace()) {\n        return null;\n      } // Match URL\n\n\n      stream.match(/^[^\\s]+/, true); // Check for link title\n\n      if (stream.peek() === undefined) {\n        // End of line, set flag to check next line\n        state.linkTitle = true;\n      } else {\n        // More content on line, check if link title\n        stream.match(/^(?:\\s+(?:\"(?:[^\"\\\\]|\\\\\\\\|\\\\.)+\"|'(?:[^'\\\\]|\\\\\\\\|\\\\.)+'|\\((?:[^)\\\\]|\\\\\\\\|\\\\.)+\\)))?/, true);\n      }\n\n      state.f = state.inline = inlineNormal;\n      return tokenTypes.linkHref + \" url\";\n    }\n\n    var mode = {\n      startState: function startState() {\n        return {\n          f: blockNormal,\n          prevLine: {\n            stream: null\n          },\n          thisLine: {\n            stream: null\n          },\n          block: blockNormal,\n          htmlState: null,\n          indentation: 0,\n          inline: inlineNormal,\n          text: handleText,\n          formatting: false,\n          linkText: false,\n          linkHref: false,\n          linkTitle: false,\n          code: 0,\n          em: false,\n          strong: false,\n          header: 0,\n          setext: 0,\n          hr: false,\n          taskList: false,\n          list: false,\n          listStack: [],\n          quote: 0,\n          trailingSpace: 0,\n          trailingSpaceNewLine: false,\n          strikethrough: false,\n          emoji: false,\n          fencedEndRE: null\n        };\n      },\n      copyState: function copyState(s) {\n        return {\n          f: s.f,\n          prevLine: s.prevLine,\n          thisLine: s.thisLine,\n          block: s.block,\n          htmlState: s.htmlState && CodeMirror.copyState(htmlMode, s.htmlState),\n          indentation: s.indentation,\n          localMode: s.localMode,\n          localState: s.localMode ? CodeMirror.copyState(s.localMode, s.localState) : null,\n          inline: s.inline,\n          text: s.text,\n          formatting: false,\n          linkText: s.linkText,\n          linkTitle: s.linkTitle,\n          linkHref: s.linkHref,\n          code: s.code,\n          em: s.em,\n          strong: s.strong,\n          strikethrough: s.strikethrough,\n          emoji: s.emoji,\n          header: s.header,\n          setext: s.setext,\n          hr: s.hr,\n          taskList: s.taskList,\n          list: s.list,\n          listStack: s.listStack.slice(0),\n          quote: s.quote,\n          indentedCode: s.indentedCode,\n          trailingSpace: s.trailingSpace,\n          trailingSpaceNewLine: s.trailingSpaceNewLine,\n          md_inside: s.md_inside,\n          fencedEndRE: s.fencedEndRE\n        };\n      },\n      token: function token(stream, state) {\n        // Reset state.formatting\n        state.formatting = false;\n\n        if (stream != state.thisLine.stream) {\n          state.header = 0;\n          state.hr = false;\n\n          if (stream.match(/^\\s*$/, true)) {\n            blankLine(state);\n            return null;\n          }\n\n          state.prevLine = state.thisLine;\n          state.thisLine = {\n            stream: stream // Reset state.taskList\n\n          };\n          state.taskList = false; // Reset state.trailingSpace\n\n          state.trailingSpace = 0;\n          state.trailingSpaceNewLine = false;\n\n          if (!state.localState) {\n            state.f = state.block;\n\n            if (state.f != htmlBlock) {\n              var indentation = stream.match(/^\\s*/, true)[0].replace(/\\t/g, expandedTab).length;\n              state.indentation = indentation;\n              state.indentationDiff = null;\n              if (indentation > 0) return null;\n            }\n          }\n        }\n\n        return state.f(stream, state);\n      },\n      innerMode: function innerMode(state) {\n        if (state.block == htmlBlock) return {\n          state: state.htmlState,\n          mode: htmlMode\n        };\n        if (state.localState) return {\n          state: state.localState,\n          mode: state.localMode\n        };\n        return {\n          state: state,\n          mode: mode\n        };\n      },\n      indent: function indent(state, textAfter, line) {\n        if (state.block == htmlBlock && htmlMode.indent) return htmlMode.indent(state.htmlState, textAfter, line);\n        if (state.localState && state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line);\n        return CodeMirror.Pass;\n      },\n      blankLine: blankLine,\n      getType: getType,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\",\n      fold: \"markdown\"\n    };\n    return mode;\n  }, \"xml\");\n  CodeMirror.defineMIME(\"text/markdown\", \"markdown\");\n  CodeMirror.defineMIME(\"text/x-markdown\", \"markdown\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var htmlConfig = {\n    autoSelfClosers: {\n      'area': true,\n      'base': true,\n      'br': true,\n      'col': true,\n      'command': true,\n      'embed': true,\n      'frame': true,\n      'hr': true,\n      'img': true,\n      'input': true,\n      'keygen': true,\n      'link': true,\n      'meta': true,\n      'param': true,\n      'source': true,\n      'track': true,\n      'wbr': true,\n      'menuitem': true\n    },\n    implicitlyClosed: {\n      'dd': true,\n      'li': true,\n      'optgroup': true,\n      'option': true,\n      'p': true,\n      'rp': true,\n      'rt': true,\n      'tbody': true,\n      'td': true,\n      'tfoot': true,\n      'th': true,\n      'tr': true\n    },\n    contextGrabbers: {\n      'dd': {\n        'dd': true,\n        'dt': true\n      },\n      'dt': {\n        'dd': true,\n        'dt': true\n      },\n      'li': {\n        'li': true\n      },\n      'option': {\n        'option': true,\n        'optgroup': true\n      },\n      'optgroup': {\n        'optgroup': true\n      },\n      'p': {\n        'address': true,\n        'article': true,\n        'aside': true,\n        'blockquote': true,\n        'dir': true,\n        'div': true,\n        'dl': true,\n        'fieldset': true,\n        'footer': true,\n        'form': true,\n        'h1': true,\n        'h2': true,\n        'h3': true,\n        'h4': true,\n        'h5': true,\n        'h6': true,\n        'header': true,\n        'hgroup': true,\n        'hr': true,\n        'menu': true,\n        'nav': true,\n        'ol': true,\n        'p': true,\n        'pre': true,\n        'section': true,\n        'table': true,\n        'ul': true\n      },\n      'rp': {\n        'rp': true,\n        'rt': true\n      },\n      'rt': {\n        'rp': true,\n        'rt': true\n      },\n      'tbody': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'td': {\n        'td': true,\n        'th': true\n      },\n      'tfoot': {\n        'tbody': true\n      },\n      'th': {\n        'td': true,\n        'th': true\n      },\n      'thead': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'tr': {\n        'tr': true\n      }\n    },\n    doNotIndent: {\n      \"pre\": true\n    },\n    allowUnquoted: true,\n    allowMissing: true,\n    caseFold: true\n  };\n  var xmlConfig = {\n    autoSelfClosers: {},\n    implicitlyClosed: {},\n    contextGrabbers: {},\n    doNotIndent: {},\n    allowUnquoted: false,\n    allowMissing: false,\n    allowMissingTagName: false,\n    caseFold: false\n  };\n  CodeMirror.defineMode(\"xml\", function (editorConf, config_) {\n    var indentUnit = editorConf.indentUnit;\n    var config = {};\n    var defaults = config_.htmlMode ? htmlConfig : xmlConfig;\n\n    for (var prop in defaults) {\n      config[prop] = defaults[prop];\n    }\n\n    for (var prop in config_) {\n      config[prop] = config_[prop];\n    } // Return variables for tokenizers\n\n\n    var type, setStyle;\n\n    function inText(stream, state) {\n      function chain(parser) {\n        state.tokenize = parser;\n        return parser(stream, state);\n      }\n\n      var ch = stream.next();\n\n      if (ch == \"<\") {\n        if (stream.eat(\"!\")) {\n          if (stream.eat(\"[\")) {\n            if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));else return null;\n          } else if (stream.match(\"--\")) {\n            return chain(inBlock(\"comment\", \"-->\"));\n          } else if (stream.match(\"DOCTYPE\", true, true)) {\n            stream.eatWhile(/[\\w\\._\\-]/);\n            return chain(doctype(1));\n          } else {\n            return null;\n          }\n        } else if (stream.eat(\"?\")) {\n          stream.eatWhile(/[\\w\\._\\-]/);\n          state.tokenize = inBlock(\"meta\", \"?>\");\n          return \"meta\";\n        } else {\n          type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n          state.tokenize = inTag;\n          return \"tag bracket\";\n        }\n      } else if (ch == \"&\") {\n        var ok;\n\n        if (stream.eat(\"#\")) {\n          if (stream.eat(\"x\")) {\n            ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n          } else {\n            ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n          }\n        } else {\n          ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n        }\n\n        return ok ? \"atom\" : \"error\";\n      } else {\n        stream.eatWhile(/[^&<]/);\n        return null;\n      }\n    }\n\n    inText.isInText = true;\n\n    function inTag(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \">\" || ch == \"/\" && stream.eat(\">\")) {\n        state.tokenize = inText;\n        type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n        return \"tag bracket\";\n      } else if (ch == \"=\") {\n        type = \"equals\";\n        return null;\n      } else if (ch == \"<\") {\n        state.tokenize = inText;\n        state.state = baseState;\n        state.tagName = state.tagStart = null;\n        var next = state.tokenize(stream, state);\n        return next ? next + \" tag error\" : \"tag error\";\n      } else if (/[\\'\\\"]/.test(ch)) {\n        state.tokenize = inAttribute(ch);\n        state.stringStartCol = stream.column();\n        return state.tokenize(stream, state);\n      } else {\n        stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\n        return \"word\";\n      }\n    }\n\n    function inAttribute(quote) {\n      var closure = function closure(stream, state) {\n        while (!stream.eol()) {\n          if (stream.next() == quote) {\n            state.tokenize = inTag;\n            break;\n          }\n        }\n\n        return \"string\";\n      };\n\n      closure.isInAttribute = true;\n      return closure;\n    }\n\n    function inBlock(style, terminator) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = inText;\n            break;\n          }\n\n          stream.next();\n        }\n\n        return style;\n      };\n    }\n\n    function doctype(depth) {\n      return function (stream, state) {\n        var ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == \"<\") {\n            state.tokenize = doctype(depth + 1);\n            return state.tokenize(stream, state);\n          } else if (ch == \">\") {\n            if (depth == 1) {\n              state.tokenize = inText;\n              break;\n            } else {\n              state.tokenize = doctype(depth - 1);\n              return state.tokenize(stream, state);\n            }\n          }\n        }\n\n        return \"meta\";\n      };\n    }\n\n    function Context(state, tagName, startOfLine) {\n      this.prev = state.context;\n      this.tagName = tagName;\n      this.indent = state.indented;\n      this.startOfLine = startOfLine;\n      if (config.doNotIndent.hasOwnProperty(tagName) || state.context && state.context.noIndent) this.noIndent = true;\n    }\n\n    function popContext(state) {\n      if (state.context) state.context = state.context.prev;\n    }\n\n    function maybePopContext(state, nextTagName) {\n      var parentTagName;\n\n      while (true) {\n        if (!state.context) {\n          return;\n        }\n\n        parentTagName = state.context.tagName;\n\n        if (!config.contextGrabbers.hasOwnProperty(parentTagName) || !config.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {\n          return;\n        }\n\n        popContext(state);\n      }\n    }\n\n    function baseState(type, stream, state) {\n      if (type == \"openTag\") {\n        state.tagStart = stream.column();\n        return tagNameState;\n      } else if (type == \"closeTag\") {\n        return closeTagNameState;\n      } else {\n        return baseState;\n      }\n    }\n\n    function tagNameState(type, stream, state) {\n      if (type == \"word\") {\n        state.tagName = stream.current();\n        setStyle = \"tag\";\n        return attrState;\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return attrState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return tagNameState;\n      }\n    }\n\n    function closeTagNameState(type, stream, state) {\n      if (type == \"word\") {\n        var tagName = stream.current();\n        if (state.context && state.context.tagName != tagName && config.implicitlyClosed.hasOwnProperty(state.context.tagName)) popContext(state);\n\n        if (state.context && state.context.tagName == tagName || config.matchClosing === false) {\n          setStyle = \"tag\";\n          return closeState;\n        } else {\n          setStyle = \"tag error\";\n          return closeStateErr;\n        }\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return closeState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return closeStateErr;\n      }\n    }\n\n    function closeState(type, _stream, state) {\n      if (type != \"endTag\") {\n        setStyle = \"error\";\n        return closeState;\n      }\n\n      popContext(state);\n      return baseState;\n    }\n\n    function closeStateErr(type, stream, state) {\n      setStyle = \"error\";\n      return closeState(type, stream, state);\n    }\n\n    function attrState(type, _stream, state) {\n      if (type == \"word\") {\n        setStyle = \"attribute\";\n        return attrEqState;\n      } else if (type == \"endTag\" || type == \"selfcloseTag\") {\n        var tagName = state.tagName,\n            tagStart = state.tagStart;\n        state.tagName = state.tagStart = null;\n\n        if (type == \"selfcloseTag\" || config.autoSelfClosers.hasOwnProperty(tagName)) {\n          maybePopContext(state, tagName);\n        } else {\n          maybePopContext(state, tagName);\n          state.context = new Context(state, tagName, tagStart == state.indented);\n        }\n\n        return baseState;\n      }\n\n      setStyle = \"error\";\n      return attrState;\n    }\n\n    function attrEqState(type, stream, state) {\n      if (type == \"equals\") return attrValueState;\n      if (!config.allowMissing) setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrValueState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n\n      if (type == \"word\" && config.allowUnquoted) {\n        setStyle = \"string\";\n        return attrState;\n      }\n\n      setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrContinuedState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n      return attrState(type, stream, state);\n    }\n\n    return {\n      startState: function startState(baseIndent) {\n        var state = {\n          tokenize: inText,\n          state: baseState,\n          indented: baseIndent || 0,\n          tagName: null,\n          tagStart: null,\n          context: null\n        };\n        if (baseIndent != null) state.baseIndent = baseIndent;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (!state.tagName && stream.sol()) state.indented = stream.indentation();\n        if (stream.eatSpace()) return null;\n        type = null;\n        var style = state.tokenize(stream, state);\n\n        if ((style || type) && style != \"comment\") {\n          setStyle = null;\n          state.state = state.state(type || style, stream, state);\n          if (setStyle) style = setStyle == \"error\" ? style + \" error\" : setStyle;\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter, fullLine) {\n        var context = state.context; // Indent multi-line strings (e.g. css).\n\n        if (state.tokenize.isInAttribute) {\n          if (state.tagStart == state.indented) return state.stringStartCol + 1;else return state.indented + indentUnit;\n        }\n\n        if (context && context.noIndent) return CodeMirror.Pass;\n        if (state.tokenize != inTag && state.tokenize != inText) return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0; // Indent the starts of attribute names.\n\n        if (state.tagName) {\n          if (config.multilineTagIndentPastTag !== false) return state.tagStart + state.tagName.length + 2;else return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n        }\n\n        if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\n        var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n\n        if (tagAfter && tagAfter[1]) {\n          // Closing tag spotted\n          while (context) {\n            if (context.tagName == tagAfter[2]) {\n              context = context.prev;\n              break;\n            } else if (config.implicitlyClosed.hasOwnProperty(context.tagName)) {\n              context = context.prev;\n            } else {\n              break;\n            }\n          }\n        } else if (tagAfter) {\n          // Opening tag spotted\n          while (context) {\n            var grabbers = config.contextGrabbers[context.tagName];\n            if (grabbers && grabbers.hasOwnProperty(tagAfter[2])) context = context.prev;else break;\n          }\n        }\n\n        while (context && context.prev && !context.startOfLine) {\n          context = context.prev;\n        }\n\n        if (context) return context.indent + indentUnit;else return state.baseIndent || 0;\n      },\n      electricInput: /<\\/[\\s\\w:]+>$/,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      configuration: config.htmlMode ? \"html\" : \"xml\",\n      helperType: config.htmlMode ? \"html\" : \"xml\",\n      skipAttribute: function skipAttribute(state) {\n        if (state.state == attrValueState) state.state = attrState;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/xml\", \"xml\");\n  CodeMirror.defineMIME(\"application/xml\", \"xml\");\n  if (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\")) CodeMirror.defineMIME(\"text/html\", {\n    name: \"xml\",\n    htmlMode: true\n  });\n});"],"sourceRoot":""}