{"version":3,"sources":["../node_modules/codemirror/mode/haml/haml.js","../node_modules/codemirror/mode/xml/xml.js","../node_modules/codemirror/mode/htmlmixed/htmlmixed.js","../node_modules/codemirror/mode/ruby/ruby.js"],"names":["CodeMirror","defineMode","config","htmlMode","getMode","name","rubyMode","rubyInQuote","endQuote","stream","state","ch","peek","rubyState","tokenize","length","next","html","ruby","match","skipToEnd","token","previousToken","style","indented","startOfLine","htmlState","startState","copyState","sol","indentation","eatSpace","eol","backUp","defineMIME","mod","__webpack_require__","htmlConfig","autoSelfClosers","area","base","br","col","command","embed","frame","hr","img","input","keygen","link","meta","param","source","track","wbr","menuitem","implicitlyClosed","dd","li","optgroup","option","p","rp","rt","tbody","td","tfoot","th","tr","contextGrabbers","dt","address","article","aside","blockquote","dir","div","dl","fieldset","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","menu","nav","ol","pre","section","table","ul","thead","doNotIndent","allowUnquoted","allowMissing","caseFold","xmlConfig","allowMissingTagName","editorConf","config_","type","setStyle","indentUnit","defaults","prop","inText","chain","parser","eat","inBlock","eatWhile","doctype","depth","inTag","baseState","tagName","tagStart","test","quote","closure","isInAttribute","inAttribute","stringStartCol","column","terminator","Context","this","prev","context","indent","hasOwnProperty","noIndent","popContext","maybePopContext","nextTagName","parentTagName","tagNameState","closeTagNameState","current","attrState","matchClosing","closeState","closeStateErr","_stream","attrEqState","attrValueState","attrContinuedState","isInText","baseIndent","textAfter","fullLine","Pass","multilineTagIndentPastTag","multilineTagIndentFactor","alignCDATA","tagAfter","exec","grabbers","electricInput","blockCommentStart","blockCommentEnd","configuration","helperType","skipAttribute","mimeModes","defaultTags","script","attrRegexpCache","getAttrValue","text","attr","regexp","RegExp","getAttrRegexp","getTagRegexp","anchored","addTags","from","to","tag","dest","i","unshift","parserConfig","tags","configTags","configScript","scriptTypes","matches","mode","toLowerCase","modeSpec","tagInfo","tagText","spec","findMatchingMode","endTagA","endTag","localState","localMode","pat","cur","close","search","maybeBackup","local","line","innerMode","wordObj","words","o","e","curPunc","keywords","indentWords","dedentWords","matching","[","{","(","newtok","push","tokenBase","readBlockComment","m","phrase","readQuoted","start","pos","found","escaped","indexOf","regexpAhead","delim","propertyIsEnumerable","pop","varList","lastTok","more","tokenBaseUntilBrace","tokenBaseOnce","alreadyCalled","unescaped","continuedLine","kwtype","thisTok","word","firstChar","charAt","ct","closing","lineComment","fold"],"mappings":"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","file":"static/js/116.5bf0781d.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"), require(\"../ruby/ruby\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\", \"../ruby/ruby\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\"; // full haml mode. This handled embedded ruby and html fragments too\n\n  CodeMirror.defineMode(\"haml\", function (config) {\n    var htmlMode = CodeMirror.getMode(config, {\n      name: \"htmlmixed\"\n    });\n    var rubyMode = CodeMirror.getMode(config, \"ruby\");\n\n    function rubyInQuote(endQuote) {\n      return function (stream, state) {\n        var ch = stream.peek();\n\n        if (ch == endQuote && state.rubyState.tokenize.length == 1) {\n          // step out of ruby context as it seems to complete processing all the braces\n          stream.next();\n          state.tokenize = html;\n          return \"closeAttributeTag\";\n        } else {\n          return ruby(stream, state);\n        }\n      };\n    }\n\n    function ruby(stream, state) {\n      if (stream.match(\"-#\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      return rubyMode.token(stream, state.rubyState);\n    }\n\n    function html(stream, state) {\n      var ch = stream.peek(); // handle haml declarations. All declarations that cant be handled here\n      // will be passed to html mode\n\n      if (state.previousToken.style == \"comment\") {\n        if (state.indented > state.previousToken.indented) {\n          stream.skipToEnd();\n          return \"commentLine\";\n        }\n      }\n\n      if (state.startOfLine) {\n        if (ch == \"!\" && stream.match(\"!!\")) {\n          stream.skipToEnd();\n          return \"tag\";\n        } else if (stream.match(/^%[\\w:#\\.]+=/)) {\n          state.tokenize = ruby;\n          return \"hamlTag\";\n        } else if (stream.match(/^%[\\w:]+/)) {\n          return \"hamlTag\";\n        } else if (ch == \"/\") {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (state.startOfLine || state.previousToken.style == \"hamlTag\") {\n        if (ch == \"#\" || ch == \".\") {\n          stream.match(/[\\w-#\\.]*/);\n          return \"hamlAttribute\";\n        }\n      } // donot handle --> as valid ruby, make it HTML close comment instead\n\n\n      if (state.startOfLine && !stream.match(\"-->\", false) && (ch == \"=\" || ch == \"-\")) {\n        state.tokenize = ruby;\n        return state.tokenize(stream, state);\n      }\n\n      if (state.previousToken.style == \"hamlTag\" || state.previousToken.style == \"closeAttributeTag\" || state.previousToken.style == \"hamlAttribute\") {\n        if (ch == \"(\") {\n          state.tokenize = rubyInQuote(\")\");\n          return state.tokenize(stream, state);\n        } else if (ch == \"{\") {\n          if (!stream.match(/^\\{%.*/)) {\n            state.tokenize = rubyInQuote(\"}\");\n            return state.tokenize(stream, state);\n          }\n        }\n      }\n\n      return htmlMode.token(stream, state.htmlState);\n    }\n\n    return {\n      // default to html mode\n      startState: function startState() {\n        var htmlState = CodeMirror.startState(htmlMode);\n        var rubyState = CodeMirror.startState(rubyMode);\n        return {\n          htmlState: htmlState,\n          rubyState: rubyState,\n          indented: 0,\n          previousToken: {\n            style: null,\n            indented: 0\n          },\n          tokenize: html\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          htmlState: CodeMirror.copyState(htmlMode, state.htmlState),\n          rubyState: CodeMirror.copyState(rubyMode, state.rubyState),\n          indented: state.indented,\n          previousToken: state.previousToken,\n          tokenize: state.tokenize\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        state.startOfLine = false; // dont record comment line as we only want to measure comment line with\n        // the opening comment block\n\n        if (style && style != \"commentLine\") {\n          state.previousToken = {\n            style: style,\n            indented: state.indented\n          };\n        } // if current state is ruby and the previous token is not `,` reset the\n        // tokenize to html\n\n\n        if (stream.eol() && state.tokenize == ruby) {\n          stream.backUp(1);\n          var ch = stream.peek();\n          stream.next();\n\n          if (ch && ch != \",\") {\n            state.tokenize = html;\n          }\n        } // reprocess some of the specific style tag when finish setting previousToken\n\n\n        if (style == \"hamlTag\") {\n          style = \"tag\";\n        } else if (style == \"commentLine\") {\n          style = \"comment\";\n        } else if (style == \"hamlAttribute\") {\n          style = \"attribute\";\n        } else if (style == \"closeAttributeTag\") {\n          style = null;\n        }\n\n        return style;\n      }\n    };\n  }, \"htmlmixed\", \"ruby\");\n  CodeMirror.defineMIME(\"text/x-haml\", \"haml\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var htmlConfig = {\n    autoSelfClosers: {\n      'area': true,\n      'base': true,\n      'br': true,\n      'col': true,\n      'command': true,\n      'embed': true,\n      'frame': true,\n      'hr': true,\n      'img': true,\n      'input': true,\n      'keygen': true,\n      'link': true,\n      'meta': true,\n      'param': true,\n      'source': true,\n      'track': true,\n      'wbr': true,\n      'menuitem': true\n    },\n    implicitlyClosed: {\n      'dd': true,\n      'li': true,\n      'optgroup': true,\n      'option': true,\n      'p': true,\n      'rp': true,\n      'rt': true,\n      'tbody': true,\n      'td': true,\n      'tfoot': true,\n      'th': true,\n      'tr': true\n    },\n    contextGrabbers: {\n      'dd': {\n        'dd': true,\n        'dt': true\n      },\n      'dt': {\n        'dd': true,\n        'dt': true\n      },\n      'li': {\n        'li': true\n      },\n      'option': {\n        'option': true,\n        'optgroup': true\n      },\n      'optgroup': {\n        'optgroup': true\n      },\n      'p': {\n        'address': true,\n        'article': true,\n        'aside': true,\n        'blockquote': true,\n        'dir': true,\n        'div': true,\n        'dl': true,\n        'fieldset': true,\n        'footer': true,\n        'form': true,\n        'h1': true,\n        'h2': true,\n        'h3': true,\n        'h4': true,\n        'h5': true,\n        'h6': true,\n        'header': true,\n        'hgroup': true,\n        'hr': true,\n        'menu': true,\n        'nav': true,\n        'ol': true,\n        'p': true,\n        'pre': true,\n        'section': true,\n        'table': true,\n        'ul': true\n      },\n      'rp': {\n        'rp': true,\n        'rt': true\n      },\n      'rt': {\n        'rp': true,\n        'rt': true\n      },\n      'tbody': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'td': {\n        'td': true,\n        'th': true\n      },\n      'tfoot': {\n        'tbody': true\n      },\n      'th': {\n        'td': true,\n        'th': true\n      },\n      'thead': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'tr': {\n        'tr': true\n      }\n    },\n    doNotIndent: {\n      \"pre\": true\n    },\n    allowUnquoted: true,\n    allowMissing: true,\n    caseFold: true\n  };\n  var xmlConfig = {\n    autoSelfClosers: {},\n    implicitlyClosed: {},\n    contextGrabbers: {},\n    doNotIndent: {},\n    allowUnquoted: false,\n    allowMissing: false,\n    allowMissingTagName: false,\n    caseFold: false\n  };\n  CodeMirror.defineMode(\"xml\", function (editorConf, config_) {\n    var indentUnit = editorConf.indentUnit;\n    var config = {};\n    var defaults = config_.htmlMode ? htmlConfig : xmlConfig;\n\n    for (var prop in defaults) {\n      config[prop] = defaults[prop];\n    }\n\n    for (var prop in config_) {\n      config[prop] = config_[prop];\n    } // Return variables for tokenizers\n\n\n    var type, setStyle;\n\n    function inText(stream, state) {\n      function chain(parser) {\n        state.tokenize = parser;\n        return parser(stream, state);\n      }\n\n      var ch = stream.next();\n\n      if (ch == \"<\") {\n        if (stream.eat(\"!\")) {\n          if (stream.eat(\"[\")) {\n            if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));else return null;\n          } else if (stream.match(\"--\")) {\n            return chain(inBlock(\"comment\", \"-->\"));\n          } else if (stream.match(\"DOCTYPE\", true, true)) {\n            stream.eatWhile(/[\\w\\._\\-]/);\n            return chain(doctype(1));\n          } else {\n            return null;\n          }\n        } else if (stream.eat(\"?\")) {\n          stream.eatWhile(/[\\w\\._\\-]/);\n          state.tokenize = inBlock(\"meta\", \"?>\");\n          return \"meta\";\n        } else {\n          type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n          state.tokenize = inTag;\n          return \"tag bracket\";\n        }\n      } else if (ch == \"&\") {\n        var ok;\n\n        if (stream.eat(\"#\")) {\n          if (stream.eat(\"x\")) {\n            ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n          } else {\n            ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n          }\n        } else {\n          ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n        }\n\n        return ok ? \"atom\" : \"error\";\n      } else {\n        stream.eatWhile(/[^&<]/);\n        return null;\n      }\n    }\n\n    inText.isInText = true;\n\n    function inTag(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \">\" || ch == \"/\" && stream.eat(\">\")) {\n        state.tokenize = inText;\n        type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n        return \"tag bracket\";\n      } else if (ch == \"=\") {\n        type = \"equals\";\n        return null;\n      } else if (ch == \"<\") {\n        state.tokenize = inText;\n        state.state = baseState;\n        state.tagName = state.tagStart = null;\n        var next = state.tokenize(stream, state);\n        return next ? next + \" tag error\" : \"tag error\";\n      } else if (/[\\'\\\"]/.test(ch)) {\n        state.tokenize = inAttribute(ch);\n        state.stringStartCol = stream.column();\n        return state.tokenize(stream, state);\n      } else {\n        stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\n        return \"word\";\n      }\n    }\n\n    function inAttribute(quote) {\n      var closure = function closure(stream, state) {\n        while (!stream.eol()) {\n          if (stream.next() == quote) {\n            state.tokenize = inTag;\n            break;\n          }\n        }\n\n        return \"string\";\n      };\n\n      closure.isInAttribute = true;\n      return closure;\n    }\n\n    function inBlock(style, terminator) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = inText;\n            break;\n          }\n\n          stream.next();\n        }\n\n        return style;\n      };\n    }\n\n    function doctype(depth) {\n      return function (stream, state) {\n        var ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == \"<\") {\n            state.tokenize = doctype(depth + 1);\n            return state.tokenize(stream, state);\n          } else if (ch == \">\") {\n            if (depth == 1) {\n              state.tokenize = inText;\n              break;\n            } else {\n              state.tokenize = doctype(depth - 1);\n              return state.tokenize(stream, state);\n            }\n          }\n        }\n\n        return \"meta\";\n      };\n    }\n\n    function Context(state, tagName, startOfLine) {\n      this.prev = state.context;\n      this.tagName = tagName;\n      this.indent = state.indented;\n      this.startOfLine = startOfLine;\n      if (config.doNotIndent.hasOwnProperty(tagName) || state.context && state.context.noIndent) this.noIndent = true;\n    }\n\n    function popContext(state) {\n      if (state.context) state.context = state.context.prev;\n    }\n\n    function maybePopContext(state, nextTagName) {\n      var parentTagName;\n\n      while (true) {\n        if (!state.context) {\n          return;\n        }\n\n        parentTagName = state.context.tagName;\n\n        if (!config.contextGrabbers.hasOwnProperty(parentTagName) || !config.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {\n          return;\n        }\n\n        popContext(state);\n      }\n    }\n\n    function baseState(type, stream, state) {\n      if (type == \"openTag\") {\n        state.tagStart = stream.column();\n        return tagNameState;\n      } else if (type == \"closeTag\") {\n        return closeTagNameState;\n      } else {\n        return baseState;\n      }\n    }\n\n    function tagNameState(type, stream, state) {\n      if (type == \"word\") {\n        state.tagName = stream.current();\n        setStyle = \"tag\";\n        return attrState;\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return attrState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return tagNameState;\n      }\n    }\n\n    function closeTagNameState(type, stream, state) {\n      if (type == \"word\") {\n        var tagName = stream.current();\n        if (state.context && state.context.tagName != tagName && config.implicitlyClosed.hasOwnProperty(state.context.tagName)) popContext(state);\n\n        if (state.context && state.context.tagName == tagName || config.matchClosing === false) {\n          setStyle = \"tag\";\n          return closeState;\n        } else {\n          setStyle = \"tag error\";\n          return closeStateErr;\n        }\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return closeState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return closeStateErr;\n      }\n    }\n\n    function closeState(type, _stream, state) {\n      if (type != \"endTag\") {\n        setStyle = \"error\";\n        return closeState;\n      }\n\n      popContext(state);\n      return baseState;\n    }\n\n    function closeStateErr(type, stream, state) {\n      setStyle = \"error\";\n      return closeState(type, stream, state);\n    }\n\n    function attrState(type, _stream, state) {\n      if (type == \"word\") {\n        setStyle = \"attribute\";\n        return attrEqState;\n      } else if (type == \"endTag\" || type == \"selfcloseTag\") {\n        var tagName = state.tagName,\n            tagStart = state.tagStart;\n        state.tagName = state.tagStart = null;\n\n        if (type == \"selfcloseTag\" || config.autoSelfClosers.hasOwnProperty(tagName)) {\n          maybePopContext(state, tagName);\n        } else {\n          maybePopContext(state, tagName);\n          state.context = new Context(state, tagName, tagStart == state.indented);\n        }\n\n        return baseState;\n      }\n\n      setStyle = \"error\";\n      return attrState;\n    }\n\n    function attrEqState(type, stream, state) {\n      if (type == \"equals\") return attrValueState;\n      if (!config.allowMissing) setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrValueState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n\n      if (type == \"word\" && config.allowUnquoted) {\n        setStyle = \"string\";\n        return attrState;\n      }\n\n      setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrContinuedState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n      return attrState(type, stream, state);\n    }\n\n    return {\n      startState: function startState(baseIndent) {\n        var state = {\n          tokenize: inText,\n          state: baseState,\n          indented: baseIndent || 0,\n          tagName: null,\n          tagStart: null,\n          context: null\n        };\n        if (baseIndent != null) state.baseIndent = baseIndent;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (!state.tagName && stream.sol()) state.indented = stream.indentation();\n        if (stream.eatSpace()) return null;\n        type = null;\n        var style = state.tokenize(stream, state);\n\n        if ((style || type) && style != \"comment\") {\n          setStyle = null;\n          state.state = state.state(type || style, stream, state);\n          if (setStyle) style = setStyle == \"error\" ? style + \" error\" : setStyle;\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter, fullLine) {\n        var context = state.context; // Indent multi-line strings (e.g. css).\n\n        if (state.tokenize.isInAttribute) {\n          if (state.tagStart == state.indented) return state.stringStartCol + 1;else return state.indented + indentUnit;\n        }\n\n        if (context && context.noIndent) return CodeMirror.Pass;\n        if (state.tokenize != inTag && state.tokenize != inText) return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0; // Indent the starts of attribute names.\n\n        if (state.tagName) {\n          if (config.multilineTagIndentPastTag !== false) return state.tagStart + state.tagName.length + 2;else return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n        }\n\n        if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\n        var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n\n        if (tagAfter && tagAfter[1]) {\n          // Closing tag spotted\n          while (context) {\n            if (context.tagName == tagAfter[2]) {\n              context = context.prev;\n              break;\n            } else if (config.implicitlyClosed.hasOwnProperty(context.tagName)) {\n              context = context.prev;\n            } else {\n              break;\n            }\n          }\n        } else if (tagAfter) {\n          // Opening tag spotted\n          while (context) {\n            var grabbers = config.contextGrabbers[context.tagName];\n            if (grabbers && grabbers.hasOwnProperty(tagAfter[2])) context = context.prev;else break;\n          }\n        }\n\n        while (context && context.prev && !context.startOfLine) {\n          context = context.prev;\n        }\n\n        if (context) return context.indent + indentUnit;else return state.baseIndent || 0;\n      },\n      electricInput: /<\\/[\\s\\w:]+>$/,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      configuration: config.htmlMode ? \"html\" : \"xml\",\n      helperType: config.htmlMode ? \"html\" : \"xml\",\n      skipAttribute: function skipAttribute(state) {\n        if (state.state == attrValueState) state.state = attrState;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/xml\", \"xml\");\n  CodeMirror.defineMIME(\"application/xml\", \"xml\");\n  if (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\")) CodeMirror.defineMIME(\"text/html\", {\n    name: \"xml\",\n    htmlMode: true\n  });\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../javascript/javascript\"), require(\"../css/css\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../javascript/javascript\", \"../css/css\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var defaultTags = {\n    script: [[\"lang\", /(javascript|babel)/i, \"javascript\"], [\"type\", /^(?:text|application)\\/(?:x-)?(?:java|ecma)script$|^module$|^$/i, \"javascript\"], [\"type\", /./, \"text/plain\"], [null, null, \"javascript\"]],\n    style: [[\"lang\", /^css$/i, \"css\"], [\"type\", /^(text\\/)?(x-)?(stylesheet|css)$/i, \"css\"], [\"type\", /./, \"text/plain\"], [null, null, \"css\"]]\n  };\n\n  function maybeBackup(stream, pat, style) {\n    var cur = stream.current(),\n        close = cur.search(pat);\n\n    if (close > -1) {\n      stream.backUp(cur.length - close);\n    } else if (cur.match(/<\\/?$/)) {\n      stream.backUp(cur.length);\n      if (!stream.match(pat, false)) stream.match(cur);\n    }\n\n    return style;\n  }\n\n  var attrRegexpCache = {};\n\n  function getAttrRegexp(attr) {\n    var regexp = attrRegexpCache[attr];\n    if (regexp) return regexp;\n    return attrRegexpCache[attr] = new RegExp(\"\\\\s+\" + attr + \"\\\\s*=\\\\s*('|\\\")?([^'\\\"]+)('|\\\")?\\\\s*\");\n  }\n\n  function getAttrValue(text, attr) {\n    var match = text.match(getAttrRegexp(attr));\n    return match ? /^\\s*(.*?)\\s*$/.exec(match[2])[1] : \"\";\n  }\n\n  function getTagRegexp(tagName, anchored) {\n    return new RegExp((anchored ? \"^\" : \"\") + \"<\\/\\s*\" + tagName + \"\\s*>\", \"i\");\n  }\n\n  function addTags(from, to) {\n    for (var tag in from) {\n      var dest = to[tag] || (to[tag] = []);\n      var source = from[tag];\n\n      for (var i = source.length - 1; i >= 0; i--) {\n        dest.unshift(source[i]);\n      }\n    }\n  }\n\n  function findMatchingMode(tagInfo, tagText) {\n    for (var i = 0; i < tagInfo.length; i++) {\n      var spec = tagInfo[i];\n      if (!spec[0] || spec[1].test(getAttrValue(tagText, spec[0]))) return spec[2];\n    }\n  }\n\n  CodeMirror.defineMode(\"htmlmixed\", function (config, parserConfig) {\n    var htmlMode = CodeMirror.getMode(config, {\n      name: \"xml\",\n      htmlMode: true,\n      multilineTagIndentFactor: parserConfig.multilineTagIndentFactor,\n      multilineTagIndentPastTag: parserConfig.multilineTagIndentPastTag\n    });\n    var tags = {};\n    var configTags = parserConfig && parserConfig.tags,\n        configScript = parserConfig && parserConfig.scriptTypes;\n    addTags(defaultTags, tags);\n    if (configTags) addTags(configTags, tags);\n    if (configScript) for (var i = configScript.length - 1; i >= 0; i--) {\n      tags.script.unshift([\"type\", configScript[i].matches, configScript[i].mode]);\n    }\n\n    function html(stream, state) {\n      var style = htmlMode.token(stream, state.htmlState),\n          tag = /\\btag\\b/.test(style),\n          tagName;\n\n      if (tag && !/[<>\\s\\/]/.test(stream.current()) && (tagName = state.htmlState.tagName && state.htmlState.tagName.toLowerCase()) && tags.hasOwnProperty(tagName)) {\n        state.inTag = tagName + \" \";\n      } else if (state.inTag && tag && />$/.test(stream.current())) {\n        var inTag = /^([\\S]+) (.*)/.exec(state.inTag);\n        state.inTag = null;\n        var modeSpec = stream.current() == \">\" && findMatchingMode(tags[inTag[1]], inTag[2]);\n        var mode = CodeMirror.getMode(config, modeSpec);\n        var endTagA = getTagRegexp(inTag[1], true),\n            endTag = getTagRegexp(inTag[1], false);\n\n        state.token = function (stream, state) {\n          if (stream.match(endTagA, false)) {\n            state.token = html;\n            state.localState = state.localMode = null;\n            return null;\n          }\n\n          return maybeBackup(stream, endTag, state.localMode.token(stream, state.localState));\n        };\n\n        state.localMode = mode;\n        state.localState = CodeMirror.startState(mode, htmlMode.indent(state.htmlState, \"\"));\n      } else if (state.inTag) {\n        state.inTag += stream.current();\n        if (stream.eol()) state.inTag += \" \";\n      }\n\n      return style;\n    }\n\n    ;\n    return {\n      startState: function startState() {\n        var state = CodeMirror.startState(htmlMode);\n        return {\n          token: html,\n          inTag: null,\n          localMode: null,\n          localState: null,\n          htmlState: state\n        };\n      },\n      copyState: function copyState(state) {\n        var local;\n\n        if (state.localState) {\n          local = CodeMirror.copyState(state.localMode, state.localState);\n        }\n\n        return {\n          token: state.token,\n          inTag: state.inTag,\n          localMode: state.localMode,\n          localState: local,\n          htmlState: CodeMirror.copyState(htmlMode, state.htmlState)\n        };\n      },\n      token: function token(stream, state) {\n        return state.token(stream, state);\n      },\n      indent: function indent(state, textAfter, line) {\n        if (!state.localMode || /^\\s*<\\//.test(textAfter)) return htmlMode.indent(state.htmlState, textAfter);else if (state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line);else return CodeMirror.Pass;\n      },\n      innerMode: function innerMode(state) {\n        return {\n          state: state.localState || state.htmlState,\n          mode: state.localMode || htmlMode\n        };\n      }\n    };\n  }, \"xml\", \"javascript\", \"css\");\n  CodeMirror.defineMIME(\"text/html\", \"htmlmixed\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ruby\", function (config) {\n    function wordObj(words) {\n      var o = {};\n\n      for (var i = 0, e = words.length; i < e; ++i) {\n        o[words[i]] = true;\n      }\n\n      return o;\n    }\n\n    var keywords = wordObj([\"alias\", \"and\", \"BEGIN\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"defined?\", \"do\", \"else\", \"elsif\", \"END\", \"end\", \"ensure\", \"false\", \"for\", \"if\", \"in\", \"module\", \"next\", \"not\", \"or\", \"redo\", \"rescue\", \"retry\", \"return\", \"self\", \"super\", \"then\", \"true\", \"undef\", \"unless\", \"until\", \"when\", \"while\", \"yield\", \"nil\", \"raise\", \"throw\", \"catch\", \"fail\", \"loop\", \"callcc\", \"caller\", \"lambda\", \"proc\", \"public\", \"protected\", \"private\", \"require\", \"load\", \"require_relative\", \"extend\", \"autoload\", \"__END__\", \"__FILE__\", \"__LINE__\", \"__dir__\"]);\n    var indentWords = wordObj([\"def\", \"class\", \"case\", \"for\", \"while\", \"until\", \"module\", \"then\", \"catch\", \"loop\", \"proc\", \"begin\"]);\n    var dedentWords = wordObj([\"end\", \"until\"]);\n    var matching = {\n      \"[\": \"]\",\n      \"{\": \"}\",\n      \"(\": \")\"\n    };\n    var curPunc;\n\n    function chain(newtok, stream, state) {\n      state.tokenize.push(newtok);\n      return newtok(stream, state);\n    }\n\n    function tokenBase(stream, state) {\n      if (stream.sol() && stream.match(\"=begin\") && stream.eol()) {\n        state.tokenize.push(readBlockComment);\n        return \"comment\";\n      }\n\n      if (stream.eatSpace()) return null;\n      var ch = stream.next(),\n          m;\n\n      if (ch == \"`\" || ch == \"'\" || ch == '\"') {\n        return chain(readQuoted(ch, \"string\", ch == '\"' || ch == \"`\"), stream, state);\n      } else if (ch == \"/\") {\n        if (regexpAhead(stream)) return chain(readQuoted(ch, \"string-2\", true), stream, state);else return \"operator\";\n      } else if (ch == \"%\") {\n        var style = \"string\",\n            embed = true;\n        if (stream.eat(\"s\")) style = \"atom\";else if (stream.eat(/[WQ]/)) style = \"string\";else if (stream.eat(/[r]/)) style = \"string-2\";else if (stream.eat(/[wxq]/)) {\n          style = \"string\";\n          embed = false;\n        }\n        var delim = stream.eat(/[^\\w\\s=]/);\n        if (!delim) return \"operator\";\n        if (matching.propertyIsEnumerable(delim)) delim = matching[delim];\n        return chain(readQuoted(delim, style, embed, true), stream, state);\n      } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (ch == \"<\" && (m = stream.match(/^<-?[\\`\\\"\\']?([a-zA-Z_?]\\w*)[\\`\\\"\\']?(?:;|$)/))) {\n        return chain(readHereDoc(m[1]), stream, state);\n      } else if (ch == \"0\") {\n        if (stream.eat(\"x\")) stream.eatWhile(/[\\da-fA-F]/);else if (stream.eat(\"b\")) stream.eatWhile(/[01]/);else stream.eatWhile(/[0-7]/);\n        return \"number\";\n      } else if (/\\d/.test(ch)) {\n        stream.match(/^[\\d_]*(?:\\.[\\d_]+)?(?:[eE][+\\-]?[\\d_]+)?/);\n        return \"number\";\n      } else if (ch == \"?\") {\n        while (stream.match(/^\\\\[CM]-/)) {}\n\n        if (stream.eat(\"\\\\\")) stream.eatWhile(/\\w/);else stream.next();\n        return \"string\";\n      } else if (ch == \":\") {\n        if (stream.eat(\"'\")) return chain(readQuoted(\"'\", \"atom\", false), stream, state);\n        if (stream.eat('\"')) return chain(readQuoted('\"', \"atom\", true), stream, state); // :> :>> :< :<< are valid symbols\n\n        if (stream.eat(/[\\<\\>]/)) {\n          stream.eat(/[\\<\\>]/);\n          return \"atom\";\n        } // :+ :- :/ :* :| :& :! are valid symbols\n\n\n        if (stream.eat(/[\\+\\-\\*\\/\\&\\|\\:\\!]/)) {\n          return \"atom\";\n        } // Symbols can't start by a digit\n\n\n        if (stream.eat(/[a-zA-Z$@_\\xa1-\\uffff]/)) {\n          stream.eatWhile(/[\\w$\\xa1-\\uffff]/); // Only one ? ! = is allowed and only as the last character\n\n          stream.eat(/[\\?\\!\\=]/);\n          return \"atom\";\n        }\n\n        return \"operator\";\n      } else if (ch == \"@\" && stream.match(/^@?[a-zA-Z_\\xa1-\\uffff]/)) {\n        stream.eat(\"@\");\n        stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n        return \"variable-2\";\n      } else if (ch == \"$\") {\n        if (stream.eat(/[a-zA-Z_]/)) {\n          stream.eatWhile(/[\\w]/);\n        } else if (stream.eat(/\\d/)) {\n          stream.eat(/\\d/);\n        } else {\n          stream.next(); // Must be a special global like $: or $!\n        }\n\n        return \"variable-3\";\n      } else if (/[a-zA-Z_\\xa1-\\uffff]/.test(ch)) {\n        stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n        stream.eat(/[\\?\\!]/);\n        if (stream.eat(\":\")) return \"atom\";\n        return \"ident\";\n      } else if (ch == \"|\" && (state.varList || state.lastTok == \"{\" || state.lastTok == \"do\")) {\n        curPunc = \"|\";\n        return null;\n      } else if (/[\\(\\)\\[\\]{}\\\\;]/.test(ch)) {\n        curPunc = ch;\n        return null;\n      } else if (ch == \"-\" && stream.eat(\">\")) {\n        return \"arrow\";\n      } else if (/[=+\\-\\/*:\\.^%<>~|]/.test(ch)) {\n        var more = stream.eatWhile(/[=+\\-\\/*:\\.^%<>~|]/);\n        if (ch == \".\" && !more) curPunc = \".\";\n        return \"operator\";\n      } else {\n        return null;\n      }\n    }\n\n    function regexpAhead(stream) {\n      var start = stream.pos,\n          depth = 0,\n          next,\n          found = false,\n          escaped = false;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped) {\n          if (\"[{(\".indexOf(next) > -1) {\n            depth++;\n          } else if (\"]})\".indexOf(next) > -1) {\n            depth--;\n            if (depth < 0) break;\n          } else if (next == \"/\" && depth == 0) {\n            found = true;\n            break;\n          }\n\n          escaped = next == \"\\\\\";\n        } else {\n          escaped = false;\n        }\n      }\n\n      stream.backUp(stream.pos - start);\n      return found;\n    }\n\n    function tokenBaseUntilBrace(depth) {\n      if (!depth) depth = 1;\n      return function (stream, state) {\n        if (stream.peek() == \"}\") {\n          if (depth == 1) {\n            state.tokenize.pop();\n            return state.tokenize[state.tokenize.length - 1](stream, state);\n          } else {\n            state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);\n          }\n        } else if (stream.peek() == \"{\") {\n          state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);\n        }\n\n        return tokenBase(stream, state);\n      };\n    }\n\n    function tokenBaseOnce() {\n      var alreadyCalled = false;\n      return function (stream, state) {\n        if (alreadyCalled) {\n          state.tokenize.pop();\n          return state.tokenize[state.tokenize.length - 1](stream, state);\n        }\n\n        alreadyCalled = true;\n        return tokenBase(stream, state);\n      };\n    }\n\n    function readQuoted(quote, style, embed, unescaped) {\n      return function (stream, state) {\n        var escaped = false,\n            ch;\n\n        if (state.context.type === 'read-quoted-paused') {\n          state.context = state.context.prev;\n          stream.eat(\"}\");\n        }\n\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && (unescaped || !escaped)) {\n            state.tokenize.pop();\n            break;\n          }\n\n          if (embed && ch == \"#\" && !escaped) {\n            if (stream.eat(\"{\")) {\n              if (quote == \"}\") {\n                state.context = {\n                  prev: state.context,\n                  type: 'read-quoted-paused'\n                };\n              }\n\n              state.tokenize.push(tokenBaseUntilBrace());\n              break;\n            } else if (/[@\\$]/.test(stream.peek())) {\n              state.tokenize.push(tokenBaseOnce());\n              break;\n            }\n          }\n\n          escaped = !escaped && ch == \"\\\\\";\n        }\n\n        return style;\n      };\n    }\n\n    function readHereDoc(phrase) {\n      return function (stream, state) {\n        if (stream.match(phrase)) state.tokenize.pop();else stream.skipToEnd();\n        return \"string\";\n      };\n    }\n\n    function readBlockComment(stream, state) {\n      if (stream.sol() && stream.match(\"=end\") && stream.eol()) state.tokenize.pop();\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: [tokenBase],\n          indented: 0,\n          context: {\n            type: \"top\",\n            indented: -config.indentUnit\n          },\n          continuedLine: false,\n          lastTok: null,\n          varList: false\n        };\n      },\n      token: function token(stream, state) {\n        curPunc = null;\n        if (stream.sol()) state.indented = stream.indentation();\n        var style = state.tokenize[state.tokenize.length - 1](stream, state),\n            kwtype;\n        var thisTok = curPunc;\n\n        if (style == \"ident\") {\n          var word = stream.current();\n          style = state.lastTok == \".\" ? \"property\" : keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : /^[A-Z]/.test(word) ? \"tag\" : state.lastTok == \"def\" || state.lastTok == \"class\" || state.varList ? \"def\" : \"variable\";\n\n          if (style == \"keyword\") {\n            thisTok = word;\n            if (indentWords.propertyIsEnumerable(word)) kwtype = \"indent\";else if (dedentWords.propertyIsEnumerable(word)) kwtype = \"dedent\";else if ((word == \"if\" || word == \"unless\") && stream.column() == stream.indentation()) kwtype = \"indent\";else if (word == \"do\" && state.context.indented < state.indented) kwtype = \"indent\";\n          }\n        }\n\n        if (curPunc || style && style != \"comment\") state.lastTok = thisTok;\n        if (curPunc == \"|\") state.varList = !state.varList;\n        if (kwtype == \"indent\" || /[\\(\\[\\{]/.test(curPunc)) state.context = {\n          prev: state.context,\n          type: curPunc || style,\n          indented: state.indented\n        };else if ((kwtype == \"dedent\" || /[\\)\\]\\}]/.test(curPunc)) && state.context.prev) state.context = state.context.prev;\n        if (stream.eol()) state.continuedLine = curPunc == \"\\\\\" || style == \"operator\";\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize[state.tokenize.length - 1] != tokenBase) return 0;\n        var firstChar = textAfter && textAfter.charAt(0);\n        var ct = state.context;\n        var closing = ct.type == matching[firstChar] || ct.type == \"keyword\" && /^(?:end|until|else|elsif|when|rescue)\\b/.test(textAfter);\n        return ct.indented + (closing ? 0 : config.indentUnit) + (state.continuedLine ? config.indentUnit : 0);\n      },\n      electricInput: /^\\s*(?:end|rescue|elsif|else|\\})$/,\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-ruby\", \"ruby\");\n});"],"sourceRoot":""}