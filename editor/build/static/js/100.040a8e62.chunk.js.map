{"version":3,"sources":["../node_modules/codemirror/mode/vb/vb.js"],"names":["CodeMirror","defineMode","conf","parserConf","ERRORCLASS","wordRegexp","words","RegExp","join","singleOperators","singleDelimiters","doubleOperators","doubleDelimiters","tripleDelimiters","identifiers","openingKeywords","middleKeywords","endKeywords","operatorKeywords","wordOperators","commonKeywords","commontypes","keywords","types","stringPrefixes","opening","middle","closing","doubleClosing","doOpening","indentInfo","indent","_stream","state","currentIndent","dedent","tokenBase","stream","eatSpace","ch","peek","skipToEnd","match","floatLiteral","eat","intLiteral","tokenize","delimiter","singleline","length","eol","eatWhile","singleLineStringErrors","tokenStringFactory","current","doInCurrentLine","next","registerHelper","concat","external","electricChars","startState","lastToken","nextLineIndent","token","sol","style","delimiter_index","indexOf","tokenLexer","content","textAfter","trueText","replace","indentUnit","lineComment","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/100.040a8e62.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"vb\", function (conf, parserConf) {\n    var ERRORCLASS = 'error';\n\n    function wordRegexp(words) {\n      return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n    }\n\n    var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/%&\\\\\\\\|\\\\^~<>!]\");\n    var singleDelimiters = new RegExp('^[\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}@,:`=;\\\\.]');\n    var doubleOperators = new RegExp(\"^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\\\*\\\\*))\");\n    var doubleDelimiters = new RegExp(\"^((\\\\+=)|(\\\\-=)|(\\\\*=)|(%=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\n    var tripleDelimiters = new RegExp(\"^((//=)|(>>=)|(<<=)|(\\\\*\\\\*=))\");\n    var identifiers = new RegExp(\"^[_A-Za-z][_A-Za-z0-9]*\");\n    var openingKeywords = ['class', 'module', 'sub', 'enum', 'select', 'while', 'if', 'function', 'get', 'set', 'property', 'try'];\n    var middleKeywords = ['else', 'elseif', 'case', 'catch'];\n    var endKeywords = ['next', 'loop'];\n    var operatorKeywords = ['and', 'or', 'not', 'xor', 'in'];\n    var wordOperators = wordRegexp(operatorKeywords);\n    var commonKeywords = ['as', 'dim', 'break', 'continue', 'optional', 'then', 'until', 'goto', 'byval', 'byref', 'new', 'handles', 'property', 'return', 'const', 'private', 'protected', 'friend', 'public', 'shared', 'static', 'true', 'false'];\n    var commontypes = ['integer', 'string', 'double', 'decimal', 'boolean', 'short', 'char', 'float', 'single'];\n    var keywords = wordRegexp(commonKeywords);\n    var types = wordRegexp(commontypes);\n    var stringPrefixes = '\"';\n    var opening = wordRegexp(openingKeywords);\n    var middle = wordRegexp(middleKeywords);\n    var closing = wordRegexp(endKeywords);\n    var doubleClosing = wordRegexp(['end']);\n    var doOpening = wordRegexp(['do']);\n    var indentInfo = null;\n    CodeMirror.registerHelper(\"hintWords\", \"vb\", openingKeywords.concat(middleKeywords).concat(endKeywords).concat(operatorKeywords).concat(commonKeywords).concat(commontypes));\n\n    function indent(_stream, state) {\n      state.currentIndent++;\n    }\n\n    function dedent(_stream, state) {\n      state.currentIndent--;\n    } // tokenizers\n\n\n    function tokenBase(stream, state) {\n      if (stream.eatSpace()) {\n        return null;\n      }\n\n      var ch = stream.peek(); // Handle Comments\n\n      if (ch === \"'\") {\n        stream.skipToEnd();\n        return 'comment';\n      } // Handle Number Literals\n\n\n      if (stream.match(/^((&H)|(&O))?[0-9\\.a-f]/i, false)) {\n        var floatLiteral = false; // Floats\n\n        if (stream.match(/^\\d*\\.\\d+F?/i)) {\n          floatLiteral = true;\n        } else if (stream.match(/^\\d+\\.\\d*F?/)) {\n          floatLiteral = true;\n        } else if (stream.match(/^\\.\\d+F?/)) {\n          floatLiteral = true;\n        }\n\n        if (floatLiteral) {\n          // Float literals may be \"imaginary\"\n          stream.eat(/J/i);\n          return 'number';\n        } // Integers\n\n\n        var intLiteral = false; // Hex\n\n        if (stream.match(/^&H[0-9a-f]+/i)) {\n          intLiteral = true;\n        } // Octal\n        else if (stream.match(/^&O[0-7]+/i)) {\n            intLiteral = true;\n          } // Decimal\n          else if (stream.match(/^[1-9]\\d*F?/)) {\n              // Decimal literals may be \"imaginary\"\n              stream.eat(/J/i); // TODO - Can you have imaginary longs?\n\n              intLiteral = true;\n            } // Zero by itself with no other piece of number.\n            else if (stream.match(/^0(?![\\dx])/i)) {\n                intLiteral = true;\n              }\n\n        if (intLiteral) {\n          // Integer literals may be \"long\"\n          stream.eat(/L/i);\n          return 'number';\n        }\n      } // Handle Strings\n\n\n      if (stream.match(stringPrefixes)) {\n        state.tokenize = tokenStringFactory(stream.current());\n        return state.tokenize(stream, state);\n      } // Handle operators and Delimiters\n\n\n      if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters)) {\n        return null;\n      }\n\n      if (stream.match(doubleOperators) || stream.match(singleOperators) || stream.match(wordOperators)) {\n        return 'operator';\n      }\n\n      if (stream.match(singleDelimiters)) {\n        return null;\n      }\n\n      if (stream.match(doOpening)) {\n        indent(stream, state);\n        state.doInCurrentLine = true;\n        return 'keyword';\n      }\n\n      if (stream.match(opening)) {\n        if (!state.doInCurrentLine) indent(stream, state);else state.doInCurrentLine = false;\n        return 'keyword';\n      }\n\n      if (stream.match(middle)) {\n        return 'keyword';\n      }\n\n      if (stream.match(doubleClosing)) {\n        dedent(stream, state);\n        dedent(stream, state);\n        return 'keyword';\n      }\n\n      if (stream.match(closing)) {\n        dedent(stream, state);\n        return 'keyword';\n      }\n\n      if (stream.match(types)) {\n        return 'keyword';\n      }\n\n      if (stream.match(keywords)) {\n        return 'keyword';\n      }\n\n      if (stream.match(identifiers)) {\n        return 'variable';\n      } // Handle non-detected items\n\n\n      stream.next();\n      return ERRORCLASS;\n    }\n\n    function tokenStringFactory(delimiter) {\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = 'string';\n      return function (stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"]/);\n\n          if (stream.match(delimiter)) {\n            state.tokenize = tokenBase;\n            return OUTCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n\n        if (singleline) {\n          if (parserConf.singleLineStringErrors) {\n            return ERRORCLASS;\n          } else {\n            state.tokenize = tokenBase;\n          }\n        }\n\n        return OUTCLASS;\n      };\n    }\n\n    function tokenLexer(stream, state) {\n      var style = state.tokenize(stream, state);\n      var current = stream.current(); // Handle '.' connected identifiers\n\n      if (current === '.') {\n        style = state.tokenize(stream, state);\n\n        if (style === 'variable') {\n          return 'variable';\n        } else {\n          return ERRORCLASS;\n        }\n      }\n\n      var delimiter_index = '[({'.indexOf(current);\n\n      if (delimiter_index !== -1) {\n        indent(stream, state);\n      }\n\n      if (indentInfo === 'dedent') {\n        if (dedent(stream, state)) {\n          return ERRORCLASS;\n        }\n      }\n\n      delimiter_index = '])}'.indexOf(current);\n\n      if (delimiter_index !== -1) {\n        if (dedent(stream, state)) {\n          return ERRORCLASS;\n        }\n      }\n\n      return style;\n    }\n\n    var external = {\n      electricChars: \"dDpPtTfFeE \",\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          lastToken: null,\n          currentIndent: 0,\n          nextLineIndent: 0,\n          doInCurrentLine: false\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          state.currentIndent += state.nextLineIndent;\n          state.nextLineIndent = 0;\n          state.doInCurrentLine = 0;\n        }\n\n        var style = tokenLexer(stream, state);\n        state.lastToken = {\n          style: style,\n          content: stream.current()\n        };\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        var trueText = textAfter.replace(/^\\s+|\\s+$/g, '');\n        if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return conf.indentUnit * (state.currentIndent - 1);\n        if (state.currentIndent < 0) return 0;\n        return state.currentIndent * conf.indentUnit;\n      },\n      lineComment: \"'\"\n    };\n    return external;\n  });\n  CodeMirror.defineMIME(\"text/x-vb\", \"vb\");\n});"],"sourceRoot":""}