{"version":3,"sources":["../node_modules/codemirror/mode/cypher/cypher.js"],"names":["CodeMirror","wordRegexp","words","RegExp","join","defineMode","config","curPunc","tokenBase","stream","ch","next","match","test","eat","skipToEnd","operatorChars","eatWhile","word","current","funcs","preds","keywords","pushContext","state","type","col","context","prev","indent","popContext","indentUnit","startState","tokenize","token","sol","align","indentation","eatSpace","style","column","textAfter","firstChar","charAt","closing","commands","newlineAndIndent","modeExtensions","autoFormatLineBreaks","text","lines","split","reProcessedPortion","i","length","replace","trim","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/18.bdb90cb2.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// By the Neo4j Team and contributors.\n// https://github.com/neo4j-contrib/CodeMirror\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var wordRegexp = function wordRegexp(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n  };\n\n  CodeMirror.defineMode(\"cypher\", function (config) {\n    var tokenBase = function tokenBase(stream\n    /*, state*/\n    ) {\n      var ch = stream.next();\n\n      if (ch === '\"') {\n        stream.match(/.*?\"/);\n        return \"string\";\n      }\n\n      if (ch === \"'\") {\n        stream.match(/.*?'/);\n        return \"string\";\n      }\n\n      if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n        curPunc = ch;\n        return \"node\";\n      } else if (ch === \"/\" && stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (operatorChars.test(ch)) {\n        stream.eatWhile(operatorChars);\n        return null;\n      } else {\n        stream.eatWhile(/[_\\w\\d]/);\n\n        if (stream.eat(\":\")) {\n          stream.eatWhile(/[\\w\\d_\\-]/);\n          return \"atom\";\n        }\n\n        var word = stream.current();\n        if (funcs.test(word)) return \"builtin\";\n        if (preds.test(word)) return \"def\";\n        if (keywords.test(word)) return \"keyword\";\n        return \"variable\";\n      }\n    };\n\n    var pushContext = function pushContext(state, type, col) {\n      return state.context = {\n        prev: state.context,\n        indent: state.indent,\n        col: col,\n        type: type\n      };\n    };\n\n    var popContext = function popContext(state) {\n      state.indent = state.context.indent;\n      return state.context = state.context.prev;\n    };\n\n    var indentUnit = config.indentUnit;\n    var curPunc;\n    var funcs = wordRegexp([\"abs\", \"acos\", \"allShortestPaths\", \"asin\", \"atan\", \"atan2\", \"avg\", \"ceil\", \"coalesce\", \"collect\", \"cos\", \"cot\", \"count\", \"degrees\", \"e\", \"endnode\", \"exp\", \"extract\", \"filter\", \"floor\", \"haversin\", \"head\", \"id\", \"keys\", \"labels\", \"last\", \"left\", \"length\", \"log\", \"log10\", \"lower\", \"ltrim\", \"max\", \"min\", \"node\", \"nodes\", \"percentileCont\", \"percentileDisc\", \"pi\", \"radians\", \"rand\", \"range\", \"reduce\", \"rel\", \"relationship\", \"relationships\", \"replace\", \"reverse\", \"right\", \"round\", \"rtrim\", \"shortestPath\", \"sign\", \"sin\", \"size\", \"split\", \"sqrt\", \"startnode\", \"stdev\", \"stdevp\", \"str\", \"substring\", \"sum\", \"tail\", \"tan\", \"timestamp\", \"toFloat\", \"toInt\", \"toString\", \"trim\", \"type\", \"upper\"]);\n    var preds = wordRegexp([\"all\", \"and\", \"any\", \"contains\", \"exists\", \"has\", \"in\", \"none\", \"not\", \"or\", \"single\", \"xor\"]);\n    var keywords = wordRegexp([\"as\", \"asc\", \"ascending\", \"assert\", \"by\", \"case\", \"commit\", \"constraint\", \"create\", \"csv\", \"cypher\", \"delete\", \"desc\", \"descending\", \"detach\", \"distinct\", \"drop\", \"else\", \"end\", \"ends\", \"explain\", \"false\", \"fieldterminator\", \"foreach\", \"from\", \"headers\", \"in\", \"index\", \"is\", \"join\", \"limit\", \"load\", \"match\", \"merge\", \"null\", \"on\", \"optional\", \"order\", \"periodic\", \"profile\", \"remove\", \"return\", \"scan\", \"set\", \"skip\", \"start\", \"starts\", \"then\", \"true\", \"union\", \"unique\", \"unwind\", \"using\", \"when\", \"where\", \"with\", \"call\", \"yield\"]);\n    var operatorChars = /[*+\\-<>=&|~%^]/;\n    return {\n      startState: function startState()\n      /*base*/\n      {\n        return {\n          tokenize: tokenBase,\n          context: null,\n          indent: 0,\n          col: 0\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          if (state.context && state.context.align == null) {\n            state.context.align = false;\n          }\n\n          state.indent = stream.indentation();\n        }\n\n        if (stream.eatSpace()) {\n          return null;\n        }\n\n        var style = state.tokenize(stream, state);\n\n        if (style !== \"comment\" && state.context && state.context.align == null && state.context.type !== \"pattern\") {\n          state.context.align = true;\n        }\n\n        if (curPunc === \"(\") {\n          pushContext(state, \")\", stream.column());\n        } else if (curPunc === \"[\") {\n          pushContext(state, \"]\", stream.column());\n        } else if (curPunc === \"{\") {\n          pushContext(state, \"}\", stream.column());\n        } else if (/[\\]\\}\\)]/.test(curPunc)) {\n          while (state.context && state.context.type === \"pattern\") {\n            popContext(state);\n          }\n\n          if (state.context && curPunc === state.context.type) {\n            popContext(state);\n          }\n        } else if (curPunc === \".\" && state.context && state.context.type === \"pattern\") {\n          popContext(state);\n        } else if (/atom|string|variable/.test(style) && state.context) {\n          if (/[\\}\\]]/.test(state.context.type)) {\n            pushContext(state, \"pattern\", stream.column());\n          } else if (state.context.type === \"pattern\" && !state.context.align) {\n            state.context.align = true;\n            state.context.col = stream.column();\n          }\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        var context = state.context;\n\n        if (/[\\]\\}]/.test(firstChar)) {\n          while (context && context.type === \"pattern\") {\n            context = context.prev;\n          }\n        }\n\n        var closing = context && firstChar === context.type;\n        if (!context) return 0;\n        if (context.type === \"keywords\") return CodeMirror.commands.newlineAndIndent;\n        if (context.align) return context.col + (closing ? 0 : 1);\n        return context.indent + (closing ? 0 : indentUnit);\n      }\n    };\n  });\n  CodeMirror.modeExtensions[\"cypher\"] = {\n    autoFormatLineBreaks: function autoFormatLineBreaks(text) {\n      var i, lines, reProcessedPortion;\n      var lines = text.split(\"\\n\");\n      var reProcessedPortion = /\\s+\\b(return|where|order by|match|with|skip|limit|create|delete|set)\\b\\s/g;\n\n      for (var i = 0; i < lines.length; i++) {\n        lines[i] = lines[i].replace(reProcessedPortion, \" \\n$1 \").trim();\n      }\n\n      return lines.join(\"\\n\");\n    }\n  };\n  CodeMirror.defineMIME(\"application/x-cypher-query\", \"cypher\");\n});"],"sourceRoot":""}