{"version":3,"sources":["../node_modules/codemirror/mode/smalltalk/smalltalk.js"],"names":["CodeMirror","defineMode","config","specialChars","keywords","Context","tokenizer","parent","this","next","Token","name","context","eos","State","expectVariable","indentation","userIndentationDelta","prototype","userIndent","indentUnit","stream","state","token","aChar","nextComment","nextString","peek","nextSymbol","eatWhile","nextTemporaries","test","Math","max","current","eat","startState","eatSpace","blankLine","indent","textAfter","i","charAt","electricChars","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/82.5f4a644b.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode('smalltalk', function (config) {\n    var specialChars = /[+\\-\\/\\\\*~<>=@%|&?!.,:;^]/;\n    var keywords = /true|false|nil|self|super|thisContext/;\n\n    var Context = function Context(tokenizer, parent) {\n      this.next = tokenizer;\n      this.parent = parent;\n    };\n\n    var Token = function Token(name, context, eos) {\n      this.name = name;\n      this.context = context;\n      this.eos = eos;\n    };\n\n    var State = function State() {\n      this.context = new Context(next, null);\n      this.expectVariable = true;\n      this.indentation = 0;\n      this.userIndentationDelta = 0;\n    };\n\n    State.prototype.userIndent = function (indentation) {\n      this.userIndentationDelta = indentation > 0 ? indentation / config.indentUnit - this.indentation : 0;\n    };\n\n    var next = function next(stream, context, state) {\n      var token = new Token(null, context, false);\n      var aChar = stream.next();\n\n      if (aChar === '\"') {\n        token = nextComment(stream, new Context(nextComment, context));\n      } else if (aChar === '\\'') {\n        token = nextString(stream, new Context(nextString, context));\n      } else if (aChar === '#') {\n        if (stream.peek() === '\\'') {\n          stream.next();\n          token = nextSymbol(stream, new Context(nextSymbol, context));\n        } else {\n          if (stream.eatWhile(/[^\\s.{}\\[\\]()]/)) token.name = 'string-2';else token.name = 'meta';\n        }\n      } else if (aChar === '$') {\n        if (stream.next() === '<') {\n          stream.eatWhile(/[^\\s>]/);\n          stream.next();\n        }\n\n        token.name = 'string-2';\n      } else if (aChar === '|' && state.expectVariable) {\n        token.context = new Context(nextTemporaries, context);\n      } else if (/[\\[\\]{}()]/.test(aChar)) {\n        token.name = 'bracket';\n        token.eos = /[\\[{(]/.test(aChar);\n\n        if (aChar === '[') {\n          state.indentation++;\n        } else if (aChar === ']') {\n          state.indentation = Math.max(0, state.indentation - 1);\n        }\n      } else if (specialChars.test(aChar)) {\n        stream.eatWhile(specialChars);\n        token.name = 'operator';\n        token.eos = aChar !== ';'; // ; cascaded message expression\n      } else if (/\\d/.test(aChar)) {\n        stream.eatWhile(/[\\w\\d]/);\n        token.name = 'number';\n      } else if (/[\\w_]/.test(aChar)) {\n        stream.eatWhile(/[\\w\\d_]/);\n        token.name = state.expectVariable ? keywords.test(stream.current()) ? 'keyword' : 'variable' : null;\n      } else {\n        token.eos = state.expectVariable;\n      }\n\n      return token;\n    };\n\n    var nextComment = function nextComment(stream, context) {\n      stream.eatWhile(/[^\"]/);\n      return new Token('comment', stream.eat('\"') ? context.parent : context, true);\n    };\n\n    var nextString = function nextString(stream, context) {\n      stream.eatWhile(/[^']/);\n      return new Token('string', stream.eat('\\'') ? context.parent : context, false);\n    };\n\n    var nextSymbol = function nextSymbol(stream, context) {\n      stream.eatWhile(/[^']/);\n      return new Token('string-2', stream.eat('\\'') ? context.parent : context, false);\n    };\n\n    var nextTemporaries = function nextTemporaries(stream, context) {\n      var token = new Token(null, context, false);\n      var aChar = stream.next();\n\n      if (aChar === '|') {\n        token.context = context.parent;\n        token.eos = true;\n      } else {\n        stream.eatWhile(/[^|]/);\n        token.name = 'variable';\n      }\n\n      return token;\n    };\n\n    return {\n      startState: function startState() {\n        return new State();\n      },\n      token: function token(stream, state) {\n        state.userIndent(stream.indentation());\n\n        if (stream.eatSpace()) {\n          return null;\n        }\n\n        var token = state.context.next(stream, state.context, state);\n        state.context = token.context;\n        state.expectVariable = token.eos;\n        return token.name;\n      },\n      blankLine: function blankLine(state) {\n        state.userIndent(0);\n      },\n      indent: function indent(state, textAfter) {\n        var i = state.context.next === next && textAfter && textAfter.charAt(0) === ']' ? -1 : state.userIndentationDelta;\n        return (state.indentation + i) * config.indentUnit;\n      },\n      electricChars: ']'\n    };\n  });\n  CodeMirror.defineMIME('text/x-stsrc', {\n    name: 'smalltalk'\n  });\n});"],"sourceRoot":""}