{"version":3,"sources":["../node_modules/codemirror/mode/mathematica/mathematica.js"],"names":["CodeMirror","defineMode","_config","_parserConfig","pFloat","pPrecision","reBaseForm","RegExp","reFloatForm","reIdInContext","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","commentLevel","tokenComment","backUp","match","end","escaped","prev","startState","token","eatSpace","blockCommentStart","blockCommentEnd","defineMIME","name","mod","__webpack_require__"],"mappings":"+EAUC,SAAAA,GACD,aAEAA,EAAAC,WAAA,uBAAAC,EAAAC,GAEA,IAEAC,EAAA,+BAEAC,EAAA,YAAAD,EAAA,MAEAE,EAAA,IAAAC,OAAA,mDAAAF,EAAA,2BACAG,EAAA,IAAAD,OAAA,MAAAH,EAAAC,EAAA,0BACAI,EAAA,IAAAF,OAAA,kFAEA,SAAAG,EAAAC,EAAAC,GACA,IAAAC,EAIA,aAFAA,EAAAF,EAAAG,SAGAF,EAAAG,SAAAC,EACAJ,EAAAG,SAAAJ,EAAAC,IAIA,MAAAC,GACAF,EAAAM,IAAA,MACAL,EAAAM,eACAN,EAAAG,SAAAI,EACAP,EAAAG,SAAAJ,EAAAC,KAKAD,EAAAS,OAAA,GAGAT,EAAAU,MAAAf,GAAA,MACA,SAKAK,EAAAU,MAAAb,GAAA,MACA,SAKAG,EAAAU,MAAA,8BACA,OAIAV,EAAAU,MAAA,+DACA,OAIAV,EAAAU,MAAA,oFACA,WAKAV,EAAAU,MAAA,yGACA,aAMAV,EAAAU,MAAA,4DACA,aAGAV,EAAAU,MAAA,oCACA,aAGAV,EAAAU,MAAA,oCACA,aAIAV,EAAAU,MAAA,wCACA,aAIAV,EAAAU,MAAA,uBAAoC,MACpC,UAKAV,EAAAU,MAAA,gDACA,aAIAV,EAAAU,MAAAZ,GAAA,MACA,UAIAE,EAAAU,MAAA,8DAA6C,MAC7C,YAIAV,EAAAG,OAEA,UAGA,SAAAE,EAAAL,EAAAC,GAKA,IAJA,IAAAE,EACAQ,GAAA,EACAC,GAAA,EAEA,OAAAT,EAAAH,EAAAG,SAAA,CACA,SAAAA,IAAAS,EAAA,CACAD,GAAA,EACA,MAGAC,MAAA,OAAAT,EAOA,OAJAQ,IAAAC,IACAX,EAAAG,SAAAL,GAGA,SAKA,SAAAS,EAAAR,EAAAC,GAGA,IAFA,IAAAY,EAAAV,EAEAF,EAAAM,aAAA,UAAAJ,EAAAH,EAAAG,SACA,MAAAU,GAAA,MAAAV,GAAAF,EAAAM,eACA,MAAAM,GAAA,MAAAV,GAAAF,EAAAM,eACAM,EAAAV,EAOA,OAJAF,EAAAM,cAAA,IACAN,EAAAG,SAAAL,GAGA,UAGA,OACAe,WAAA,WACA,OACAV,SAAAL,EACAQ,aAAA,IAGAQ,MAAA,SAAAf,EAAAC,GACA,OAAAD,EAAAgB,WAAA,KACAf,EAAAG,SAAAJ,EAAAC,IAEAgB,kBAAA,KACAC,gBAAA,QAGA7B,EAAA8B,WAAA,sBACAC,KAAA,gBA/KAC,CAAQC,EAAQ","file":"static/js/52.4c1699d0.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Mathematica mode copyright (c) 2015 by Calin Barbat\n// Based on code by Patrick Scheibe (halirutan)\n// See: https://github.com/halirutan/Mathematica-Source-Highlighting/tree/master/src/lang-mma.js\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode('mathematica', function (_config, _parserConfig) {\n    // used pattern building blocks\n    var Identifier = '[a-zA-Z\\\\$][a-zA-Z0-9\\\\$]*';\n    var pBase = \"(?:\\\\d+)\";\n    var pFloat = \"(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)\";\n    var pFloatBase = \"(?:\\\\.\\\\w+|\\\\w+\\\\.\\\\w*|\\\\w+)\";\n    var pPrecision = \"(?:`(?:`?\" + pFloat + \")?)\"; // regular expressions\n\n    var reBaseForm = new RegExp('(?:' + pBase + '(?:\\\\^\\\\^' + pFloatBase + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?))');\n    var reFloatForm = new RegExp('(?:' + pFloat + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?)');\n    var reIdInContext = new RegExp('(?:`?)(?:' + Identifier + ')(?:`(?:' + Identifier + '))*(?:`?)');\n\n    function tokenBase(stream, state) {\n      var ch; // get next character\n\n      ch = stream.next(); // string\n\n      if (ch === '\"') {\n        state.tokenize = tokenString;\n        return state.tokenize(stream, state);\n      } // comment\n\n\n      if (ch === '(') {\n        if (stream.eat('*')) {\n          state.commentLevel++;\n          state.tokenize = tokenComment;\n          return state.tokenize(stream, state);\n        }\n      } // go back one character\n\n\n      stream.backUp(1); // look for numbers\n      // Numbers in a baseform\n\n      if (stream.match(reBaseForm, true, false)) {\n        return 'number';\n      } // Mathematica numbers. Floats (1.2, .2, 1.) can have optionally a precision (`float) or an accuracy definition\n      // (``float). Note: while 1.2` is possible 1.2`` is not. At the end an exponent (float*^+12) can follow.\n\n\n      if (stream.match(reFloatForm, true, false)) {\n        return 'number';\n      }\n      /* In[23] and Out[34] */\n\n\n      if (stream.match(/(?:In|Out)\\[[0-9]*\\]/, true, false)) {\n        return 'atom';\n      } // usage\n\n\n      if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::usage)/, true, false)) {\n        return 'meta';\n      } // message\n\n\n      if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::[a-zA-Z\\$][a-zA-Z0-9\\$]*):?/, true, false)) {\n        return 'string-2';\n      } // this makes a look-ahead match for something like variable:{_Integer}\n      // the match is then forwarded to the mma-patterns tokenizer.\n\n\n      if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*\\s*:)(?:(?:[a-zA-Z\\$][a-zA-Z0-9\\$]*)|(?:[^:=>~@\\^\\&\\*\\)\\[\\]'\\?,\\|])).*/, true, false)) {\n        return 'variable-2';\n      } // catch variables which are used together with Blank (_), BlankSequence (__) or BlankNullSequence (___)\n      // Cannot start with a number, but can have numbers at any other position. Examples\n      // blub__Integer, a1_, b34_Integer32\n\n\n      if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n        return 'variable-2';\n      }\n\n      if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+/, true, false)) {\n        return 'variable-2';\n      }\n\n      if (stream.match(/_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n        return 'variable-2';\n      } // Named characters in Mathematica, like \\[Gamma].\n\n\n      if (stream.match(/\\\\\\[[a-zA-Z\\$][a-zA-Z0-9\\$]*\\]/, true, false)) {\n        return 'variable-3';\n      } // Match all braces separately\n\n\n      if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n        return 'bracket';\n      } // Catch Slots (#, ##, #3, ##9 and the V10 named slots #name). I have never seen someone using more than one digit after #, so we match\n      // only one.\n\n\n      if (stream.match(/(?:#[a-zA-Z\\$][a-zA-Z0-9\\$]*|#+[0-9]?)/, true, false)) {\n        return 'variable-2';\n      } // Literals like variables, keywords, functions\n\n\n      if (stream.match(reIdInContext, true, false)) {\n        return 'keyword';\n      } // operators. Note that operators like @@ or /; are matched separately for each symbol.\n\n\n      if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%)/, true, false)) {\n        return 'operator';\n      } // everything else is an error\n\n\n      stream.next(); // advance the stream.\n\n      return 'error';\n    }\n\n    function tokenString(stream, state) {\n      var next,\n          end = false,\n          escaped = false;\n\n      while ((next = stream.next()) != null) {\n        if (next === '\"' && !escaped) {\n          end = true;\n          break;\n        }\n\n        escaped = !escaped && next === '\\\\';\n      }\n\n      if (end && !escaped) {\n        state.tokenize = tokenBase;\n      }\n\n      return 'string';\n    }\n\n    ;\n\n    function tokenComment(stream, state) {\n      var prev, next;\n\n      while (state.commentLevel > 0 && (next = stream.next()) != null) {\n        if (prev === '(' && next === '*') state.commentLevel++;\n        if (prev === '*' && next === ')') state.commentLevel--;\n        prev = next;\n      }\n\n      if (state.commentLevel <= 0) {\n        state.tokenize = tokenBase;\n      }\n\n      return 'comment';\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          commentLevel: 0\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"(*\",\n      blockCommentEnd: \"*)\"\n    };\n  });\n  CodeMirror.defineMIME('text/x-mathematica', {\n    name: 'mathematica'\n  });\n});"],"sourceRoot":""}