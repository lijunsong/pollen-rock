{"version":3,"sources":["../node_modules/codemirror/mode/solr/solr.js"],"names":["CodeMirror","defineMode","isStringChar","isOperatorChar","isOperatorString","tokenWord","ch","stream","state","word","peek","match","next","tokenize","tokenBase","test","parseFloat","toString","isNumber","operator","quote","escaped","style","eat","startState","token","eatSpace","defineMIME","mod","__webpack_require__"],"mappings":"+EAOC,SAAAA,GACD,aAEAA,EAAAC,WAAA,kBAGA,IAAAC,EAAA,4CACAC,EAAA,uBACAC,EAAA,qBA8BA,SAAAC,EAAAC,GACA,gBAAAC,EAAAC,GAGA,IAFA,IAAAC,EAAAH,GAEAA,EAAAC,EAAAG,SAAA,MAAAJ,EAAAK,MAAAT,IACAO,GAAAF,EAAAK,OAIA,OADAJ,EAAAK,SAAAC,EACAV,EAAAW,KAAAN,GAAA,WArCA,SAAAA,GACA,OAAAO,WAAAP,GAAAQ,aAAAR,EAoC2DS,CAAAT,GAAA,SAAyC,KAAAF,EAAAG,OAAA,QAA8C,UAIlJ,SAAAI,EAAAP,EAAAC,GACA,IAvBAW,EAfAC,EAsCAd,EAAAC,EAAAK,OAEA,MADA,KAAAN,EAAAE,EAAAK,UAvCAO,EAuCAd,EAtCA,SAAAC,EAAAC,GAIA,IAHA,IACAI,EADAS,GAAA,EAGA,OAAAT,EAAAL,EAAAK,UACAA,GAAAQ,GAAAC,IACAA,MAAA,MAAAT,EAIA,OADAS,IAAAb,EAAAK,SAAAC,GACA,WA4BsDX,EAAAY,KAAAT,GAAAE,EAAAK,UAxBtDM,EAwBsDb,EAvBtD,SAAAC,EAAAC,GACA,IAAAc,EAAA,WAGA,MAFA,KAAAH,EAAAG,GAAA,YAAkD,KAAAH,EAAAG,GAAA,YAA+C,KAAAH,EAAAZ,EAAAgB,IAAA,MAA2C,KAAAJ,EAAAZ,EAAAgB,IAAA,MAA2C,KAAAJ,IAAAG,GAAA,UACvLd,EAAAK,SAAAC,EACAQ,IAmB2HpB,EAAAa,KAAAT,KAAAE,EAAAK,SAAAR,EAAAC,IAC3HE,EAAAK,UAAAC,EAAAN,EAAAK,SAAAN,EAAAC,GAAA,KAGA,OACAgB,WAAA,WACA,OACAX,SAAAC,IAGAW,MAAA,SAAAlB,EAAAC,GACA,OAAAD,EAAAmB,WAAA,KACAlB,EAAAK,SAAAN,EAAAC,OAIAR,EAAA2B,WAAA,sBAxEAC,CAAQC,EAAQ","file":"static/js/84.d9b452e0.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"solr\", function () {\n    \"use strict\";\n\n    var isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\\"\\\\]/;\n    var isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\n    var isOperatorString = /^(OR|AND|NOT|TO)$/i;\n\n    function isNumber(word) {\n      return parseFloat(word).toString() === word;\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) break;\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (!escaped) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n\n    function tokenOperator(operator) {\n      return function (stream, state) {\n        var style = \"operator\";\n        if (operator == \"+\") style += \" positive\";else if (operator == \"-\") style += \" negative\";else if (operator == \"|\") stream.eat(/\\|/);else if (operator == \"&\") stream.eat(/\\&/);else if (operator == \"^\") style += \" boost\";\n        state.tokenize = tokenBase;\n        return style;\n      };\n    }\n\n    function tokenWord(ch) {\n      return function (stream, state) {\n        var word = ch;\n\n        while ((ch = stream.peek()) && ch.match(isStringChar) != null) {\n          word += stream.next();\n        }\n\n        state.tokenize = tokenBase;\n        if (isOperatorString.test(word)) return \"operator\";else if (isNumber(word)) return \"number\";else if (stream.peek() == \":\") return \"field\";else return \"string\";\n      };\n    }\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      if (ch == '\"') state.tokenize = tokenString(ch);else if (isOperatorChar.test(ch)) state.tokenize = tokenOperator(ch);else if (isStringChar.test(ch)) state.tokenize = tokenWord(ch);\n      return state.tokenize != tokenBase ? state.tokenize(stream, state) : null;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-solr\", \"solr\");\n});"],"sourceRoot":""}