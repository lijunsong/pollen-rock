{"version":3,"sources":["../node_modules/codemirror/mode/ebnf/ebnf.js"],"names":["CodeMirror","defineMode","config","commentType","slash","parenthesis","stateType","comment","_string","characterClass","bracesMode","getMode","startState","stringType","braced","lhs","localState","stack","inDefinition","token","stream","state","length","peek","next","unshift","match","eol","shift","text","current","i","skipToEnd","indexOf","eatSpace","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/25.bc80e357.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ebnf\", function (config) {\n    var commentType = {\n      slash: 0,\n      parenthesis: 1\n    };\n    var stateType = {\n      comment: 0,\n      _string: 1,\n      characterClass: 2\n    };\n    var bracesMode = null;\n    if (config.bracesMode) bracesMode = CodeMirror.getMode(config, config.bracesMode);\n    return {\n      startState: function startState() {\n        return {\n          stringType: null,\n          commentType: null,\n          braced: 0,\n          lhs: true,\n          localState: null,\n          stack: [],\n          inDefinition: false\n        };\n      },\n      token: function token(stream, state) {\n        if (!stream) return; //check for state changes\n\n        if (state.stack.length === 0) {\n          //strings\n          if (stream.peek() == '\"' || stream.peek() == \"'\") {\n            state.stringType = stream.peek();\n            stream.next(); // Skip quote\n\n            state.stack.unshift(stateType._string);\n          } else if (stream.match(/^\\/\\*/)) {\n            //comments starting with /*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.slash;\n          } else if (stream.match(/^\\(\\*/)) {\n            //comments starting with (*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.parenthesis;\n          }\n        } //return state\n        //stack has\n\n\n        switch (state.stack[0]) {\n          case stateType._string:\n            while (state.stack[0] === stateType._string && !stream.eol()) {\n              if (stream.peek() === state.stringType) {\n                stream.next(); // Skip quote\n\n                state.stack.shift(); // Clear flag\n              } else if (stream.peek() === \"\\\\\") {\n                stream.next();\n                stream.next();\n              } else {\n                stream.match(/^.[^\\\\\\\"\\']*/);\n              }\n            }\n\n            return state.lhs ? \"property string\" : \"string\";\n          // Token style\n\n          case stateType.comment:\n            while (state.stack[0] === stateType.comment && !stream.eol()) {\n              if (state.commentType === commentType.slash && stream.match(/\\*\\//)) {\n                state.stack.shift(); // Clear flag\n\n                state.commentType = null;\n              } else if (state.commentType === commentType.parenthesis && stream.match(/\\*\\)/)) {\n                state.stack.shift(); // Clear flag\n\n                state.commentType = null;\n              } else {\n                stream.match(/^.[^\\*]*/);\n              }\n            }\n\n            return \"comment\";\n\n          case stateType.characterClass:\n            while (state.stack[0] === stateType.characterClass && !stream.eol()) {\n              if (!(stream.match(/^[^\\]\\\\]+/) || stream.match(/^\\\\./))) {\n                state.stack.shift();\n              }\n            }\n\n            return \"operator\";\n        }\n\n        var peek = stream.peek();\n\n        if (bracesMode !== null && (state.braced || peek === \"{\")) {\n          if (state.localState === null) state.localState = CodeMirror.startState(bracesMode);\n          var token = bracesMode.token(stream, state.localState),\n              text = stream.current();\n\n          if (!token) {\n            for (var i = 0; i < text.length; i++) {\n              if (text[i] === \"{\") {\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n\n                state.braced++;\n              } else if (text[i] === \"}\") {\n                state.braced--;\n\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n              }\n            }\n          }\n\n          return token;\n        } //no stack\n\n\n        switch (peek) {\n          case \"[\":\n            stream.next();\n            state.stack.unshift(stateType.characterClass);\n            return \"bracket\";\n\n          case \":\":\n          case \"|\":\n          case \";\":\n            stream.next();\n            return \"operator\";\n\n          case \"%\":\n            if (stream.match(\"%%\")) {\n              return \"header\";\n            } else if (stream.match(/[%][A-Za-z]+/)) {\n              return \"keyword\";\n            } else if (stream.match(/[%][}]/)) {\n              return \"matchingbracket\";\n            }\n\n            break;\n\n          case \"/\":\n            if (stream.match(/[\\/][A-Za-z]+/)) {\n              return \"keyword\";\n            }\n\n          case \"\\\\\":\n            if (stream.match(/[\\][a-z]+/)) {\n              return \"string-2\";\n            }\n\n          case \".\":\n            if (stream.match(\".\")) {\n              return \"atom\";\n            }\n\n          case \"*\":\n          case \"-\":\n          case \"+\":\n          case \"^\":\n            if (stream.match(peek)) {\n              return \"atom\";\n            }\n\n          case \"$\":\n            if (stream.match(\"$$\")) {\n              return \"builtin\";\n            } else if (stream.match(/[$][0-9]+/)) {\n              return \"variable-3\";\n            }\n\n          case \"<\":\n            if (stream.match(/<<[a-zA-Z_]+>>/)) {\n              return \"builtin\";\n            }\n\n        }\n\n        if (stream.match(/^\\/\\//)) {\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (stream.match(/return/)) {\n          return \"operator\";\n        } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {\n          if (stream.match(/(?=[\\(.])/)) {\n            return \"variable\";\n          } else if (stream.match(/(?=[\\s\\n]*[:=])/)) {\n            return \"def\";\n          }\n\n          return \"variable-2\";\n        } else if ([\"[\", \"]\", \"(\", \")\"].indexOf(stream.peek()) != -1) {\n          stream.next();\n          return \"bracket\";\n        } else if (!stream.eatSpace()) {\n          stream.next();\n        }\n\n        return null;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-ebnf\", \"ebnf\");\n});"],"sourceRoot":""}