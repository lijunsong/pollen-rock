{"version":3,"sources":["../node_modules/codemirror/mode/tornado/tornado.js","../node_modules/codemirror/addon/mode/overlay.js","../node_modules/codemirror/mode/xml/xml.js","../node_modules/codemirror/mode/htmlmixed/htmlmixed.js"],"names":["CodeMirror","defineMode","keywords","tokenBase","stream","state","eatWhile","close","ch","next","eat","tokenize","match","RegExp","join","startState","token","config","htmlBase","getMode","tornadoInner","overlayMode","defineMIME","mod","__webpack_require__","base","overlay","combine","basePos","baseCur","overlayPos","overlayCur","streamSeen","copyState","Math","min","start","pos","combineTokens","indent","textAfter","electricChars","innerMode","mode","blankLine","baseToken","overlayToken","htmlConfig","autoSelfClosers","area","br","col","command","embed","frame","hr","img","input","keygen","link","meta","param","source","track","wbr","menuitem","implicitlyClosed","dd","li","optgroup","option","p","rp","rt","tbody","td","tfoot","th","tr","contextGrabbers","dt","address","article","aside","blockquote","dir","div","dl","fieldset","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","menu","nav","ol","pre","section","table","ul","thead","doNotIndent","allowUnquoted","allowMissing","caseFold","xmlConfig","allowMissingTagName","editorConf","config_","type","setStyle","indentUnit","defaults","htmlMode","prop","inText","chain","parser","inBlock","doctype","depth","inTag","baseState","tagName","tagStart","test","quote","closure","eol","isInAttribute","inAttribute","stringStartCol","column","style","terminator","Context","startOfLine","this","prev","context","indented","hasOwnProperty","noIndent","popContext","maybePopContext","nextTagName","parentTagName","tagNameState","closeTagNameState","current","attrState","matchClosing","closeState","closeStateErr","_stream","attrEqState","attrValueState","attrContinuedState","isInText","baseIndent","sol","indentation","eatSpace","fullLine","Pass","length","multilineTagIndentPastTag","multilineTagIndentFactor","alignCDATA","tagAfter","exec","grabbers","electricInput","blockCommentStart","blockCommentEnd","configuration","helperType","skipAttribute","mimeModes","name","defaultTags","script","attrRegexpCache","getAttrValue","text","attr","regexp","getAttrRegexp","getTagRegexp","anchored","addTags","from","to","tag","dest","i","unshift","parserConfig","tags","configTags","configScript","scriptTypes","matches","html","htmlState","toLowerCase","modeSpec","tagInfo","tagText","spec","findMatchingMode","endTagA","endTag","localState","localMode","pat","cur","search","backUp","maybeBackup","local","line"],"mappings":"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","file":"static/js/94.107af5fc.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"), require(\"../../addon/mode/overlay\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\", \"../../addon/mode/overlay\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"tornado:inner\", function () {\n    var keywords = [\"and\", \"as\", \"assert\", \"autoescape\", \"block\", \"break\", \"class\", \"comment\", \"context\", \"continue\", \"datetime\", \"def\", \"del\", \"elif\", \"else\", \"end\", \"escape\", \"except\", \"exec\", \"extends\", \"false\", \"finally\", \"for\", \"from\", \"global\", \"if\", \"import\", \"in\", \"include\", \"is\", \"json_encode\", \"lambda\", \"length\", \"linkify\", \"load\", \"module\", \"none\", \"not\", \"or\", \"pass\", \"print\", \"put\", \"raise\", \"raw\", \"return\", \"self\", \"set\", \"squeeze\", \"super\", \"true\", \"try\", \"url_escape\", \"while\", \"with\", \"without\", \"xhtml_escape\", \"yield\"];\n    keywords = new RegExp(\"^((\" + keywords.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase(stream, state) {\n      stream.eatWhile(/[^\\{]/);\n      var ch = stream.next();\n\n      if (ch == \"{\") {\n        if (ch = stream.eat(/\\{|%|#/)) {\n          state.tokenize = inTag(ch);\n          return \"tag\";\n        }\n      }\n    }\n\n    function inTag(close) {\n      if (close == \"{\") {\n        close = \"}\";\n      }\n\n      return function (stream, state) {\n        var ch = stream.next();\n\n        if (ch == close && stream.eat(\"}\")) {\n          state.tokenize = tokenBase;\n          return \"tag\";\n        }\n\n        if (stream.match(keywords)) {\n          return \"keyword\";\n        }\n\n        return close == \"#\" ? \"comment\" : \"string\";\n      };\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase\n        };\n      },\n      token: function token(stream, state) {\n        return state.tokenize(stream, state);\n      }\n    };\n  });\n  CodeMirror.defineMode(\"tornado\", function (config) {\n    var htmlBase = CodeMirror.getMode(config, \"text/html\");\n    var tornadoInner = CodeMirror.getMode(config, \"tornado:inner\");\n    return CodeMirror.overlayMode(htmlBase, tornadoInner);\n  });\n  CodeMirror.defineMIME(\"text/x-tornado\", \"tornado\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Utility function that allows modes to be combined. The mode given\n// as the base argument takes care of most of the normal mode\n// functionality, but a second (typically simple) mode is used, which\n// can override the style of text. Both modes get to parse all of the\n// text, but when both assign a non-null style to a piece of code, the\n// overlay wins, unless the combine argument was true and not overridden,\n// or state.overlay.combineTokens was true, in which case the styles are\n// combined.\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.overlayMode = function (base, overlay, combine) {\n    return {\n      startState: function startState() {\n        return {\n          base: CodeMirror.startState(base),\n          overlay: CodeMirror.startState(overlay),\n          basePos: 0,\n          baseCur: null,\n          overlayPos: 0,\n          overlayCur: null,\n          streamSeen: null\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          base: CodeMirror.copyState(base, state.base),\n          overlay: CodeMirror.copyState(overlay, state.overlay),\n          basePos: state.basePos,\n          baseCur: null,\n          overlayPos: state.overlayPos,\n          overlayCur: null\n        };\n      },\n      token: function token(stream, state) {\n        if (stream != state.streamSeen || Math.min(state.basePos, state.overlayPos) < stream.start) {\n          state.streamSeen = stream;\n          state.basePos = state.overlayPos = stream.start;\n        }\n\n        if (stream.start == state.basePos) {\n          state.baseCur = base.token(stream, state.base);\n          state.basePos = stream.pos;\n        }\n\n        if (stream.start == state.overlayPos) {\n          stream.pos = stream.start;\n          state.overlayCur = overlay.token(stream, state.overlay);\n          state.overlayPos = stream.pos;\n        }\n\n        stream.pos = Math.min(state.basePos, state.overlayPos); // state.overlay.combineTokens always takes precedence over combine,\n        // unless set to null\n\n        if (state.overlayCur == null) return state.baseCur;else if (state.baseCur != null && state.overlay.combineTokens || combine && state.overlay.combineTokens == null) return state.baseCur + \" \" + state.overlayCur;else return state.overlayCur;\n      },\n      indent: base.indent && function (state, textAfter) {\n        return base.indent(state.base, textAfter);\n      },\n      electricChars: base.electricChars,\n      innerMode: function innerMode(state) {\n        return {\n          state: state.base,\n          mode: base\n        };\n      },\n      blankLine: function blankLine(state) {\n        var baseToken, overlayToken;\n        if (base.blankLine) baseToken = base.blankLine(state.base);\n        if (overlay.blankLine) overlayToken = overlay.blankLine(state.overlay);\n        return overlayToken == null ? baseToken : combine && baseToken != null ? baseToken + \" \" + overlayToken : overlayToken;\n      }\n    };\n  };\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var htmlConfig = {\n    autoSelfClosers: {\n      'area': true,\n      'base': true,\n      'br': true,\n      'col': true,\n      'command': true,\n      'embed': true,\n      'frame': true,\n      'hr': true,\n      'img': true,\n      'input': true,\n      'keygen': true,\n      'link': true,\n      'meta': true,\n      'param': true,\n      'source': true,\n      'track': true,\n      'wbr': true,\n      'menuitem': true\n    },\n    implicitlyClosed: {\n      'dd': true,\n      'li': true,\n      'optgroup': true,\n      'option': true,\n      'p': true,\n      'rp': true,\n      'rt': true,\n      'tbody': true,\n      'td': true,\n      'tfoot': true,\n      'th': true,\n      'tr': true\n    },\n    contextGrabbers: {\n      'dd': {\n        'dd': true,\n        'dt': true\n      },\n      'dt': {\n        'dd': true,\n        'dt': true\n      },\n      'li': {\n        'li': true\n      },\n      'option': {\n        'option': true,\n        'optgroup': true\n      },\n      'optgroup': {\n        'optgroup': true\n      },\n      'p': {\n        'address': true,\n        'article': true,\n        'aside': true,\n        'blockquote': true,\n        'dir': true,\n        'div': true,\n        'dl': true,\n        'fieldset': true,\n        'footer': true,\n        'form': true,\n        'h1': true,\n        'h2': true,\n        'h3': true,\n        'h4': true,\n        'h5': true,\n        'h6': true,\n        'header': true,\n        'hgroup': true,\n        'hr': true,\n        'menu': true,\n        'nav': true,\n        'ol': true,\n        'p': true,\n        'pre': true,\n        'section': true,\n        'table': true,\n        'ul': true\n      },\n      'rp': {\n        'rp': true,\n        'rt': true\n      },\n      'rt': {\n        'rp': true,\n        'rt': true\n      },\n      'tbody': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'td': {\n        'td': true,\n        'th': true\n      },\n      'tfoot': {\n        'tbody': true\n      },\n      'th': {\n        'td': true,\n        'th': true\n      },\n      'thead': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'tr': {\n        'tr': true\n      }\n    },\n    doNotIndent: {\n      \"pre\": true\n    },\n    allowUnquoted: true,\n    allowMissing: true,\n    caseFold: true\n  };\n  var xmlConfig = {\n    autoSelfClosers: {},\n    implicitlyClosed: {},\n    contextGrabbers: {},\n    doNotIndent: {},\n    allowUnquoted: false,\n    allowMissing: false,\n    allowMissingTagName: false,\n    caseFold: false\n  };\n  CodeMirror.defineMode(\"xml\", function (editorConf, config_) {\n    var indentUnit = editorConf.indentUnit;\n    var config = {};\n    var defaults = config_.htmlMode ? htmlConfig : xmlConfig;\n\n    for (var prop in defaults) {\n      config[prop] = defaults[prop];\n    }\n\n    for (var prop in config_) {\n      config[prop] = config_[prop];\n    } // Return variables for tokenizers\n\n\n    var type, setStyle;\n\n    function inText(stream, state) {\n      function chain(parser) {\n        state.tokenize = parser;\n        return parser(stream, state);\n      }\n\n      var ch = stream.next();\n\n      if (ch == \"<\") {\n        if (stream.eat(\"!\")) {\n          if (stream.eat(\"[\")) {\n            if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));else return null;\n          } else if (stream.match(\"--\")) {\n            return chain(inBlock(\"comment\", \"-->\"));\n          } else if (stream.match(\"DOCTYPE\", true, true)) {\n            stream.eatWhile(/[\\w\\._\\-]/);\n            return chain(doctype(1));\n          } else {\n            return null;\n          }\n        } else if (stream.eat(\"?\")) {\n          stream.eatWhile(/[\\w\\._\\-]/);\n          state.tokenize = inBlock(\"meta\", \"?>\");\n          return \"meta\";\n        } else {\n          type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n          state.tokenize = inTag;\n          return \"tag bracket\";\n        }\n      } else if (ch == \"&\") {\n        var ok;\n\n        if (stream.eat(\"#\")) {\n          if (stream.eat(\"x\")) {\n            ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n          } else {\n            ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n          }\n        } else {\n          ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n        }\n\n        return ok ? \"atom\" : \"error\";\n      } else {\n        stream.eatWhile(/[^&<]/);\n        return null;\n      }\n    }\n\n    inText.isInText = true;\n\n    function inTag(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \">\" || ch == \"/\" && stream.eat(\">\")) {\n        state.tokenize = inText;\n        type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n        return \"tag bracket\";\n      } else if (ch == \"=\") {\n        type = \"equals\";\n        return null;\n      } else if (ch == \"<\") {\n        state.tokenize = inText;\n        state.state = baseState;\n        state.tagName = state.tagStart = null;\n        var next = state.tokenize(stream, state);\n        return next ? next + \" tag error\" : \"tag error\";\n      } else if (/[\\'\\\"]/.test(ch)) {\n        state.tokenize = inAttribute(ch);\n        state.stringStartCol = stream.column();\n        return state.tokenize(stream, state);\n      } else {\n        stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\n        return \"word\";\n      }\n    }\n\n    function inAttribute(quote) {\n      var closure = function closure(stream, state) {\n        while (!stream.eol()) {\n          if (stream.next() == quote) {\n            state.tokenize = inTag;\n            break;\n          }\n        }\n\n        return \"string\";\n      };\n\n      closure.isInAttribute = true;\n      return closure;\n    }\n\n    function inBlock(style, terminator) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = inText;\n            break;\n          }\n\n          stream.next();\n        }\n\n        return style;\n      };\n    }\n\n    function doctype(depth) {\n      return function (stream, state) {\n        var ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == \"<\") {\n            state.tokenize = doctype(depth + 1);\n            return state.tokenize(stream, state);\n          } else if (ch == \">\") {\n            if (depth == 1) {\n              state.tokenize = inText;\n              break;\n            } else {\n              state.tokenize = doctype(depth - 1);\n              return state.tokenize(stream, state);\n            }\n          }\n        }\n\n        return \"meta\";\n      };\n    }\n\n    function Context(state, tagName, startOfLine) {\n      this.prev = state.context;\n      this.tagName = tagName;\n      this.indent = state.indented;\n      this.startOfLine = startOfLine;\n      if (config.doNotIndent.hasOwnProperty(tagName) || state.context && state.context.noIndent) this.noIndent = true;\n    }\n\n    function popContext(state) {\n      if (state.context) state.context = state.context.prev;\n    }\n\n    function maybePopContext(state, nextTagName) {\n      var parentTagName;\n\n      while (true) {\n        if (!state.context) {\n          return;\n        }\n\n        parentTagName = state.context.tagName;\n\n        if (!config.contextGrabbers.hasOwnProperty(parentTagName) || !config.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {\n          return;\n        }\n\n        popContext(state);\n      }\n    }\n\n    function baseState(type, stream, state) {\n      if (type == \"openTag\") {\n        state.tagStart = stream.column();\n        return tagNameState;\n      } else if (type == \"closeTag\") {\n        return closeTagNameState;\n      } else {\n        return baseState;\n      }\n    }\n\n    function tagNameState(type, stream, state) {\n      if (type == \"word\") {\n        state.tagName = stream.current();\n        setStyle = \"tag\";\n        return attrState;\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return attrState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return tagNameState;\n      }\n    }\n\n    function closeTagNameState(type, stream, state) {\n      if (type == \"word\") {\n        var tagName = stream.current();\n        if (state.context && state.context.tagName != tagName && config.implicitlyClosed.hasOwnProperty(state.context.tagName)) popContext(state);\n\n        if (state.context && state.context.tagName == tagName || config.matchClosing === false) {\n          setStyle = \"tag\";\n          return closeState;\n        } else {\n          setStyle = \"tag error\";\n          return closeStateErr;\n        }\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return closeState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return closeStateErr;\n      }\n    }\n\n    function closeState(type, _stream, state) {\n      if (type != \"endTag\") {\n        setStyle = \"error\";\n        return closeState;\n      }\n\n      popContext(state);\n      return baseState;\n    }\n\n    function closeStateErr(type, stream, state) {\n      setStyle = \"error\";\n      return closeState(type, stream, state);\n    }\n\n    function attrState(type, _stream, state) {\n      if (type == \"word\") {\n        setStyle = \"attribute\";\n        return attrEqState;\n      } else if (type == \"endTag\" || type == \"selfcloseTag\") {\n        var tagName = state.tagName,\n            tagStart = state.tagStart;\n        state.tagName = state.tagStart = null;\n\n        if (type == \"selfcloseTag\" || config.autoSelfClosers.hasOwnProperty(tagName)) {\n          maybePopContext(state, tagName);\n        } else {\n          maybePopContext(state, tagName);\n          state.context = new Context(state, tagName, tagStart == state.indented);\n        }\n\n        return baseState;\n      }\n\n      setStyle = \"error\";\n      return attrState;\n    }\n\n    function attrEqState(type, stream, state) {\n      if (type == \"equals\") return attrValueState;\n      if (!config.allowMissing) setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrValueState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n\n      if (type == \"word\" && config.allowUnquoted) {\n        setStyle = \"string\";\n        return attrState;\n      }\n\n      setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrContinuedState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n      return attrState(type, stream, state);\n    }\n\n    return {\n      startState: function startState(baseIndent) {\n        var state = {\n          tokenize: inText,\n          state: baseState,\n          indented: baseIndent || 0,\n          tagName: null,\n          tagStart: null,\n          context: null\n        };\n        if (baseIndent != null) state.baseIndent = baseIndent;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (!state.tagName && stream.sol()) state.indented = stream.indentation();\n        if (stream.eatSpace()) return null;\n        type = null;\n        var style = state.tokenize(stream, state);\n\n        if ((style || type) && style != \"comment\") {\n          setStyle = null;\n          state.state = state.state(type || style, stream, state);\n          if (setStyle) style = setStyle == \"error\" ? style + \" error\" : setStyle;\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter, fullLine) {\n        var context = state.context; // Indent multi-line strings (e.g. css).\n\n        if (state.tokenize.isInAttribute) {\n          if (state.tagStart == state.indented) return state.stringStartCol + 1;else return state.indented + indentUnit;\n        }\n\n        if (context && context.noIndent) return CodeMirror.Pass;\n        if (state.tokenize != inTag && state.tokenize != inText) return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0; // Indent the starts of attribute names.\n\n        if (state.tagName) {\n          if (config.multilineTagIndentPastTag !== false) return state.tagStart + state.tagName.length + 2;else return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n        }\n\n        if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\n        var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n\n        if (tagAfter && tagAfter[1]) {\n          // Closing tag spotted\n          while (context) {\n            if (context.tagName == tagAfter[2]) {\n              context = context.prev;\n              break;\n            } else if (config.implicitlyClosed.hasOwnProperty(context.tagName)) {\n              context = context.prev;\n            } else {\n              break;\n            }\n          }\n        } else if (tagAfter) {\n          // Opening tag spotted\n          while (context) {\n            var grabbers = config.contextGrabbers[context.tagName];\n            if (grabbers && grabbers.hasOwnProperty(tagAfter[2])) context = context.prev;else break;\n          }\n        }\n\n        while (context && context.prev && !context.startOfLine) {\n          context = context.prev;\n        }\n\n        if (context) return context.indent + indentUnit;else return state.baseIndent || 0;\n      },\n      electricInput: /<\\/[\\s\\w:]+>$/,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      configuration: config.htmlMode ? \"html\" : \"xml\",\n      helperType: config.htmlMode ? \"html\" : \"xml\",\n      skipAttribute: function skipAttribute(state) {\n        if (state.state == attrValueState) state.state = attrState;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/xml\", \"xml\");\n  CodeMirror.defineMIME(\"application/xml\", \"xml\");\n  if (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\")) CodeMirror.defineMIME(\"text/html\", {\n    name: \"xml\",\n    htmlMode: true\n  });\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../javascript/javascript\"), require(\"../css/css\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../javascript/javascript\", \"../css/css\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var defaultTags = {\n    script: [[\"lang\", /(javascript|babel)/i, \"javascript\"], [\"type\", /^(?:text|application)\\/(?:x-)?(?:java|ecma)script$|^module$|^$/i, \"javascript\"], [\"type\", /./, \"text/plain\"], [null, null, \"javascript\"]],\n    style: [[\"lang\", /^css$/i, \"css\"], [\"type\", /^(text\\/)?(x-)?(stylesheet|css)$/i, \"css\"], [\"type\", /./, \"text/plain\"], [null, null, \"css\"]]\n  };\n\n  function maybeBackup(stream, pat, style) {\n    var cur = stream.current(),\n        close = cur.search(pat);\n\n    if (close > -1) {\n      stream.backUp(cur.length - close);\n    } else if (cur.match(/<\\/?$/)) {\n      stream.backUp(cur.length);\n      if (!stream.match(pat, false)) stream.match(cur);\n    }\n\n    return style;\n  }\n\n  var attrRegexpCache = {};\n\n  function getAttrRegexp(attr) {\n    var regexp = attrRegexpCache[attr];\n    if (regexp) return regexp;\n    return attrRegexpCache[attr] = new RegExp(\"\\\\s+\" + attr + \"\\\\s*=\\\\s*('|\\\")?([^'\\\"]+)('|\\\")?\\\\s*\");\n  }\n\n  function getAttrValue(text, attr) {\n    var match = text.match(getAttrRegexp(attr));\n    return match ? /^\\s*(.*?)\\s*$/.exec(match[2])[1] : \"\";\n  }\n\n  function getTagRegexp(tagName, anchored) {\n    return new RegExp((anchored ? \"^\" : \"\") + \"<\\/\\s*\" + tagName + \"\\s*>\", \"i\");\n  }\n\n  function addTags(from, to) {\n    for (var tag in from) {\n      var dest = to[tag] || (to[tag] = []);\n      var source = from[tag];\n\n      for (var i = source.length - 1; i >= 0; i--) {\n        dest.unshift(source[i]);\n      }\n    }\n  }\n\n  function findMatchingMode(tagInfo, tagText) {\n    for (var i = 0; i < tagInfo.length; i++) {\n      var spec = tagInfo[i];\n      if (!spec[0] || spec[1].test(getAttrValue(tagText, spec[0]))) return spec[2];\n    }\n  }\n\n  CodeMirror.defineMode(\"htmlmixed\", function (config, parserConfig) {\n    var htmlMode = CodeMirror.getMode(config, {\n      name: \"xml\",\n      htmlMode: true,\n      multilineTagIndentFactor: parserConfig.multilineTagIndentFactor,\n      multilineTagIndentPastTag: parserConfig.multilineTagIndentPastTag\n    });\n    var tags = {};\n    var configTags = parserConfig && parserConfig.tags,\n        configScript = parserConfig && parserConfig.scriptTypes;\n    addTags(defaultTags, tags);\n    if (configTags) addTags(configTags, tags);\n    if (configScript) for (var i = configScript.length - 1; i >= 0; i--) {\n      tags.script.unshift([\"type\", configScript[i].matches, configScript[i].mode]);\n    }\n\n    function html(stream, state) {\n      var style = htmlMode.token(stream, state.htmlState),\n          tag = /\\btag\\b/.test(style),\n          tagName;\n\n      if (tag && !/[<>\\s\\/]/.test(stream.current()) && (tagName = state.htmlState.tagName && state.htmlState.tagName.toLowerCase()) && tags.hasOwnProperty(tagName)) {\n        state.inTag = tagName + \" \";\n      } else if (state.inTag && tag && />$/.test(stream.current())) {\n        var inTag = /^([\\S]+) (.*)/.exec(state.inTag);\n        state.inTag = null;\n        var modeSpec = stream.current() == \">\" && findMatchingMode(tags[inTag[1]], inTag[2]);\n        var mode = CodeMirror.getMode(config, modeSpec);\n        var endTagA = getTagRegexp(inTag[1], true),\n            endTag = getTagRegexp(inTag[1], false);\n\n        state.token = function (stream, state) {\n          if (stream.match(endTagA, false)) {\n            state.token = html;\n            state.localState = state.localMode = null;\n            return null;\n          }\n\n          return maybeBackup(stream, endTag, state.localMode.token(stream, state.localState));\n        };\n\n        state.localMode = mode;\n        state.localState = CodeMirror.startState(mode, htmlMode.indent(state.htmlState, \"\"));\n      } else if (state.inTag) {\n        state.inTag += stream.current();\n        if (stream.eol()) state.inTag += \" \";\n      }\n\n      return style;\n    }\n\n    ;\n    return {\n      startState: function startState() {\n        var state = CodeMirror.startState(htmlMode);\n        return {\n          token: html,\n          inTag: null,\n          localMode: null,\n          localState: null,\n          htmlState: state\n        };\n      },\n      copyState: function copyState(state) {\n        var local;\n\n        if (state.localState) {\n          local = CodeMirror.copyState(state.localMode, state.localState);\n        }\n\n        return {\n          token: state.token,\n          inTag: state.inTag,\n          localMode: state.localMode,\n          localState: local,\n          htmlState: CodeMirror.copyState(htmlMode, state.htmlState)\n        };\n      },\n      token: function token(stream, state) {\n        return state.token(stream, state);\n      },\n      indent: function indent(state, textAfter, line) {\n        if (!state.localMode || /^\\s*<\\//.test(textAfter)) return htmlMode.indent(state.htmlState, textAfter);else if (state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line);else return CodeMirror.Pass;\n      },\n      innerMode: function innerMode(state) {\n        return {\n          state: state.localState || state.htmlState,\n          mode: state.localMode || htmlMode\n        };\n      }\n    };\n  }, \"xml\", \"javascript\", \"css\");\n  CodeMirror.defineMIME(\"text/html\", \"htmlmixed\");\n});"],"sourceRoot":""}