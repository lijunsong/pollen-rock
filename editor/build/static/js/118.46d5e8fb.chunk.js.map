{"version":3,"sources":["../node_modules/codemirror/mode/php/php.js","../node_modules/codemirror/mode/xml/xml.js","../node_modules/codemirror/mode/htmlmixed/htmlmixed.js"],"names":["CodeMirror","keywords","str","obj","words","split","i","length","matchSequence","list","end","escapes","phpString","stream","state","patterns","match","tokenize","slice","closing","escaped","eol","tokStack","pop","next","phpString_","phpKeywords","phpAtoms","phpBuiltin","registerHelper","join","phpConfig","name","helperType","blockKeywords","defKeywords","atoms","builtin","multiLineStrings","hooks","$","eatWhile","<","before","quoted","eat","delim","current","push","#","/","\"","_stream","{","}","defineMode","config","parserConfig","htmlMode","getMode","phpMode","startState","html","php","startOpen","curMode","curState","pending","copyState","cur","htmlNew","phpNew","token","isPHP","sol","context","prev","indent","style","pos","m","openPHP","search","test","backUp","textAfter","blockCommentStart","blockCommentEnd","lineComment","innerMode","mode","defineMIME","mod","__webpack_require__","htmlConfig","autoSelfClosers","area","base","br","col","command","embed","frame","hr","img","input","keygen","link","meta","param","source","track","wbr","menuitem","implicitlyClosed","dd","li","optgroup","option","p","rp","rt","tbody","td","tfoot","th","tr","contextGrabbers","dt","address","article","aside","blockquote","dir","div","dl","fieldset","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","menu","nav","ol","pre","section","table","ul","thead","doNotIndent","allowUnquoted","allowMissing","caseFold","xmlConfig","allowMissingTagName","editorConf","config_","type","setStyle","indentUnit","defaults","prop","inText","chain","parser","ch","inBlock","doctype","depth","inTag","baseState","tagName","tagStart","quote","closure","isInAttribute","inAttribute","stringStartCol","column","terminator","Context","startOfLine","this","indented","hasOwnProperty","noIndent","popContext","maybePopContext","nextTagName","parentTagName","tagNameState","closeTagNameState","attrState","matchClosing","closeState","closeStateErr","attrEqState","attrValueState","attrContinuedState","isInText","baseIndent","indentation","eatSpace","fullLine","Pass","multilineTagIndentPastTag","multilineTagIndentFactor","alignCDATA","tagAfter","exec","grabbers","electricInput","configuration","skipAttribute","mimeModes","defaultTags","script","attrRegexpCache","getAttrValue","text","attr","regexp","RegExp","getAttrRegexp","getTagRegexp","anchored","addTags","from","to","tag","dest","unshift","tags","configTags","configScript","scriptTypes","matches","htmlState","toLowerCase","modeSpec","tagInfo","tagText","spec","findMatchingMode","endTagA","endTag","localState","localMode","pat","close","maybeBackup","local","line"],"mappings":"uFAOC,SAAAA,GACD,aAEA,SAAAC,EAAAC,GAIA,IAHA,IAAAC,EAAA,GACAC,EAAAF,EAAAG,MAAA,KAEAC,EAAA,EAAmBA,EAAAF,EAAAG,SAAkBD,EACrCH,EAAAC,EAAAE,KAAA,EAGA,OAAAH,EAIA,SAAAK,EAAAC,EAAAC,EAAAC,GACA,UAAAF,EAAAF,OAAAK,EAAAF,GACA,SAAAG,EAAAC,GAGA,IAFA,IAAAC,EAAAN,EAAA,GAEAH,EAAA,EAAqBA,EAAAS,EAAAR,OAAqBD,IAC1C,GAAAO,EAAAG,MAAAD,EAAAT,GAAA,IAEA,OADAQ,EAAAG,SAAAT,EAAAC,EAAAS,MAAA,GAAAR,GACAK,EAAAT,GAAA,GAKA,OADAQ,EAAAG,SAAAL,EAAAF,EAAAC,GACA,UAIA,SAAAC,EAAAO,EAAAR,GACA,gBAAAE,EAAAC,GACA,OAIA,SAAAD,EAAAC,EAAAK,EAAAR,GAEA,QAAAA,GAAAE,EAAAG,MAAA,MAA6C,IAAAH,EAAAG,MAAA,MAA4B,GAEzE,OADAF,EAAAG,SAAA,KACA,SAIA,QAAAN,GAAAE,EAAAG,MAAA,6BAYA,OAVAH,EAAAG,MAAA,UAEAF,EAAAG,SAAAT,EAAA,sHAAAW,EAAAR,IAGAE,EAAAG,MAAA,eAEAF,EAAAG,SAAAT,EAAA,uCAAAW,EAAAR,IAGA,aAKA,IAFA,IAAAS,GAAA,GAEAP,EAAAQ,QAAAD,IAAA,IAAAT,IAAAE,EAAAG,MAAA,MAA6E,KAAAH,EAAAG,MAAA,oCAA4D,MACzI,IAAAI,GAAAP,EAAAG,MAAAG,GAAA,CACAL,EAAAG,SAAA,KACAH,EAAAQ,SAAAC,MACAT,EAAAQ,SAAAC,MACA,MAGAH,EAAA,MAAAP,EAAAW,SAAAJ,EAGA,eAxCAK,CAAAZ,EAAAC,EAAAK,EAAAR,IA2CA,IAAAe,EAAA,ieACAC,EAAA,sHACAC,EAAA,ijSACA5B,EAAA6B,eAAA,mBAAAH,EAAAC,EAAAC,GAAAE,KAAA,KAAAzB,MAAA,MACAL,EAAA6B,eAAA,2BACA,IAAAE,EAAA,CACAC,KAAA,QACAC,WAAA,MACAhC,WAAAyB,GACAQ,cAAAjC,EAAA,gEACAkC,YAAAlC,EAAA,4CACAmC,MAAAnC,EAAA0B,GACAU,QAAApC,EAAA2B,GACAU,kBAAA,EACAC,MAAA,CACAC,EAAA,SAAA3B,GAEA,OADAA,EAAA4B,SAAA,WACA,cAEAC,IAAA,SAAA7B,EAAAC,GACA,IAAA6B,EAEA,GAAAA,EAAA9B,EAAAG,MAAA,UACA,IAAA4B,EAAA/B,EAAAgC,IAAA,QACAhC,EAAA4B,SAAA,UACA,IAAAK,EAAAjC,EAAAkC,UAAA7B,MAAAyB,EAAA,GAAApC,QAAAqC,EAAA,MAGA,GAFAA,GAAA/B,EAAAgC,IAAAD,GAEAE,EAGA,OAFAhC,EAAAQ,WAAAR,EAAAQ,SAAA,KAAA0B,KAAAF,EAAA,GACAhC,EAAAG,SAAAL,EAAAkC,EAAA,KAAAF,GACA,SAIA,UAEAK,IAAA,SAAApC,GACA,MAAAA,EAAAQ,QAAAR,EAAAG,MAAA,UACAH,EAAAW,OAGA,iBAEA0B,IAAA,SAAArC,GACA,GAAAA,EAAAgC,IAAA,MACA,MAAAhC,EAAAQ,QAAAR,EAAAG,MAAA,UACAH,EAAAW,OAGA,gBAGA,UAEA2B,IAAA,SAAAC,EAAAtC,GAGA,OAFAA,EAAAQ,WAAAR,EAAAQ,SAAA,KAAA0B,KAAA,OACAlC,EAAAG,SAAAL,EAAA,KACA,UAEAyC,IAAQ,SAAAD,EAAAtC,GAER,OADAA,EAAAQ,UAAAR,EAAAQ,SAAAf,QAAAO,EAAAQ,SAAAR,EAAAQ,SAAAf,OAAA,MACA,GAEA+C,IAAQ,SAAAF,EAAAtC,GAKR,OAJAA,EAAAQ,UAAAR,EAAAQ,SAAAf,OAAA,MAAAO,EAAAQ,SAAAR,EAAAQ,SAAAf,OAAA,KACAO,EAAAG,SAAAL,EAAAE,EAAAQ,SAAAR,EAAAQ,SAAAf,OAAA,MAGA,KAIAP,EAAAuD,WAAA,eAAAC,EAAAC,GACA,IAAAC,EAAA1D,EAAA2D,QAAAH,EAAAC,KAAAC,UAAA,aACAE,EAAA5D,EAAA2D,QAAAH,EAAAzB,GAiDA,OACA8B,WAAA,WACA,IAAAC,EAAA9D,EAAA6D,WAAAH,GACAK,EAAAN,EAAAO,UAAAhE,EAAA6D,WAAAD,GAAA,KACA,OACAE,OACAC,MACAE,QAAAR,EAAAO,UAAAJ,EAAAF,EACAQ,SAAAT,EAAAO,UAAAD,EAAAD,EACAK,QAAA,OAGAC,UAAA,SAAAtD,GACA,IAIAuD,EAJAP,EAAAhD,EAAAgD,KACAQ,EAAAtE,EAAAoE,UAAAV,EAAAI,GACAC,EAAAjD,EAAAiD,IACAQ,EAAAR,GAAA/D,EAAAoE,UAAAR,EAAAG,GAGA,OADAM,EAAAvD,EAAAmD,SAAAP,EAAAY,EAAqDC,EACrD,CACAT,KAAAQ,EACAP,IAAAQ,EACAN,QAAAnD,EAAAmD,QACAC,SAAAG,EACAF,QAAArD,EAAAqD,UAGAK,MA1EA,SAAA3D,EAAAC,GACA,IAAA2D,EAAA3D,EAAAmD,SAAAL,EAGA,GAFA/C,EAAA6D,OAAA5D,EAAAqD,SAAA,KAAArD,EAAAqD,SAAA,KAAArD,EAAAqD,UAAArD,EAAAqD,QAAA,MAEAM,EAiCO,OAAAA,GAAA,MAAA3D,EAAAiD,IAAA9C,UAAAJ,EAAAG,MAAA,OACPF,EAAAmD,QAAAP,EACA5C,EAAAoD,SAAApD,EAAAgD,KACAhD,EAAAiD,IAAAY,QAAAC,OAAA9D,EAAAiD,IAAA,MACA,QAEAH,EAAAY,MAAA3D,EAAAC,EAAAoD,UAtCA,GAAArD,EAAAG,MAAA,WAIA,OAHAF,EAAAmD,QAAAL,EACA9C,EAAAiD,MAAAjD,EAAAiD,IAAA/D,EAAA6D,WAAAD,EAAAF,EAAAmB,OAAA/D,EAAAgD,KAAA,MACAhD,EAAAoD,SAAApD,EAAAiD,IACA,OAGA,QAAAjD,EAAAqD,SAAA,KAAArD,EAAAqD,QAAA,CACA,MAAAtD,EAAAQ,OAAAR,EAAAW,QAAAV,EAAAqD,UAEA,IAAAW,EAAA,cACS,GAAAhE,EAAAqD,SAAAtD,EAAAkE,IAAAjE,EAAAqD,QAAAzD,IAAA,CACTG,EAAAkE,IAAAjE,EAAAqD,QAAAzD,IACA,IAAAoE,EAAAhE,EAAAqD,QAAAW,WAEA,IAAAA,EAAApB,EAAAc,MAAA3D,EAAAC,EAAAoD,UAGApD,EAAAqD,UAAArD,EAAAqD,QAAA,MACA,IAEAa,EAFAX,EAAAxD,EAAAkC,UACAkC,EAAAZ,EAAAa,OAAA,OAWA,OARA,GAAAD,IACA,UAAAH,IAAAE,EAAAX,EAAArD,MAAA,oBAAAmE,KAAAd,GAAAvD,EAAAqD,QAAAa,EAAA,GAAwGlE,EAAAqD,QAAA,CACxGzD,IAAAG,EAAAkE,IACAD,SAEAjE,EAAAuE,OAAAf,EAAA9D,OAAA0E,IAGAH,GAuCAD,OAAA,SAAA/D,EAAAuE,GACA,OAAAvE,EAAAmD,SAAAL,GAAA,UAAAuB,KAAAE,IAAAvE,EAAAmD,SAAAL,GAAA,OAAAuB,KAAAE,GAAA3B,EAAAmB,OAAA/D,EAAAgD,KAAAuB,GACAvE,EAAAmD,QAAAY,OAAA/D,EAAAoD,SAAAmB,IAEAC,kBAAA,KACAC,gBAAA,KACAC,YAAA,KACAC,UAAA,SAAA3E,GACA,OACAA,QAAAoD,SACAwB,KAAA5E,EAAAmD,YAIG,qBACHjE,EAAA2F,WAAA,iCACA3F,EAAA2F,WAAA,gCACA3D,KAAA,MACAgC,WAAA,IAEAhE,EAAA2F,WAAA,aAAA5D,GA5PA6D,CAAQC,EAAQ,GAAyBA,EAAQ,IAA2BA,EAAQ,0BCGnF,SAAA7F,GACD,aAEA,IAAA8F,EAAA,CACAC,gBAAA,CACAC,MAAA,EACAC,MAAA,EACAC,IAAA,EACAC,KAAA,EACAC,SAAA,EACAC,OAAA,EACAC,OAAA,EACAC,IAAA,EACAC,KAAA,EACAC,OAAA,EACAC,QAAA,EACAC,MAAA,EACAC,MAAA,EACAC,OAAA,EACAC,QAAA,EACAC,OAAA,EACAC,KAAA,EACAC,UAAA,GAEAC,iBAAA,CACAC,IAAA,EACAC,IAAA,EACAC,UAAA,EACAC,QAAA,EACAC,GAAA,EACAC,IAAA,EACAC,IAAA,EACAC,OAAA,EACAC,IAAA,EACAC,OAAA,EACAC,IAAA,EACAC,IAAA,GAEAC,gBAAA,CACAZ,GAAA,CACAA,IAAA,EACAa,IAAA,GAEAA,GAAA,CACAb,IAAA,EACAa,IAAA,GAEAZ,GAAA,CACAA,IAAA,GAEAE,OAAA,CACAA,QAAA,EACAD,UAAA,GAEAA,SAAA,CACAA,UAAA,GAEAE,EAAA,CACAU,SAAA,EACAC,SAAA,EACAC,OAAA,EACAC,YAAA,EACAC,KAAA,EACAC,KAAA,EACAC,IAAA,EACAC,UAAA,EACAC,QAAA,EACAC,MAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,QAAA,EACAC,QAAA,EACA3C,IAAA,EACA4C,MAAA,EACAC,KAAA,EACAC,IAAA,EACA9B,GAAA,EACA+B,KAAA,EACAC,SAAA,EACAC,OAAA,EACAC,IAAA,GAEAjC,GAAA,CACAA,IAAA,EACAC,IAAA,GAEAA,GAAA,CACAD,IAAA,EACAC,IAAA,GAEAC,MAAA,CACAA,OAAA,EACAE,OAAA,GAEAD,GAAA,CACAA,IAAA,EACAE,IAAA,GAEAD,MAAA,CACAF,OAAA,GAEAG,GAAA,CACAF,IAAA,EACAE,IAAA,GAEA6B,MAAA,CACAhC,OAAA,EACAE,OAAA,GAEAE,GAAA,CACAA,IAAA,IAGA6B,YAAA,CACAL,KAAA,GAEAM,eAAA,EACAC,cAAA,EACAC,UAAA,GAEAC,EAAA,CACAhE,gBAAA,GACAmB,iBAAA,GACAa,gBAAA,GACA4B,YAAA,GACAC,eAAA,EACAC,cAAA,EACAG,qBAAA,EACAF,UAAA,GAEA9J,EAAAuD,WAAA,eAAA0G,EAAAC,GACA,IAaAC,EAAAC,EAbAC,EAAAJ,EAAAI,WACA7G,EAAA,GACA8G,EAAAJ,EAAAxG,SAAAoC,EAAAiE,EAEA,QAAAQ,KAAAD,EACA9G,EAAA+G,GAAAD,EAAAC,GAGA,QAAAA,KAAAL,EACA1G,EAAA+G,GAAAL,EAAAK,GAMA,SAAAC,EAAA3J,EAAAC,GACA,SAAA2J,EAAAC,GAEA,OADA5J,EAAAG,SAAAyJ,EACAA,EAAA7J,EAAAC,GAGA,IAAA6J,EAAA9J,EAAAW,OAEA,WAAAmJ,EACA9J,EAAAgC,IAAA,KACAhC,EAAAgC,IAAA,KACAhC,EAAAG,MAAA,UAAAyJ,EAAAG,EAAA,eAA6E,KAClE/J,EAAAG,MAAA,MACXyJ,EAAAG,EAAA,qBACW/J,EAAAG,MAAA,kBACXH,EAAA4B,SAAA,aACAgI,EA4FA,SAAAI,EAAAC,GACA,gBAAAjK,EAAAC,GAGA,IAFA,IAAA6J,EAEA,OAAAA,EAAA9J,EAAAW,SAAA,CACA,QAAAmJ,EAEA,OADA7J,EAAAG,SAAA4J,EAAAC,EAAA,GACAhK,EAAAG,SAAAJ,EAAAC,GACW,QAAA6J,EAAA,CACX,MAAAG,EAAA,CACAhK,EAAAG,SAAAuJ,EACA,MAGA,OADA1J,EAAAG,SAAA4J,EAAAC,EAAA,GACAhK,EAAAG,SAAAJ,EAAAC,IAKA,cA/GA+J,CAAA,KAEA,KAEShK,EAAAgC,IAAA,MACThC,EAAA4B,SAAA,aACA3B,EAAAG,SAAA2J,EAAA,aACA,SAEAT,EAAAtJ,EAAAgC,IAAA,0BACA/B,EAAAG,SAAA8J,EACA,eAEO,KAAAJ,GAGP9J,EAAAgC,IAAA,KACAhC,EAAAgC,IAAA,KACAhC,EAAA4B,SAAA,eAAA5B,EAAAgC,IAAA,KAEAhC,EAAA4B,SAAA,SAAA5B,EAAAgC,IAAA,KAGAhC,EAAA4B,SAAA,cAAA5B,EAAAgC,IAAA,MAGA,gBAEAhC,EAAA4B,SAAA,SACA,MAMA,SAAAsI,EAAAlK,EAAAC,GACA,IAAA6J,EAAA9J,EAAAW,OAEA,QAAAmJ,GAAA,KAAAA,GAAA9J,EAAAgC,IAAA,KAGA,OAFA/B,EAAAG,SAAAuJ,EACAL,EAAA,KAAAQ,EAAA,wBACA,cACO,QAAAA,EAEP,OADAR,EAAA,SACA,KACO,QAAAQ,EAAA,CACP7J,EAAAG,SAAAuJ,EACA1J,QAAAkK,EACAlK,EAAAmK,QAAAnK,EAAAoK,SAAA,KACA,IAAA1J,EAAAV,EAAAG,SAAAJ,EAAAC,GACA,OAAAU,IAAA,yBACO,eAAA2D,KAAAwF,IACP7J,EAAAG,SASA,SAAAkK,GACA,IAAAC,EAAA,SAAAvK,EAAAC,GACA,MAAAD,EAAAQ,OACA,GAAAR,EAAAW,QAAA2J,EAAA,CACArK,EAAAG,SAAA8J,EACA,MAIA,gBAIA,OADAK,EAAAC,eAAA,EACAD,EAtBAE,CAAAX,GACA7J,EAAAyK,eAAA1K,EAAA2K,SACA1K,EAAAG,SAAAJ,EAAAC,KAEAD,EAAAG,MAAA,4CACA,QAoBA,SAAA4J,EAAA9F,EAAA2G,GACA,gBAAA5K,EAAAC,GACA,MAAAD,EAAAQ,OAAA,CACA,GAAAR,EAAAG,MAAAyK,GAAA,CACA3K,EAAAG,SAAAuJ,EACA,MAGA3J,EAAAW,OAGA,OAAAsD,GA2BA,SAAA4G,EAAA5K,EAAAmK,EAAAU,GACAC,KAAAhH,KAAA9D,EAAA6D,QACAiH,KAAAX,UACAW,KAAA/G,OAAA/D,EAAA+K,SACAD,KAAAD,eACAnI,EAAAmG,YAAAmC,eAAAb,IAAAnK,EAAA6D,SAAA7D,EAAA6D,QAAAoH,YAAAH,KAAAG,UAAA,GAGA,SAAAC,EAAAlL,GACAA,EAAA6D,UAAA7D,EAAA6D,QAAA7D,EAAA6D,QAAAC,MAGA,SAAAqH,EAAAnL,EAAAoL,GAGA,IAFA,IAAAC,IAEA,CACA,IAAArL,EAAA6D,QACA,OAKA,GAFAwH,EAAArL,EAAA6D,QAAAsG,SAEAzH,EAAAuE,gBAAA+D,eAAAK,KAAA3I,EAAAuE,gBAAAoE,GAAAL,eAAAI,GACA,OAGAF,EAAAlL,IAIA,SAAAkK,EAAAb,EAAAtJ,EAAAC,GACA,iBAAAqJ,GACArJ,EAAAoK,SAAArK,EAAA2K,SACAY,GACO,YAAAjC,EACPkC,EAEArB,EAIA,SAAAoB,EAAAjC,EAAAtJ,EAAAC,GACA,cAAAqJ,GACArJ,EAAAmK,QAAApK,EAAAkC,UACAqH,EAAA,MACAkC,GACO9I,EAAAwG,qBAAA,UAAAG,GACPC,EAAA,cACAkC,EAAAnC,EAAAtJ,EAAAC,KAEAsJ,EAAA,QACAgC,GAIA,SAAAC,EAAAlC,EAAAtJ,EAAAC,GACA,WAAAqJ,EAAA,CACA,IAAAc,EAAApK,EAAAkC,UAGA,OAFAjC,EAAA6D,SAAA7D,EAAA6D,QAAAsG,YAAAzH,EAAA0D,iBAAA4E,eAAAhL,EAAA6D,QAAAsG,UAAAe,EAAAlL,GAEAA,EAAA6D,SAAA7D,EAAA6D,QAAAsG,aAAA,IAAAzH,EAAA+I,cACAnC,EAAA,MACAoC,IAEApC,EAAA,YACAqC,GAEO,OAAAjJ,EAAAwG,qBAAA,UAAAG,GACPC,EAAA,cACAoC,EAAArC,EAAAtJ,EAAAC,KAEAsJ,EAAA,QACAqC,GAIA,SAAAD,EAAArC,EAAA/G,EAAAtC,GACA,gBAAAqJ,GACAC,EAAA,QACAoC,IAGAR,EAAAlL,GACAkK,GAGA,SAAAyB,EAAAtC,EAAAtJ,EAAAC,GAEA,OADAsJ,EAAA,QACAoC,EAAArC,EAAAtJ,EAAAC,GAGA,SAAAwL,EAAAnC,EAAA/G,EAAAtC,GACA,WAAAqJ,EAEA,OADAC,EAAA,YACAsC,EACO,aAAAvC,GAAA,gBAAAA,EAAA,CACP,IAAAc,EAAAnK,EAAAmK,QACAC,EAAApK,EAAAoK,SAUA,OATApK,EAAAmK,QAAAnK,EAAAoK,SAAA,KAEA,gBAAAf,GAAA3G,EAAAuC,gBAAA+F,eAAAb,GACAgB,EAAAnL,EAAAmK,IAEAgB,EAAAnL,EAAAmK,GACAnK,EAAA6D,QAAA,IAAA+G,EAAA5K,EAAAmK,EAAAC,GAAApK,EAAA+K,WAGAb,EAIA,OADAZ,EAAA,QACAkC,EAGA,SAAAI,EAAAvC,EAAAtJ,EAAAC,GACA,gBAAAqJ,EAAAwC,GACAnJ,EAAAqG,eAAAO,EAAA,SACAkC,EAAAnC,EAAAtJ,EAAAC,IAGA,SAAA6L,EAAAxC,EAAAtJ,EAAAC,GACA,gBAAAqJ,EAAAyC,EAEA,QAAAzC,GAAA3G,EAAAoG,eACAQ,EAAA,SACAkC,IAGAlC,EAAA,QACAkC,EAAAnC,EAAAtJ,EAAAC,IAGA,SAAA8L,EAAAzC,EAAAtJ,EAAAC,GACA,gBAAAqJ,EAAAyC,EACAN,EAAAnC,EAAAtJ,EAAAC,GAGA,OA3NA0J,EAAAqC,UAAA,EA2NA,CACAhJ,WAAA,SAAAiJ,GACA,IAAAhM,EAAA,CACAG,SAAAuJ,EACA1J,MAAAkK,EACAa,SAAAiB,GAAA,EACA7B,QAAA,KACAC,SAAA,KACAvG,QAAA,MAGA,OADA,MAAAmI,IAAAhM,EAAAgM,cACAhM,GAEA0D,MAAA,SAAA3D,EAAAC,GAEA,IADAA,EAAAmK,SAAApK,EAAA6D,QAAA5D,EAAA+K,SAAAhL,EAAAkM,eACAlM,EAAAmM,WAAA,YACA7C,EAAA,KACA,IAAArF,EAAAhE,EAAAG,SAAAJ,EAAAC,GAQA,OANAgE,GAAAqF,IAAA,WAAArF,IACAsF,EAAA,KACAtJ,gBAAAqJ,GAAArF,EAAAjE,EAAAC,GACAsJ,IAAAtF,EAAA,SAAAsF,EAAAtF,EAAA,SAAAsF,IAGAtF,GAEAD,OAAA,SAAA/D,EAAAuE,EAAA4H,GACA,IAAAtI,EAAA7D,EAAA6D,QAEA,GAAA7D,EAAAG,SAAAoK,cACA,OAAAvK,EAAAoK,UAAApK,EAAA+K,SAAA/K,EAAAyK,eAAA,EAAgFzK,EAAA+K,SAAAxB,EAGhF,GAAA1F,KAAAoH,SAAA,OAAA/L,EAAAkN,KACA,GAAApM,EAAAG,UAAA8J,GAAAjK,EAAAG,UAAAuJ,EAAA,OAAAyC,IAAAjM,MAAA,aAAAT,OAAA,EAEA,GAAAO,EAAAmK,QACA,WAAAzH,EAAA2J,0BAAArM,EAAAoK,SAAApK,EAAAmK,QAAA1K,OAAA,EAA2GO,EAAAoK,SAAAb,GAAA7G,EAAA4J,0BAAA,GAG3G,GAAA5J,EAAA6J,YAAA,cAAAlI,KAAAE,GAAA,SACA,IAAAiI,EAAAjI,GAAA,sBAAAkI,KAAAlI,GAEA,GAAAiI,KAAA,GAEA,KAAA3I,GAAA,CACA,GAAAA,EAAAsG,SAAAqC,EAAA,IACA3I,IAAAC,KACA,MACa,IAAApB,EAAA0D,iBAAA4E,eAAAnH,EAAAsG,SAGb,MAFAtG,IAAAC,UAKS,GAAA0I,EAET,KAAA3I,GAAA,CACA,IAAA6I,EAAAhK,EAAAuE,gBAAApD,EAAAsG,SACA,IAAAuC,MAAA1B,eAAAwB,EAAA,IAAyF,MAAzF3I,IAAAC,KAIA,KAAAD,KAAAC,OAAAD,EAAAgH,aACAhH,IAAAC,KAGA,OAAAD,IAAAE,OAAAwF,EAAwDvJ,EAAAgM,YAAA,GAExDW,cAAA,gBACAnI,kBAAA,UACAC,gBAAA,SACAmI,cAAAlK,EAAAE,SAAA,aACAzB,WAAAuB,EAAAE,SAAA,aACAiK,cAAA,SAAA7M,GACAA,SAAA6L,IAAA7L,QAAAwL,OAIAtM,EAAA2F,WAAA,kBACA3F,EAAA2F,WAAA,yBACA3F,EAAA4N,UAAA9B,eAAA,cAAA9L,EAAA2F,WAAA,aACA3D,KAAA,MACA0B,UAAA,IAzfAkC,CAAQC,EAAQ,yBCGf,SAAA7F,GACD,aAEA,IAAA6N,EAAA,CACAC,OAAA,yLACAhJ,MAAA,0HAiBAiJ,EAAA,GAQA,SAAAC,EAAAC,EAAAC,GACA,IAAAlN,EAAAiN,EAAAjN,MAPA,SAAAkN,GACA,IAAAC,EAAAJ,EAAAG,GACA,OAAAC,IACAJ,EAAAG,GAAA,IAAAE,OAAA,OAAAF,EAAA,yCAIAG,CAAAH,IACA,OAAAlN,EAAA,gBAAAuM,KAAAvM,EAAA,UAGA,SAAAsN,EAAArD,EAAAsD,GACA,WAAAH,QAAAG,EAAA,eAAAtD,EAAA,WAGA,SAAAuD,EAAAC,EAAAC,GACA,QAAAC,KAAAF,EAIA,IAHA,IAAAG,EAAAF,EAAAC,KAAAD,EAAAC,GAAA,IACA7H,EAAA2H,EAAAE,GAEArO,EAAAwG,EAAAvG,OAAA,EAAqCD,GAAA,EAAQA,IAC7CsO,EAAAC,QAAA/H,EAAAxG,IAYAN,EAAAuD,WAAA,qBAAAC,EAAAC,GACA,IAAAC,EAAA1D,EAAA2D,QAAAH,EAAA,CACAxB,KAAA,MACA0B,UAAA,EACA0J,yBAAA3J,EAAA2J,yBACAD,0BAAA1J,EAAA0J,4BAEA2B,EAAA,GACAC,EAAAtL,KAAAqL,KACAE,EAAAvL,KAAAwL,YAGA,GAFAT,EAAAX,EAAAiB,GACAC,GAAAP,EAAAO,EAAAD,GACAE,EAAA,QAAA1O,EAAA0O,EAAAzO,OAAA,EAA2DD,GAAA,EAAQA,IACnEwO,EAAAhB,OAAAe,QAAA,QAAAG,EAAA1O,GAAA4O,QAAAF,EAAA1O,GAAAoF,OAGA,SAAA5B,EAAAjD,EAAAC,GACA,IAEAmK,EAFAnG,EAAApB,EAAAc,MAAA3D,EAAAC,EAAAqO,WACAR,EAAA,UAAAxJ,KAAAL,GAGA,GAAA6J,IAAA,WAAAxJ,KAAAtE,EAAAkC,aAAAkI,EAAAnK,EAAAqO,UAAAlE,SAAAnK,EAAAqO,UAAAlE,QAAAmE,gBAAAN,EAAAhD,eAAAb,GACAnK,EAAAiK,MAAAE,EAAA,SACO,GAAAnK,EAAAiK,OAAA4D,GAAA,KAAAxJ,KAAAtE,EAAAkC,WAAA,CACP,IAAAgI,EAAA,gBAAAwC,KAAAzM,EAAAiK,OACAjK,EAAAiK,MAAA,KACA,IAAAsE,EAAA,KAAAxO,EAAAkC,WAjCA,SAAAuM,EAAAC,GACA,QAAAjP,EAAA,EAAmBA,EAAAgP,EAAA/O,OAAoBD,IAAA,CACvC,IAAAkP,EAAAF,EAAAhP,GACA,IAAAkP,EAAA,IAAAA,EAAA,GAAArK,KAAA6I,EAAAuB,EAAAC,EAAA,YAAAA,EAAA,IA8BAC,CAAAX,EAAA/D,EAAA,IAAAA,EAAA,IACArF,EAAA1F,EAAA2D,QAAAH,EAAA6L,GACAK,EAAApB,EAAAvD,EAAA,OACA4E,EAAArB,EAAAvD,EAAA,OAEAjK,EAAA0D,MAAA,SAAA3D,EAAAC,GACA,OAAAD,EAAAG,MAAA0O,GAAA,IACA5O,EAAA0D,MAAAV,EACAhD,EAAA8O,WAAA9O,EAAA+O,UAAA,KACA,MApFA,SAAAhP,EAAAiP,EAAAhL,GACA,IAAAT,EAAAxD,EAAAkC,UACAgN,EAAA1L,EAAAa,OAAA4K,GASA,OAPAC,GAAA,EACAlP,EAAAuE,OAAAf,EAAA9D,OAAAwP,GACK1L,EAAArD,MAAA,WACLH,EAAAuE,OAAAf,EAAA9D,QACAM,EAAAG,MAAA8O,GAAA,IAAAjP,EAAAG,MAAAqD,IAGAS,EA4EAkL,CAAAnP,EAAA8O,EAAA7O,EAAA+O,UAAArL,MAAA3D,EAAAC,EAAA8O,cAGA9O,EAAA+O,UAAAnK,EACA5E,EAAA8O,WAAA5P,EAAA6D,WAAA6B,EAAAhC,EAAAmB,OAAA/D,EAAAqO,UAAA,UACOrO,EAAAiK,QACPjK,EAAAiK,OAAAlK,EAAAkC,UACAlC,EAAAQ,QAAAP,EAAAiK,OAAA,MAGA,OAAAjG,EAIA,OACAjB,WAAA,WACA,IAAA/C,EAAAd,EAAA6D,WAAAH,GACA,OACAc,MAAAV,EACAiH,MAAA,KACA8E,UAAA,KACAD,WAAA,KACAT,UAAArO,IAGAsD,UAAA,SAAAtD,GACA,IAAAmP,EAMA,OAJAnP,EAAA8O,aACAK,EAAAjQ,EAAAoE,UAAAtD,EAAA+O,UAAA/O,EAAA8O,aAGA,CACApL,MAAA1D,EAAA0D,MACAuG,MAAAjK,EAAAiK,MACA8E,UAAA/O,EAAA+O,UACAD,WAAAK,EACAd,UAAAnP,EAAAoE,UAAAV,EAAA5C,EAAAqO,aAGA3K,MAAA,SAAA3D,EAAAC,GACA,OAAAA,EAAA0D,MAAA3D,EAAAC,IAEA+D,OAAA,SAAA/D,EAAAuE,EAAA6K,GACA,OAAApP,EAAA+O,WAAA,UAAA1K,KAAAE,GAAA3B,EAAAmB,OAAA/D,EAAAqO,UAAA9J,GAA8GvE,EAAA+O,UAAAhL,OAAA/D,EAAA+O,UAAAhL,OAAA/D,EAAA8O,WAAAvK,EAAA6K,GAAkGlQ,EAAAkN,MAEhNzH,UAAA,SAAA3E,GACA,OACAA,QAAA8O,YAAA9O,EAAAqO,UACAzJ,KAAA5E,EAAA+O,WAAAnM,MAIG,0BACH1D,EAAA2F,WAAA,yBAxJAC,CAAQC,EAAQ,GAAyBA,EAAQ,IAAeA,EAAQ,IAA6BA,EAAQ","file":"static/js/118.46d5e8fb.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"), require(\"../clike/clike\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\", \"../clike/clike\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function keywords(str) {\n    var obj = {},\n        words = str.split(\" \");\n\n    for (var i = 0; i < words.length; ++i) {\n      obj[words[i]] = true;\n    }\n\n    return obj;\n  } // Helper for phpString\n\n\n  function matchSequence(list, end, escapes) {\n    if (list.length == 0) return phpString(end);\n    return function (stream, state) {\n      var patterns = list[0];\n\n      for (var i = 0; i < patterns.length; i++) {\n        if (stream.match(patterns[i][0])) {\n          state.tokenize = matchSequence(list.slice(1), end);\n          return patterns[i][1];\n        }\n      }\n\n      state.tokenize = phpString(end, escapes);\n      return \"string\";\n    };\n  }\n\n  function phpString(closing, escapes) {\n    return function (stream, state) {\n      return phpString_(stream, state, closing, escapes);\n    };\n  }\n\n  function phpString_(stream, state, closing, escapes) {\n    // \"Complex\" syntax\n    if (escapes !== false && stream.match(\"${\", false) || stream.match(\"{$\", false)) {\n      state.tokenize = null;\n      return \"string\";\n    } // Simple syntax\n\n\n    if (escapes !== false && stream.match(/^\\$[a-zA-Z_][a-zA-Z0-9_]*/)) {\n      // After the variable name there may appear array or object operator.\n      if (stream.match(\"[\", false)) {\n        // Match array operator\n        state.tokenize = matchSequence([[[\"[\", null]], [[/\\d[\\w\\.]*/, \"number\"], [/\\$[a-zA-Z_][a-zA-Z0-9_]*/, \"variable-2\"], [/[\\w\\$]+/, \"variable\"]], [[\"]\", null]]], closing, escapes);\n      }\n\n      if (stream.match(/\\-\\>\\w/, false)) {\n        // Match object operator\n        state.tokenize = matchSequence([[[\"->\", null]], [[/[\\w]+/, \"variable\"]]], closing, escapes);\n      }\n\n      return \"variable-2\";\n    }\n\n    var escaped = false; // Normal string\n\n    while (!stream.eol() && (escaped || escapes === false || !stream.match(\"{$\", false) && !stream.match(/^(\\$[a-zA-Z_][a-zA-Z0-9_]*|\\$\\{)/, false))) {\n      if (!escaped && stream.match(closing)) {\n        state.tokenize = null;\n        state.tokStack.pop();\n        state.tokStack.pop();\n        break;\n      }\n\n      escaped = stream.next() == \"\\\\\" && !escaped;\n    }\n\n    return \"string\";\n  }\n\n  var phpKeywords = \"abstract and array as break case catch class clone const continue declare default \" + \"do else elseif enddeclare endfor endforeach endif endswitch endwhile extends final \" + \"for foreach function global goto if implements interface instanceof namespace \" + \"new or private protected public static switch throw trait try use var while xor \" + \"die echo empty exit eval include include_once isset list require require_once return \" + \"print unset __halt_compiler self static parent yield insteadof finally\";\n  var phpAtoms = \"true false null TRUE FALSE NULL __CLASS__ __DIR__ __FILE__ __LINE__ __METHOD__ __FUNCTION__ __NAMESPACE__ __TRAIT__\";\n  var phpBuiltin = \"func_num_args func_get_arg func_get_args strlen strcmp strncmp strcasecmp strncasecmp each error_reporting define defined trigger_error user_error set_error_handler restore_error_handler get_declared_classes get_loaded_extensions extension_loaded get_extension_funcs debug_backtrace constant bin2hex hex2bin sleep usleep time mktime gmmktime strftime gmstrftime strtotime date gmdate getdate localtime checkdate flush wordwrap htmlspecialchars htmlentities html_entity_decode md5 md5_file crc32 getimagesize image_type_to_mime_type phpinfo phpversion phpcredits strnatcmp strnatcasecmp substr_count strspn strcspn strtok strtoupper strtolower strpos strrpos strrev hebrev hebrevc nl2br basename dirname pathinfo stripslashes stripcslashes strstr stristr strrchr str_shuffle str_word_count strcoll substr substr_replace quotemeta ucfirst ucwords strtr addslashes addcslashes rtrim str_replace str_repeat count_chars chunk_split trim ltrim strip_tags similar_text explode implode setlocale localeconv parse_str str_pad chop strchr sprintf printf vprintf vsprintf sscanf fscanf parse_url urlencode urldecode rawurlencode rawurldecode readlink linkinfo link unlink exec system escapeshellcmd escapeshellarg passthru shell_exec proc_open proc_close rand srand getrandmax mt_rand mt_srand mt_getrandmax base64_decode base64_encode abs ceil floor round is_finite is_nan is_infinite bindec hexdec octdec decbin decoct dechex base_convert number_format fmod ip2long long2ip getenv putenv getopt microtime gettimeofday getrusage uniqid quoted_printable_decode set_time_limit get_cfg_var magic_quotes_runtime set_magic_quotes_runtime get_magic_quotes_gpc get_magic_quotes_runtime import_request_variables error_log serialize unserialize memory_get_usage var_dump var_export debug_zval_dump print_r highlight_file show_source highlight_string ini_get ini_get_all ini_set ini_alter ini_restore get_include_path set_include_path restore_include_path setcookie header headers_sent connection_aborted connection_status ignore_user_abort parse_ini_file is_uploaded_file move_uploaded_file intval floatval doubleval strval gettype settype is_null is_resource is_bool is_long is_float is_int is_integer is_double is_real is_numeric is_string is_array is_object is_scalar ereg ereg_replace eregi eregi_replace split spliti join sql_regcase dl pclose popen readfile rewind rmdir umask fclose feof fgetc fgets fgetss fread fopen fpassthru ftruncate fstat fseek ftell fflush fwrite fputs mkdir rename copy tempnam tmpfile file file_get_contents file_put_contents stream_select stream_context_create stream_context_set_params stream_context_set_option stream_context_get_options stream_filter_prepend stream_filter_append fgetcsv flock get_meta_tags stream_set_write_buffer set_file_buffer set_socket_blocking stream_set_blocking socket_set_blocking stream_get_meta_data stream_register_wrapper stream_wrapper_register stream_set_timeout socket_set_timeout socket_get_status realpath fnmatch fsockopen pfsockopen pack unpack get_browser crypt opendir closedir chdir getcwd rewinddir readdir dir glob fileatime filectime filegroup fileinode filemtime fileowner fileperms filesize filetype file_exists is_writable is_writeable is_readable is_executable is_file is_dir is_link stat lstat chown touch clearstatcache mail ob_start ob_flush ob_clean ob_end_flush ob_end_clean ob_get_flush ob_get_clean ob_get_length ob_get_level ob_get_status ob_get_contents ob_implicit_flush ob_list_handlers ksort krsort natsort natcasesort asort arsort sort rsort usort uasort uksort shuffle array_walk count end prev next reset current key min max in_array array_search extract compact array_fill range array_multisort array_push array_pop array_shift array_unshift array_splice array_slice array_merge array_merge_recursive array_keys array_values array_count_values array_reverse array_reduce array_pad array_flip array_change_key_case array_rand array_unique array_intersect array_intersect_assoc array_diff array_diff_assoc array_sum array_filter array_map array_chunk array_key_exists array_intersect_key array_combine array_column pos sizeof key_exists assert assert_options version_compare ftok str_rot13 aggregate session_name session_module_name session_save_path session_id session_regenerate_id session_decode session_register session_unregister session_is_registered session_encode session_start session_destroy session_unset session_set_save_handler session_cache_limiter session_cache_expire session_set_cookie_params session_get_cookie_params session_write_close preg_match preg_match_all preg_replace preg_replace_callback preg_split preg_quote preg_grep overload ctype_alnum ctype_alpha ctype_cntrl ctype_digit ctype_lower ctype_graph ctype_print ctype_punct ctype_space ctype_upper ctype_xdigit virtual apache_request_headers apache_note apache_lookup_uri apache_child_terminate apache_setenv apache_response_headers apache_get_version getallheaders mysql_connect mysql_pconnect mysql_close mysql_select_db mysql_create_db mysql_drop_db mysql_query mysql_unbuffered_query mysql_db_query mysql_list_dbs mysql_list_tables mysql_list_fields mysql_list_processes mysql_error mysql_errno mysql_affected_rows mysql_insert_id mysql_result mysql_num_rows mysql_num_fields mysql_fetch_row mysql_fetch_array mysql_fetch_assoc mysql_fetch_object mysql_data_seek mysql_fetch_lengths mysql_fetch_field mysql_field_seek mysql_free_result mysql_field_name mysql_field_table mysql_field_len mysql_field_type mysql_field_flags mysql_escape_string mysql_real_escape_string mysql_stat mysql_thread_id mysql_client_encoding mysql_get_client_info mysql_get_host_info mysql_get_proto_info mysql_get_server_info mysql_info mysql mysql_fieldname mysql_fieldtable mysql_fieldlen mysql_fieldtype mysql_fieldflags mysql_selectdb mysql_createdb mysql_dropdb mysql_freeresult mysql_numfields mysql_numrows mysql_listdbs mysql_listtables mysql_listfields mysql_db_name mysql_dbname mysql_tablename mysql_table_name pg_connect pg_pconnect pg_close pg_connection_status pg_connection_busy pg_connection_reset pg_host pg_dbname pg_port pg_tty pg_options pg_ping pg_query pg_send_query pg_cancel_query pg_fetch_result pg_fetch_row pg_fetch_assoc pg_fetch_array pg_fetch_object pg_fetch_all pg_affected_rows pg_get_result pg_result_seek pg_result_status pg_free_result pg_last_oid pg_num_rows pg_num_fields pg_field_name pg_field_num pg_field_size pg_field_type pg_field_prtlen pg_field_is_null pg_get_notify pg_get_pid pg_result_error pg_last_error pg_last_notice pg_put_line pg_end_copy pg_copy_to pg_copy_from pg_trace pg_untrace pg_lo_create pg_lo_unlink pg_lo_open pg_lo_close pg_lo_read pg_lo_write pg_lo_read_all pg_lo_import pg_lo_export pg_lo_seek pg_lo_tell pg_escape_string pg_escape_bytea pg_unescape_bytea pg_client_encoding pg_set_client_encoding pg_meta_data pg_convert pg_insert pg_update pg_delete pg_select pg_exec pg_getlastoid pg_cmdtuples pg_errormessage pg_numrows pg_numfields pg_fieldname pg_fieldsize pg_fieldtype pg_fieldnum pg_fieldprtlen pg_fieldisnull pg_freeresult pg_result pg_loreadall pg_locreate pg_lounlink pg_loopen pg_loclose pg_loread pg_lowrite pg_loimport pg_loexport http_response_code get_declared_traits getimagesizefromstring socket_import_stream stream_set_chunk_size trait_exists header_register_callback class_uses session_status session_register_shutdown echo print global static exit array empty eval isset unset die include require include_once require_once json_decode json_encode json_last_error json_last_error_msg curl_close curl_copy_handle curl_errno curl_error curl_escape curl_exec curl_file_create curl_getinfo curl_init curl_multi_add_handle curl_multi_close curl_multi_exec curl_multi_getcontent curl_multi_info_read curl_multi_init curl_multi_remove_handle curl_multi_select curl_multi_setopt curl_multi_strerror curl_pause curl_reset curl_setopt_array curl_setopt curl_share_close curl_share_init curl_share_setopt curl_strerror curl_unescape curl_version mysqli_affected_rows mysqli_autocommit mysqli_change_user mysqli_character_set_name mysqli_close mysqli_commit mysqli_connect_errno mysqli_connect_error mysqli_connect mysqli_data_seek mysqli_debug mysqli_dump_debug_info mysqli_errno mysqli_error_list mysqli_error mysqli_fetch_all mysqli_fetch_array mysqli_fetch_assoc mysqli_fetch_field_direct mysqli_fetch_field mysqli_fetch_fields mysqli_fetch_lengths mysqli_fetch_object mysqli_fetch_row mysqli_field_count mysqli_field_seek mysqli_field_tell mysqli_free_result mysqli_get_charset mysqli_get_client_info mysqli_get_client_stats mysqli_get_client_version mysqli_get_connection_stats mysqli_get_host_info mysqli_get_proto_info mysqli_get_server_info mysqli_get_server_version mysqli_info mysqli_init mysqli_insert_id mysqli_kill mysqli_more_results mysqli_multi_query mysqli_next_result mysqli_num_fields mysqli_num_rows mysqli_options mysqli_ping mysqli_prepare mysqli_query mysqli_real_connect mysqli_real_escape_string mysqli_real_query mysqli_reap_async_query mysqli_refresh mysqli_rollback mysqli_select_db mysqli_set_charset mysqli_set_local_infile_default mysqli_set_local_infile_handler mysqli_sqlstate mysqli_ssl_set mysqli_stat mysqli_stmt_init mysqli_store_result mysqli_thread_id mysqli_thread_safe mysqli_use_result mysqli_warning_count\";\n  CodeMirror.registerHelper(\"hintWords\", \"php\", [phpKeywords, phpAtoms, phpBuiltin].join(\" \").split(\" \"));\n  CodeMirror.registerHelper(\"wordChars\", \"php\", /[\\w$]/);\n  var phpConfig = {\n    name: \"clike\",\n    helperType: \"php\",\n    keywords: keywords(phpKeywords),\n    blockKeywords: keywords(\"catch do else elseif for foreach if switch try while finally\"),\n    defKeywords: keywords(\"class function interface namespace trait\"),\n    atoms: keywords(phpAtoms),\n    builtin: keywords(phpBuiltin),\n    multiLineStrings: true,\n    hooks: {\n      \"$\": function $(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"variable-2\";\n      },\n      \"<\": function _(stream, state) {\n        var before;\n\n        if (before = stream.match(/<<\\s*/)) {\n          var quoted = stream.eat(/['\"]/);\n          stream.eatWhile(/[\\w\\.]/);\n          var delim = stream.current().slice(before[0].length + (quoted ? 2 : 1));\n          if (quoted) stream.eat(quoted);\n\n          if (delim) {\n            (state.tokStack || (state.tokStack = [])).push(delim, 0);\n            state.tokenize = phpString(delim, quoted != \"'\");\n            return \"string\";\n          }\n        }\n\n        return false;\n      },\n      \"#\": function _(stream) {\n        while (!stream.eol() && !stream.match(\"?>\", false)) {\n          stream.next();\n        }\n\n        return \"comment\";\n      },\n      \"/\": function _(stream) {\n        if (stream.eat(\"/\")) {\n          while (!stream.eol() && !stream.match(\"?>\", false)) {\n            stream.next();\n          }\n\n          return \"comment\";\n        }\n\n        return false;\n      },\n      '\"': function _(_stream, state) {\n        (state.tokStack || (state.tokStack = [])).push('\"', 0);\n        state.tokenize = phpString('\"');\n        return \"string\";\n      },\n      \"{\": function _(_stream, state) {\n        if (state.tokStack && state.tokStack.length) state.tokStack[state.tokStack.length - 1]++;\n        return false;\n      },\n      \"}\": function _(_stream, state) {\n        if (state.tokStack && state.tokStack.length > 0 && ! --state.tokStack[state.tokStack.length - 1]) {\n          state.tokenize = phpString(state.tokStack[state.tokStack.length - 2]);\n        }\n\n        return false;\n      }\n    }\n  };\n  CodeMirror.defineMode(\"php\", function (config, parserConfig) {\n    var htmlMode = CodeMirror.getMode(config, parserConfig && parserConfig.htmlMode || \"text/html\");\n    var phpMode = CodeMirror.getMode(config, phpConfig);\n\n    function dispatch(stream, state) {\n      var isPHP = state.curMode == phpMode;\n      if (stream.sol() && state.pending && state.pending != '\"' && state.pending != \"'\") state.pending = null;\n\n      if (!isPHP) {\n        if (stream.match(/^<\\?\\w*/)) {\n          state.curMode = phpMode;\n          if (!state.php) state.php = CodeMirror.startState(phpMode, htmlMode.indent(state.html, \"\"));\n          state.curState = state.php;\n          return \"meta\";\n        }\n\n        if (state.pending == '\"' || state.pending == \"'\") {\n          while (!stream.eol() && stream.next() != state.pending) {}\n\n          var style = \"string\";\n        } else if (state.pending && stream.pos < state.pending.end) {\n          stream.pos = state.pending.end;\n          var style = state.pending.style;\n        } else {\n          var style = htmlMode.token(stream, state.curState);\n        }\n\n        if (state.pending) state.pending = null;\n        var cur = stream.current(),\n            openPHP = cur.search(/<\\?/),\n            m;\n\n        if (openPHP != -1) {\n          if (style == \"string\" && (m = cur.match(/[\\'\\\"]$/)) && !/\\?>/.test(cur)) state.pending = m[0];else state.pending = {\n            end: stream.pos,\n            style: style\n          };\n          stream.backUp(cur.length - openPHP);\n        }\n\n        return style;\n      } else if (isPHP && state.php.tokenize == null && stream.match(\"?>\")) {\n        state.curMode = htmlMode;\n        state.curState = state.html;\n        if (!state.php.context.prev) state.php = null;\n        return \"meta\";\n      } else {\n        return phpMode.token(stream, state.curState);\n      }\n    }\n\n    return {\n      startState: function startState() {\n        var html = CodeMirror.startState(htmlMode);\n        var php = parserConfig.startOpen ? CodeMirror.startState(phpMode) : null;\n        return {\n          html: html,\n          php: php,\n          curMode: parserConfig.startOpen ? phpMode : htmlMode,\n          curState: parserConfig.startOpen ? php : html,\n          pending: null\n        };\n      },\n      copyState: function copyState(state) {\n        var html = state.html,\n            htmlNew = CodeMirror.copyState(htmlMode, html),\n            php = state.php,\n            phpNew = php && CodeMirror.copyState(phpMode, php),\n            cur;\n        if (state.curMode == htmlMode) cur = htmlNew;else cur = phpNew;\n        return {\n          html: htmlNew,\n          php: phpNew,\n          curMode: state.curMode,\n          curState: cur,\n          pending: state.pending\n        };\n      },\n      token: dispatch,\n      indent: function indent(state, textAfter) {\n        if (state.curMode != phpMode && /^\\s*<\\//.test(textAfter) || state.curMode == phpMode && /^\\?>/.test(textAfter)) return htmlMode.indent(state.html, textAfter);\n        return state.curMode.indent(state.curState, textAfter);\n      },\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\",\n      innerMode: function innerMode(state) {\n        return {\n          state: state.curState,\n          mode: state.curMode\n        };\n      }\n    };\n  }, \"htmlmixed\", \"clike\");\n  CodeMirror.defineMIME(\"application/x-httpd-php\", \"php\");\n  CodeMirror.defineMIME(\"application/x-httpd-php-open\", {\n    name: \"php\",\n    startOpen: true\n  });\n  CodeMirror.defineMIME(\"text/x-php\", phpConfig);\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var htmlConfig = {\n    autoSelfClosers: {\n      'area': true,\n      'base': true,\n      'br': true,\n      'col': true,\n      'command': true,\n      'embed': true,\n      'frame': true,\n      'hr': true,\n      'img': true,\n      'input': true,\n      'keygen': true,\n      'link': true,\n      'meta': true,\n      'param': true,\n      'source': true,\n      'track': true,\n      'wbr': true,\n      'menuitem': true\n    },\n    implicitlyClosed: {\n      'dd': true,\n      'li': true,\n      'optgroup': true,\n      'option': true,\n      'p': true,\n      'rp': true,\n      'rt': true,\n      'tbody': true,\n      'td': true,\n      'tfoot': true,\n      'th': true,\n      'tr': true\n    },\n    contextGrabbers: {\n      'dd': {\n        'dd': true,\n        'dt': true\n      },\n      'dt': {\n        'dd': true,\n        'dt': true\n      },\n      'li': {\n        'li': true\n      },\n      'option': {\n        'option': true,\n        'optgroup': true\n      },\n      'optgroup': {\n        'optgroup': true\n      },\n      'p': {\n        'address': true,\n        'article': true,\n        'aside': true,\n        'blockquote': true,\n        'dir': true,\n        'div': true,\n        'dl': true,\n        'fieldset': true,\n        'footer': true,\n        'form': true,\n        'h1': true,\n        'h2': true,\n        'h3': true,\n        'h4': true,\n        'h5': true,\n        'h6': true,\n        'header': true,\n        'hgroup': true,\n        'hr': true,\n        'menu': true,\n        'nav': true,\n        'ol': true,\n        'p': true,\n        'pre': true,\n        'section': true,\n        'table': true,\n        'ul': true\n      },\n      'rp': {\n        'rp': true,\n        'rt': true\n      },\n      'rt': {\n        'rp': true,\n        'rt': true\n      },\n      'tbody': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'td': {\n        'td': true,\n        'th': true\n      },\n      'tfoot': {\n        'tbody': true\n      },\n      'th': {\n        'td': true,\n        'th': true\n      },\n      'thead': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'tr': {\n        'tr': true\n      }\n    },\n    doNotIndent: {\n      \"pre\": true\n    },\n    allowUnquoted: true,\n    allowMissing: true,\n    caseFold: true\n  };\n  var xmlConfig = {\n    autoSelfClosers: {},\n    implicitlyClosed: {},\n    contextGrabbers: {},\n    doNotIndent: {},\n    allowUnquoted: false,\n    allowMissing: false,\n    allowMissingTagName: false,\n    caseFold: false\n  };\n  CodeMirror.defineMode(\"xml\", function (editorConf, config_) {\n    var indentUnit = editorConf.indentUnit;\n    var config = {};\n    var defaults = config_.htmlMode ? htmlConfig : xmlConfig;\n\n    for (var prop in defaults) {\n      config[prop] = defaults[prop];\n    }\n\n    for (var prop in config_) {\n      config[prop] = config_[prop];\n    } // Return variables for tokenizers\n\n\n    var type, setStyle;\n\n    function inText(stream, state) {\n      function chain(parser) {\n        state.tokenize = parser;\n        return parser(stream, state);\n      }\n\n      var ch = stream.next();\n\n      if (ch == \"<\") {\n        if (stream.eat(\"!\")) {\n          if (stream.eat(\"[\")) {\n            if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));else return null;\n          } else if (stream.match(\"--\")) {\n            return chain(inBlock(\"comment\", \"-->\"));\n          } else if (stream.match(\"DOCTYPE\", true, true)) {\n            stream.eatWhile(/[\\w\\._\\-]/);\n            return chain(doctype(1));\n          } else {\n            return null;\n          }\n        } else if (stream.eat(\"?\")) {\n          stream.eatWhile(/[\\w\\._\\-]/);\n          state.tokenize = inBlock(\"meta\", \"?>\");\n          return \"meta\";\n        } else {\n          type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n          state.tokenize = inTag;\n          return \"tag bracket\";\n        }\n      } else if (ch == \"&\") {\n        var ok;\n\n        if (stream.eat(\"#\")) {\n          if (stream.eat(\"x\")) {\n            ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n          } else {\n            ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n          }\n        } else {\n          ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n        }\n\n        return ok ? \"atom\" : \"error\";\n      } else {\n        stream.eatWhile(/[^&<]/);\n        return null;\n      }\n    }\n\n    inText.isInText = true;\n\n    function inTag(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \">\" || ch == \"/\" && stream.eat(\">\")) {\n        state.tokenize = inText;\n        type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n        return \"tag bracket\";\n      } else if (ch == \"=\") {\n        type = \"equals\";\n        return null;\n      } else if (ch == \"<\") {\n        state.tokenize = inText;\n        state.state = baseState;\n        state.tagName = state.tagStart = null;\n        var next = state.tokenize(stream, state);\n        return next ? next + \" tag error\" : \"tag error\";\n      } else if (/[\\'\\\"]/.test(ch)) {\n        state.tokenize = inAttribute(ch);\n        state.stringStartCol = stream.column();\n        return state.tokenize(stream, state);\n      } else {\n        stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\n        return \"word\";\n      }\n    }\n\n    function inAttribute(quote) {\n      var closure = function closure(stream, state) {\n        while (!stream.eol()) {\n          if (stream.next() == quote) {\n            state.tokenize = inTag;\n            break;\n          }\n        }\n\n        return \"string\";\n      };\n\n      closure.isInAttribute = true;\n      return closure;\n    }\n\n    function inBlock(style, terminator) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = inText;\n            break;\n          }\n\n          stream.next();\n        }\n\n        return style;\n      };\n    }\n\n    function doctype(depth) {\n      return function (stream, state) {\n        var ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == \"<\") {\n            state.tokenize = doctype(depth + 1);\n            return state.tokenize(stream, state);\n          } else if (ch == \">\") {\n            if (depth == 1) {\n              state.tokenize = inText;\n              break;\n            } else {\n              state.tokenize = doctype(depth - 1);\n              return state.tokenize(stream, state);\n            }\n          }\n        }\n\n        return \"meta\";\n      };\n    }\n\n    function Context(state, tagName, startOfLine) {\n      this.prev = state.context;\n      this.tagName = tagName;\n      this.indent = state.indented;\n      this.startOfLine = startOfLine;\n      if (config.doNotIndent.hasOwnProperty(tagName) || state.context && state.context.noIndent) this.noIndent = true;\n    }\n\n    function popContext(state) {\n      if (state.context) state.context = state.context.prev;\n    }\n\n    function maybePopContext(state, nextTagName) {\n      var parentTagName;\n\n      while (true) {\n        if (!state.context) {\n          return;\n        }\n\n        parentTagName = state.context.tagName;\n\n        if (!config.contextGrabbers.hasOwnProperty(parentTagName) || !config.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {\n          return;\n        }\n\n        popContext(state);\n      }\n    }\n\n    function baseState(type, stream, state) {\n      if (type == \"openTag\") {\n        state.tagStart = stream.column();\n        return tagNameState;\n      } else if (type == \"closeTag\") {\n        return closeTagNameState;\n      } else {\n        return baseState;\n      }\n    }\n\n    function tagNameState(type, stream, state) {\n      if (type == \"word\") {\n        state.tagName = stream.current();\n        setStyle = \"tag\";\n        return attrState;\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return attrState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return tagNameState;\n      }\n    }\n\n    function closeTagNameState(type, stream, state) {\n      if (type == \"word\") {\n        var tagName = stream.current();\n        if (state.context && state.context.tagName != tagName && config.implicitlyClosed.hasOwnProperty(state.context.tagName)) popContext(state);\n\n        if (state.context && state.context.tagName == tagName || config.matchClosing === false) {\n          setStyle = \"tag\";\n          return closeState;\n        } else {\n          setStyle = \"tag error\";\n          return closeStateErr;\n        }\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return closeState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return closeStateErr;\n      }\n    }\n\n    function closeState(type, _stream, state) {\n      if (type != \"endTag\") {\n        setStyle = \"error\";\n        return closeState;\n      }\n\n      popContext(state);\n      return baseState;\n    }\n\n    function closeStateErr(type, stream, state) {\n      setStyle = \"error\";\n      return closeState(type, stream, state);\n    }\n\n    function attrState(type, _stream, state) {\n      if (type == \"word\") {\n        setStyle = \"attribute\";\n        return attrEqState;\n      } else if (type == \"endTag\" || type == \"selfcloseTag\") {\n        var tagName = state.tagName,\n            tagStart = state.tagStart;\n        state.tagName = state.tagStart = null;\n\n        if (type == \"selfcloseTag\" || config.autoSelfClosers.hasOwnProperty(tagName)) {\n          maybePopContext(state, tagName);\n        } else {\n          maybePopContext(state, tagName);\n          state.context = new Context(state, tagName, tagStart == state.indented);\n        }\n\n        return baseState;\n      }\n\n      setStyle = \"error\";\n      return attrState;\n    }\n\n    function attrEqState(type, stream, state) {\n      if (type == \"equals\") return attrValueState;\n      if (!config.allowMissing) setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrValueState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n\n      if (type == \"word\" && config.allowUnquoted) {\n        setStyle = \"string\";\n        return attrState;\n      }\n\n      setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrContinuedState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n      return attrState(type, stream, state);\n    }\n\n    return {\n      startState: function startState(baseIndent) {\n        var state = {\n          tokenize: inText,\n          state: baseState,\n          indented: baseIndent || 0,\n          tagName: null,\n          tagStart: null,\n          context: null\n        };\n        if (baseIndent != null) state.baseIndent = baseIndent;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (!state.tagName && stream.sol()) state.indented = stream.indentation();\n        if (stream.eatSpace()) return null;\n        type = null;\n        var style = state.tokenize(stream, state);\n\n        if ((style || type) && style != \"comment\") {\n          setStyle = null;\n          state.state = state.state(type || style, stream, state);\n          if (setStyle) style = setStyle == \"error\" ? style + \" error\" : setStyle;\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter, fullLine) {\n        var context = state.context; // Indent multi-line strings (e.g. css).\n\n        if (state.tokenize.isInAttribute) {\n          if (state.tagStart == state.indented) return state.stringStartCol + 1;else return state.indented + indentUnit;\n        }\n\n        if (context && context.noIndent) return CodeMirror.Pass;\n        if (state.tokenize != inTag && state.tokenize != inText) return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0; // Indent the starts of attribute names.\n\n        if (state.tagName) {\n          if (config.multilineTagIndentPastTag !== false) return state.tagStart + state.tagName.length + 2;else return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n        }\n\n        if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\n        var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n\n        if (tagAfter && tagAfter[1]) {\n          // Closing tag spotted\n          while (context) {\n            if (context.tagName == tagAfter[2]) {\n              context = context.prev;\n              break;\n            } else if (config.implicitlyClosed.hasOwnProperty(context.tagName)) {\n              context = context.prev;\n            } else {\n              break;\n            }\n          }\n        } else if (tagAfter) {\n          // Opening tag spotted\n          while (context) {\n            var grabbers = config.contextGrabbers[context.tagName];\n            if (grabbers && grabbers.hasOwnProperty(tagAfter[2])) context = context.prev;else break;\n          }\n        }\n\n        while (context && context.prev && !context.startOfLine) {\n          context = context.prev;\n        }\n\n        if (context) return context.indent + indentUnit;else return state.baseIndent || 0;\n      },\n      electricInput: /<\\/[\\s\\w:]+>$/,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      configuration: config.htmlMode ? \"html\" : \"xml\",\n      helperType: config.htmlMode ? \"html\" : \"xml\",\n      skipAttribute: function skipAttribute(state) {\n        if (state.state == attrValueState) state.state = attrState;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/xml\", \"xml\");\n  CodeMirror.defineMIME(\"application/xml\", \"xml\");\n  if (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\")) CodeMirror.defineMIME(\"text/html\", {\n    name: \"xml\",\n    htmlMode: true\n  });\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../javascript/javascript\"), require(\"../css/css\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../javascript/javascript\", \"../css/css\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var defaultTags = {\n    script: [[\"lang\", /(javascript|babel)/i, \"javascript\"], [\"type\", /^(?:text|application)\\/(?:x-)?(?:java|ecma)script$|^module$|^$/i, \"javascript\"], [\"type\", /./, \"text/plain\"], [null, null, \"javascript\"]],\n    style: [[\"lang\", /^css$/i, \"css\"], [\"type\", /^(text\\/)?(x-)?(stylesheet|css)$/i, \"css\"], [\"type\", /./, \"text/plain\"], [null, null, \"css\"]]\n  };\n\n  function maybeBackup(stream, pat, style) {\n    var cur = stream.current(),\n        close = cur.search(pat);\n\n    if (close > -1) {\n      stream.backUp(cur.length - close);\n    } else if (cur.match(/<\\/?$/)) {\n      stream.backUp(cur.length);\n      if (!stream.match(pat, false)) stream.match(cur);\n    }\n\n    return style;\n  }\n\n  var attrRegexpCache = {};\n\n  function getAttrRegexp(attr) {\n    var regexp = attrRegexpCache[attr];\n    if (regexp) return regexp;\n    return attrRegexpCache[attr] = new RegExp(\"\\\\s+\" + attr + \"\\\\s*=\\\\s*('|\\\")?([^'\\\"]+)('|\\\")?\\\\s*\");\n  }\n\n  function getAttrValue(text, attr) {\n    var match = text.match(getAttrRegexp(attr));\n    return match ? /^\\s*(.*?)\\s*$/.exec(match[2])[1] : \"\";\n  }\n\n  function getTagRegexp(tagName, anchored) {\n    return new RegExp((anchored ? \"^\" : \"\") + \"<\\/\\s*\" + tagName + \"\\s*>\", \"i\");\n  }\n\n  function addTags(from, to) {\n    for (var tag in from) {\n      var dest = to[tag] || (to[tag] = []);\n      var source = from[tag];\n\n      for (var i = source.length - 1; i >= 0; i--) {\n        dest.unshift(source[i]);\n      }\n    }\n  }\n\n  function findMatchingMode(tagInfo, tagText) {\n    for (var i = 0; i < tagInfo.length; i++) {\n      var spec = tagInfo[i];\n      if (!spec[0] || spec[1].test(getAttrValue(tagText, spec[0]))) return spec[2];\n    }\n  }\n\n  CodeMirror.defineMode(\"htmlmixed\", function (config, parserConfig) {\n    var htmlMode = CodeMirror.getMode(config, {\n      name: \"xml\",\n      htmlMode: true,\n      multilineTagIndentFactor: parserConfig.multilineTagIndentFactor,\n      multilineTagIndentPastTag: parserConfig.multilineTagIndentPastTag\n    });\n    var tags = {};\n    var configTags = parserConfig && parserConfig.tags,\n        configScript = parserConfig && parserConfig.scriptTypes;\n    addTags(defaultTags, tags);\n    if (configTags) addTags(configTags, tags);\n    if (configScript) for (var i = configScript.length - 1; i >= 0; i--) {\n      tags.script.unshift([\"type\", configScript[i].matches, configScript[i].mode]);\n    }\n\n    function html(stream, state) {\n      var style = htmlMode.token(stream, state.htmlState),\n          tag = /\\btag\\b/.test(style),\n          tagName;\n\n      if (tag && !/[<>\\s\\/]/.test(stream.current()) && (tagName = state.htmlState.tagName && state.htmlState.tagName.toLowerCase()) && tags.hasOwnProperty(tagName)) {\n        state.inTag = tagName + \" \";\n      } else if (state.inTag && tag && />$/.test(stream.current())) {\n        var inTag = /^([\\S]+) (.*)/.exec(state.inTag);\n        state.inTag = null;\n        var modeSpec = stream.current() == \">\" && findMatchingMode(tags[inTag[1]], inTag[2]);\n        var mode = CodeMirror.getMode(config, modeSpec);\n        var endTagA = getTagRegexp(inTag[1], true),\n            endTag = getTagRegexp(inTag[1], false);\n\n        state.token = function (stream, state) {\n          if (stream.match(endTagA, false)) {\n            state.token = html;\n            state.localState = state.localMode = null;\n            return null;\n          }\n\n          return maybeBackup(stream, endTag, state.localMode.token(stream, state.localState));\n        };\n\n        state.localMode = mode;\n        state.localState = CodeMirror.startState(mode, htmlMode.indent(state.htmlState, \"\"));\n      } else if (state.inTag) {\n        state.inTag += stream.current();\n        if (stream.eol()) state.inTag += \" \";\n      }\n\n      return style;\n    }\n\n    ;\n    return {\n      startState: function startState() {\n        var state = CodeMirror.startState(htmlMode);\n        return {\n          token: html,\n          inTag: null,\n          localMode: null,\n          localState: null,\n          htmlState: state\n        };\n      },\n      copyState: function copyState(state) {\n        var local;\n\n        if (state.localState) {\n          local = CodeMirror.copyState(state.localMode, state.localState);\n        }\n\n        return {\n          token: state.token,\n          inTag: state.inTag,\n          localMode: state.localMode,\n          localState: local,\n          htmlState: CodeMirror.copyState(htmlMode, state.htmlState)\n        };\n      },\n      token: function token(stream, state) {\n        return state.token(stream, state);\n      },\n      indent: function indent(state, textAfter, line) {\n        if (!state.localMode || /^\\s*<\\//.test(textAfter)) return htmlMode.indent(state.htmlState, textAfter);else if (state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line);else return CodeMirror.Pass;\n      },\n      innerMode: function innerMode(state) {\n        return {\n          state: state.localState || state.htmlState,\n          mode: state.localMode || htmlMode\n        };\n      }\n    };\n  }, \"xml\", \"javascript\", \"css\");\n  CodeMirror.defineMIME(\"text/html\", \"htmlmixed\");\n});"],"sourceRoot":""}