{"version":3,"sources":["../node_modules/codemirror/mode/toml/toml.js"],"names":["CodeMirror","defineMode","startState","inString","stringType","lhs","inArray","token","stream","state","peek","next","sol","eol","match","skipTo","skipToEnd","eatSpace","eatWhile","c","defineMIME","mod","__webpack_require__"],"mappings":"+EAOC,SAAAA,GACD,aAEAA,EAAAC,WAAA,kBACA,OACAC,WAAA,WACA,OACAC,UAAA,EACAC,WAAA,GACAC,KAAA,EACAC,QAAA,IAGAC,MAAA,SAAAC,EAAAC,GAcA,GAZAA,EAAAN,UAAA,KAAAK,EAAAE,QAAA,KAAAF,EAAAE,SACAD,EAAAL,WAAAI,EAAAE,OACAF,EAAAG,OAEAF,EAAAN,UAAA,GAGAK,EAAAI,OAAA,IAAAH,EAAAH,UACAG,EAAAJ,KAAA,GAIAI,EAAAN,SAAA,CACA,KAAAM,EAAAN,WAAAK,EAAAK,OACAL,EAAAE,SAAAD,EAAAL,YACAI,EAAAG,OAEAF,EAAAN,UAAA,GACa,OAAAK,EAAAE,QACbF,EAAAG,OACAH,EAAAG,QAEAH,EAAAM,MAAA,gBAIA,OAAAL,EAAAJ,IAAA,2BACS,OAAAI,EAAAH,SAAA,MAAAE,EAAAE,QACTF,EAAAG,OACAF,EAAAH,UACA,WACSG,EAAAJ,KAAA,MAAAG,EAAAE,QAAAF,EAAAO,OAAA,MACTP,EAAAG,OAGA,MAAAH,EAAAE,QAAAF,EAAAG,OACA,QACS,MAAAH,EAAAE,QACTF,EAAAQ,YACA,WACSR,EAAAS,WACT,KACSR,EAAAJ,KAAAG,EAAAU,SAAA,SAAAC,GACT,WAAAA,GAAA,KAAAA,IAEA,WACSV,EAAAJ,KAAA,MAAAG,EAAAE,QACTF,EAAAG,OACAF,EAAAJ,KAAA,EACA,OACSI,EAAAJ,KAAAG,EAAAM,MAAA,0BACT,OACSL,EAAAJ,MAAAG,EAAAM,MAAA,UAAAN,EAAAM,MAAA,SAEAL,EAAAJ,KAAA,MAAAG,EAAAE,QAIAD,EAAAJ,KAAAG,EAAAM,MAAA,qBACT,UACSN,EAAAS,YACTT,EAAAG,OAGA,OATAF,EAAAH,UACAE,EAAAG,OACA,WAJA,WAeAX,EAAAoB,WAAA,sBAtFAC,CAAQC,EAAQ","file":"static/js/93.10229a29.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"toml\", function () {\n    return {\n      startState: function startState() {\n        return {\n          inString: false,\n          stringType: \"\",\n          lhs: true,\n          inArray: 0\n        };\n      },\n      token: function token(stream, state) {\n        //check for state changes\n        if (!state.inString && (stream.peek() == '\"' || stream.peek() == \"'\")) {\n          state.stringType = stream.peek();\n          stream.next(); // Skip quote\n\n          state.inString = true; // Update state\n        }\n\n        if (stream.sol() && state.inArray === 0) {\n          state.lhs = true;\n        } //return state\n\n\n        if (state.inString) {\n          while (state.inString && !stream.eol()) {\n            if (stream.peek() === state.stringType) {\n              stream.next(); // Skip quote\n\n              state.inString = false; // Clear flag\n            } else if (stream.peek() === '\\\\') {\n              stream.next();\n              stream.next();\n            } else {\n              stream.match(/^.[^\\\\\\\"\\']*/);\n            }\n          }\n\n          return state.lhs ? \"property string\" : \"string\"; // Token style\n        } else if (state.inArray && stream.peek() === ']') {\n          stream.next();\n          state.inArray--;\n          return 'bracket';\n        } else if (state.lhs && stream.peek() === '[' && stream.skipTo(']')) {\n          stream.next(); //skip closing ]\n          // array of objects has an extra open & close []\n\n          if (stream.peek() === ']') stream.next();\n          return \"atom\";\n        } else if (stream.peek() === \"#\") {\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (stream.eatSpace()) {\n          return null;\n        } else if (state.lhs && stream.eatWhile(function (c) {\n          return c != '=' && c != ' ';\n        })) {\n          return \"property\";\n        } else if (state.lhs && stream.peek() === \"=\") {\n          stream.next();\n          state.lhs = false;\n          return null;\n        } else if (!state.lhs && stream.match(/^\\d\\d\\d\\d[\\d\\-\\:\\.T]*Z/)) {\n          return 'atom'; //date\n        } else if (!state.lhs && (stream.match('true') || stream.match('false'))) {\n          return 'atom';\n        } else if (!state.lhs && stream.peek() === '[') {\n          state.inArray++;\n          stream.next();\n          return 'bracket';\n        } else if (!state.lhs && stream.match(/^\\-?\\d+(?:\\.\\d+)?/)) {\n          return 'number';\n        } else if (!stream.eatSpace()) {\n          stream.next();\n        }\n\n        return null;\n      }\n    };\n  });\n  CodeMirror.defineMIME('text/x-toml', 'toml');\n});"],"sourceRoot":""}