{"version":3,"sources":["../node_modules/codemirror/mode/dockerfile/dockerfile.js","../node_modules/codemirror/addon/mode/simple.js"],"names":["CodeMirror","from","fromRegex","RegExp","shells","shellsAsArrayRegex","join","expose","exposeRegex","instructionRegex","concat","instructionOnlyLine","instructionWithArguments","defineSimpleMode","start","regex","sol","token","next","single","pop","double","array","arguments","push","meta","lineComment","defineMIME","mod","__webpack_require__","ensureState","states","name","hasOwnProperty","Error","toRegex","val","caret","flags","ignoreCase","source","String","Rule","data","this","apply","replace","result","i","length","asToken","tokenFunction","config","stream","state","pending","pend","shift","pos","text","local","end","match","tok","endToken","localState","m","mode","endScan","exec","current","index","curState","rule","matches","stack","enterLocalMode","indent","indentation","indentUnit","dedent","j","backUp","cmp","a","b","props","prop","spec","pers","persistent","p","persistentStates","getMode","lState","startState","forceEnd","indentFunction","textAfter","line","dontIndentStates","arr","indexOf","Pass","rules","scan","dedentIfLineStart","slice","defineMode","simpleMode","states_","hasIndentation","list","orig","copyState","s","innerMode"],"mappings":"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","file":"static/js/22.f47b0204.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var from = \"from\";\n  var fromRegex = new RegExp(\"^(\\\\s*)\\\\b(\" + from + \")\\\\b\", \"i\");\n  var shells = [\"run\", \"cmd\", \"entrypoint\", \"shell\"];\n  var shellsAsArrayRegex = new RegExp(\"^(\\\\s*)(\" + shells.join('|') + \")(\\\\s+\\\\[)\", \"i\");\n  var expose = \"expose\";\n  var exposeRegex = new RegExp(\"^(\\\\s*)(\" + expose + \")(\\\\s+)\", \"i\");\n  var others = [\"arg\", \"from\", \"maintainer\", \"label\", \"env\", \"add\", \"copy\", \"volume\", \"user\", \"workdir\", \"onbuild\", \"stopsignal\", \"healthcheck\", \"shell\"]; // Collect all Dockerfile directives\n\n  var instructions = [from, expose].concat(shells).concat(others),\n      instructionRegex = \"(\" + instructions.join('|') + \")\",\n      instructionOnlyLine = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s*)(#.*)?$\", \"i\"),\n      instructionWithArguments = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s+)\", \"i\");\n  CodeMirror.defineSimpleMode(\"dockerfile\", {\n    start: [// Block comment: This is a line starting with a comment\n    {\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: \"comment\"\n    }, {\n      regex: fromRegex,\n      token: [null, \"keyword\"],\n      sol: true,\n      next: \"from\"\n    }, // Highlight an instruction without any arguments (for convenience)\n    {\n      regex: instructionOnlyLine,\n      token: [null, \"keyword\", null, \"error\"],\n      sol: true\n    }, {\n      regex: shellsAsArrayRegex,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"array\"\n    }, {\n      regex: exposeRegex,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"expose\"\n    }, // Highlight an instruction followed by arguments\n    {\n      regex: instructionWithArguments,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"arguments\"\n    }, {\n      regex: /./,\n      token: null\n    }],\n    from: [{\n      regex: /\\s*$/,\n      token: null,\n      next: \"start\"\n    }, {\n      // Line comment without instruction arguments is an error\n      regex: /(\\s*)(#.*)$/,\n      token: [null, \"error\"],\n      next: \"start\"\n    }, {\n      regex: /(\\s*\\S+\\s+)(as)/i,\n      token: [null, \"keyword\"],\n      next: \"start\"\n    }, // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }],\n    single: [{\n      regex: /(?:[^\\\\']|\\\\.)/,\n      token: \"string\"\n    }, {\n      regex: /'/,\n      token: \"string\",\n      pop: true\n    }],\n    double: [{\n      regex: /(?:[^\\\\\"]|\\\\.)/,\n      token: \"string\"\n    }, {\n      regex: /\"/,\n      token: \"string\",\n      pop: true\n    }],\n    array: [{\n      regex: /\\]/,\n      token: null,\n      next: \"start\"\n    }, {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n      token: \"string\"\n    }],\n    expose: [{\n      regex: /\\d+$/,\n      token: \"number\",\n      next: \"start\"\n    }, {\n      regex: /[^\\d]+$/,\n      token: null,\n      next: \"start\"\n    }, {\n      regex: /\\d+/,\n      token: \"number\"\n    }, {\n      regex: /[^\\d]+/,\n      token: null\n    }, // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }],\n    arguments: [{\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: \"comment\"\n    }, {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?$/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /\"/,\n      token: \"string\",\n      push: \"double\"\n    }, {\n      regex: /'(?:[^\\\\']|\\\\.)*'?$/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /'/,\n      token: \"string\",\n      push: \"single\"\n    }, {\n      regex: /[^#\"']+[\\\\`]$/,\n      token: null\n    }, {\n      regex: /[^#\"']+$/,\n      token: null,\n      next: \"start\"\n    }, {\n      regex: /[^#\"']+/,\n      token: null\n    }, // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }],\n    meta: {\n      lineComment: \"#\"\n    }\n  });\n  CodeMirror.defineMIME(\"text/x-dockerfile\", \"dockerfile\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode = function (name, states) {\n    CodeMirror.defineMode(name, function (config) {\n      return CodeMirror.simpleMode(config, states);\n    });\n  };\n\n  CodeMirror.simpleMode = function (config, states) {\n    ensureState(states, \"start\");\n    var states_ = {},\n        meta = states.meta || {},\n        hasIndentation = false;\n\n    for (var state in states) {\n      if (state != meta && states.hasOwnProperty(state)) {\n        var list = states_[state] = [],\n            orig = states[state];\n\n        for (var i = 0; i < orig.length; i++) {\n          var data = orig[i];\n          list.push(new Rule(data, states));\n          if (data.indent || data.dedent) hasIndentation = true;\n        }\n      }\n    }\n\n    var mode = {\n      startState: function startState() {\n        return {\n          state: \"start\",\n          pending: null,\n          local: null,\n          localState: null,\n          indent: hasIndentation ? [] : null\n        };\n      },\n      copyState: function copyState(state) {\n        var s = {\n          state: state.state,\n          pending: state.pending,\n          local: state.local,\n          localState: null,\n          indent: state.indent && state.indent.slice(0)\n        };\n        if (state.localState) s.localState = CodeMirror.copyState(state.local.mode, state.localState);\n        if (state.stack) s.stack = state.stack.slice(0);\n\n        for (var pers = state.persistentStates; pers; pers = pers.next) {\n          s.persistentStates = {\n            mode: pers.mode,\n            spec: pers.spec,\n            state: pers.state == state.localState ? s.localState : CodeMirror.copyState(pers.mode, pers.state),\n            next: s.persistentStates\n          };\n        }\n\n        return s;\n      },\n      token: tokenFunction(states_, config),\n      innerMode: function innerMode(state) {\n        return state.local && {\n          mode: state.local.mode,\n          state: state.localState\n        };\n      },\n      indent: indentFunction(states_, meta)\n    };\n    if (meta) for (var prop in meta) {\n      if (meta.hasOwnProperty(prop)) mode[prop] = meta[prop];\n    }\n    return mode;\n  };\n\n  function ensureState(states, name) {\n    if (!states.hasOwnProperty(name)) throw new Error(\"Undefined state \" + name + \" in simple mode\");\n  }\n\n  function toRegex(val, caret) {\n    if (!val) return /(?:)/;\n    var flags = \"\";\n\n    if (val instanceof RegExp) {\n      if (val.ignoreCase) flags = \"i\";\n      val = val.source;\n    } else {\n      val = String(val);\n    }\n\n    return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n  }\n\n  function asToken(val) {\n    if (!val) return null;\n    if (val.apply) return val;\n    if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n    var result = [];\n\n    for (var i = 0; i < val.length; i++) {\n      result.push(val[i] && val[i].replace(/\\./g, \" \"));\n    }\n\n    return result;\n  }\n\n  function Rule(data, states) {\n    if (data.next || data.push) ensureState(states, data.next || data.push);\n    this.regex = toRegex(data.regex);\n    this.token = asToken(data.token);\n    this.data = data;\n  }\n\n  function tokenFunction(states, config) {\n    return function (stream, state) {\n      if (state.pending) {\n        var pend = state.pending.shift();\n        if (state.pending.length == 0) state.pending = null;\n        stream.pos += pend.text.length;\n        return pend.token;\n      }\n\n      if (state.local) {\n        if (state.local.end && stream.match(state.local.end)) {\n          var tok = state.local.endToken || null;\n          state.local = state.localState = null;\n          return tok;\n        } else {\n          var tok = state.local.mode.token(stream, state.localState),\n              m;\n          if (state.local.endScan && (m = state.local.endScan.exec(stream.current()))) stream.pos = stream.start + m.index;\n          return tok;\n        }\n      }\n\n      var curState = states[state.state];\n\n      for (var i = 0; i < curState.length; i++) {\n        var rule = curState[i];\n        var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n\n        if (matches) {\n          if (rule.data.next) {\n            state.state = rule.data.next;\n          } else if (rule.data.push) {\n            (state.stack || (state.stack = [])).push(state.state);\n            state.state = rule.data.push;\n          } else if (rule.data.pop && state.stack && state.stack.length) {\n            state.state = state.stack.pop();\n          }\n\n          if (rule.data.mode) enterLocalMode(config, state, rule.data.mode, rule.token);\n          if (rule.data.indent) state.indent.push(stream.indentation() + config.indentUnit);\n          if (rule.data.dedent) state.indent.pop();\n          var token = rule.token;\n          if (token && token.apply) token = token(matches);\n\n          if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n            state.pending = [];\n\n            for (var j = 2; j < matches.length; j++) {\n              if (matches[j]) state.pending.push({\n                text: matches[j],\n                token: rule.token[j - 1]\n              });\n            }\n\n            stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n            return token[0];\n          } else if (token && token.join) {\n            return token[0];\n          } else {\n            return token;\n          }\n        }\n      }\n\n      stream.next();\n      return null;\n    };\n  }\n\n  function cmp(a, b) {\n    if (a === b) return true;\n    if (!a || typeof a != \"object\" || !b || typeof b != \"object\") return false;\n    var props = 0;\n\n    for (var prop in a) {\n      if (a.hasOwnProperty(prop)) {\n        if (!b.hasOwnProperty(prop) || !cmp(a[prop], b[prop])) return false;\n        props++;\n      }\n    }\n\n    for (var prop in b) {\n      if (b.hasOwnProperty(prop)) props--;\n    }\n\n    return props == 0;\n  }\n\n  function enterLocalMode(config, state, spec, token) {\n    var pers;\n    if (spec.persistent) for (var p = state.persistentStates; p && !pers; p = p.next) {\n      if (spec.spec ? cmp(spec.spec, p.spec) : spec.mode == p.mode) pers = p;\n    }\n    var mode = pers ? pers.mode : spec.mode || CodeMirror.getMode(config, spec.spec);\n    var lState = pers ? pers.state : CodeMirror.startState(mode);\n    if (spec.persistent && !pers) state.persistentStates = {\n      mode: mode,\n      spec: spec.spec,\n      state: lState,\n      next: state.persistentStates\n    };\n    state.localState = lState;\n    state.local = {\n      mode: mode,\n      end: spec.end && toRegex(spec.end),\n      endScan: spec.end && spec.forceEnd !== false && toRegex(spec.end, false),\n      endToken: token && token.join ? token[token.length - 1] : token\n    };\n  }\n\n  function indexOf(val, arr) {\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] === val) return true;\n    }\n  }\n\n  function indentFunction(states, meta) {\n    return function (state, textAfter, line) {\n      if (state.local && state.local.mode.indent) return state.local.mode.indent(state.localState, textAfter, line);\n      if (state.indent == null || state.local || meta.dontIndentStates && indexOf(state.state, meta.dontIndentStates) > -1) return CodeMirror.Pass;\n      var pos = state.indent.length - 1,\n          rules = states[state.state];\n\n      scan: for (;;) {\n        for (var i = 0; i < rules.length; i++) {\n          var rule = rules[i];\n\n          if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n            var m = rule.regex.exec(textAfter);\n\n            if (m && m[0]) {\n              pos--;\n              if (rule.next || rule.push) rules = states[rule.next || rule.push];\n              textAfter = textAfter.slice(m[0].length);\n              continue scan;\n            }\n          }\n        }\n\n        break;\n      }\n\n      return pos < 0 ? 0 : state.indent[pos];\n    };\n  }\n});"],"sourceRoot":""}