{"version":3,"sources":["../node_modules/codemirror/mode/vbscript/vbscript.js"],"names":["CodeMirror","defineMode","conf","parserConf","ERRORCLASS","wordRegexp","words","RegExp","join","singleOperators","doubleOperators","singleDelimiters","brakets","identifiers","wordOperators","builtinObjsWords","knownWords","concat","isASP","keywords","atoms","builtinFuncs","builtinObjs","known","stringPrefixes","opening","middle","closing","doubleClosing","doOpening","noIndentWords","comment","indent","_stream","state","currentIndent","dedent","tokenBase","stream","eatSpace","ch","peek","skipToEnd","match","floatLiteral","eat","intLiteral","tokenize","delimiter","singleline","length","eol","eatWhile","singleLineStringErrors","tokenStringFactory","current","doInCurrentLine","next","external","electricChars","startState","lastToken","nextLineIndent","ignoreKeyword","token","sol","style","substr","indexOf","tokenLexer","content","textAfter","trueText","replace","indentUnit","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/101.93afc827.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\nFor extra ASP classic objects, initialize CodeMirror instance with this option:\n    isASP: true\n\nE.G.:\n    var editor = CodeMirror.fromTextArea(document.getElementById(\"code\"), {\n        lineNumbers: true,\n        isASP: true\n      });\n*/\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"vbscript\", function (conf, parserConf) {\n    var ERRORCLASS = 'error';\n\n    function wordRegexp(words) {\n      return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n    }\n\n    var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&\\\\\\\\\\\\^<>=]\");\n    var doubleOperators = new RegExp(\"^((<>)|(<=)|(>=))\");\n    var singleDelimiters = new RegExp('^[\\\\.,]');\n    var brakets = new RegExp('^[\\\\(\\\\)]');\n    var identifiers = new RegExp(\"^[A-Za-z][_A-Za-z0-9]*\");\n    var openingKeywords = ['class', 'sub', 'select', 'while', 'if', 'function', 'property', 'with', 'for'];\n    var middleKeywords = ['else', 'elseif', 'case'];\n    var endKeywords = ['next', 'loop', 'wend'];\n    var wordOperators = wordRegexp(['and', 'or', 'not', 'xor', 'is', 'mod', 'eqv', 'imp']);\n    var commonkeywords = ['dim', 'redim', 'then', 'until', 'randomize', 'byval', 'byref', 'new', 'property', 'exit', 'in', 'const', 'private', 'public', 'get', 'set', 'let', 'stop', 'on error resume next', 'on error goto 0', 'option explicit', 'call', 'me']; //This list was from: http://msdn.microsoft.com/en-us/library/f8tbc79x(v=vs.84).aspx\n\n    var atomWords = ['true', 'false', 'nothing', 'empty', 'null']; //This list was from: http://msdn.microsoft.com/en-us/library/3ca8tfek(v=vs.84).aspx\n\n    var builtinFuncsWords = ['abs', 'array', 'asc', 'atn', 'cbool', 'cbyte', 'ccur', 'cdate', 'cdbl', 'chr', 'cint', 'clng', 'cos', 'csng', 'cstr', 'date', 'dateadd', 'datediff', 'datepart', 'dateserial', 'datevalue', 'day', 'escape', 'eval', 'execute', 'exp', 'filter', 'formatcurrency', 'formatdatetime', 'formatnumber', 'formatpercent', 'getlocale', 'getobject', 'getref', 'hex', 'hour', 'inputbox', 'instr', 'instrrev', 'int', 'fix', 'isarray', 'isdate', 'isempty', 'isnull', 'isnumeric', 'isobject', 'join', 'lbound', 'lcase', 'left', 'len', 'loadpicture', 'log', 'ltrim', 'rtrim', 'trim', 'maths', 'mid', 'minute', 'month', 'monthname', 'msgbox', 'now', 'oct', 'replace', 'rgb', 'right', 'rnd', 'round', 'scriptengine', 'scriptenginebuildversion', 'scriptenginemajorversion', 'scriptengineminorversion', 'second', 'setlocale', 'sgn', 'sin', 'space', 'split', 'sqr', 'strcomp', 'string', 'strreverse', 'tan', 'time', 'timer', 'timeserial', 'timevalue', 'typename', 'ubound', 'ucase', 'unescape', 'vartype', 'weekday', 'weekdayname', 'year']; //This list was from: http://msdn.microsoft.com/en-us/library/ydz4cfk3(v=vs.84).aspx\n\n    var builtinConsts = ['vbBlack', 'vbRed', 'vbGreen', 'vbYellow', 'vbBlue', 'vbMagenta', 'vbCyan', 'vbWhite', 'vbBinaryCompare', 'vbTextCompare', 'vbSunday', 'vbMonday', 'vbTuesday', 'vbWednesday', 'vbThursday', 'vbFriday', 'vbSaturday', 'vbUseSystemDayOfWeek', 'vbFirstJan1', 'vbFirstFourDays', 'vbFirstFullWeek', 'vbGeneralDate', 'vbLongDate', 'vbShortDate', 'vbLongTime', 'vbShortTime', 'vbObjectError', 'vbOKOnly', 'vbOKCancel', 'vbAbortRetryIgnore', 'vbYesNoCancel', 'vbYesNo', 'vbRetryCancel', 'vbCritical', 'vbQuestion', 'vbExclamation', 'vbInformation', 'vbDefaultButton1', 'vbDefaultButton2', 'vbDefaultButton3', 'vbDefaultButton4', 'vbApplicationModal', 'vbSystemModal', 'vbOK', 'vbCancel', 'vbAbort', 'vbRetry', 'vbIgnore', 'vbYes', 'vbNo', 'vbCr', 'VbCrLf', 'vbFormFeed', 'vbLf', 'vbNewLine', 'vbNullChar', 'vbNullString', 'vbTab', 'vbVerticalTab', 'vbUseDefault', 'vbTrue', 'vbFalse', 'vbEmpty', 'vbNull', 'vbInteger', 'vbLong', 'vbSingle', 'vbDouble', 'vbCurrency', 'vbDate', 'vbString', 'vbObject', 'vbError', 'vbBoolean', 'vbVariant', 'vbDataObject', 'vbDecimal', 'vbByte', 'vbArray']; //This list was from: http://msdn.microsoft.com/en-us/library/hkc375ea(v=vs.84).aspx\n\n    var builtinObjsWords = ['WScript', 'err', 'debug', 'RegExp'];\n    var knownProperties = ['description', 'firstindex', 'global', 'helpcontext', 'helpfile', 'ignorecase', 'length', 'number', 'pattern', 'source', 'value', 'count'];\n    var knownMethods = ['clear', 'execute', 'raise', 'replace', 'test', 'write', 'writeline', 'close', 'open', 'state', 'eof', 'update', 'addnew', 'end', 'createobject', 'quit'];\n    var aspBuiltinObjsWords = ['server', 'response', 'request', 'session', 'application'];\n    var aspKnownProperties = ['buffer', 'cachecontrol', 'charset', 'contenttype', 'expires', 'expiresabsolute', 'isclientconnected', 'pics', 'status', //response\n    'clientcertificate', 'cookies', 'form', 'querystring', 'servervariables', 'totalbytes', //request\n    'contents', 'staticobjects', //application\n    'codepage', 'lcid', 'sessionid', 'timeout', //session\n    'scripttimeout']; //server\n\n    var aspKnownMethods = ['addheader', 'appendtolog', 'binarywrite', 'end', 'flush', 'redirect', //response\n    'binaryread', //request\n    'remove', 'removeall', 'lock', 'unlock', //application\n    'abandon', //session\n    'getlasterror', 'htmlencode', 'mappath', 'transfer', 'urlencode']; //server\n\n    var knownWords = knownMethods.concat(knownProperties);\n    builtinObjsWords = builtinObjsWords.concat(builtinConsts);\n\n    if (conf.isASP) {\n      builtinObjsWords = builtinObjsWords.concat(aspBuiltinObjsWords);\n      knownWords = knownWords.concat(aspKnownMethods, aspKnownProperties);\n    }\n\n    ;\n    var keywords = wordRegexp(commonkeywords);\n    var atoms = wordRegexp(atomWords);\n    var builtinFuncs = wordRegexp(builtinFuncsWords);\n    var builtinObjs = wordRegexp(builtinObjsWords);\n    var known = wordRegexp(knownWords);\n    var stringPrefixes = '\"';\n    var opening = wordRegexp(openingKeywords);\n    var middle = wordRegexp(middleKeywords);\n    var closing = wordRegexp(endKeywords);\n    var doubleClosing = wordRegexp(['end']);\n    var doOpening = wordRegexp(['do']);\n    var noIndentWords = wordRegexp(['on error resume next', 'exit']);\n    var comment = wordRegexp(['rem']);\n\n    function indent(_stream, state) {\n      state.currentIndent++;\n    }\n\n    function dedent(_stream, state) {\n      state.currentIndent--;\n    } // tokenizers\n\n\n    function tokenBase(stream, state) {\n      if (stream.eatSpace()) {\n        return 'space'; //return null;\n      }\n\n      var ch = stream.peek(); // Handle Comments\n\n      if (ch === \"'\") {\n        stream.skipToEnd();\n        return 'comment';\n      }\n\n      if (stream.match(comment)) {\n        stream.skipToEnd();\n        return 'comment';\n      } // Handle Number Literals\n\n\n      if (stream.match(/^((&H)|(&O))?[0-9\\.]/i, false) && !stream.match(/^((&H)|(&O))?[0-9\\.]+[a-z_]/i, false)) {\n        var floatLiteral = false; // Floats\n\n        if (stream.match(/^\\d*\\.\\d+/i)) {\n          floatLiteral = true;\n        } else if (stream.match(/^\\d+\\.\\d*/)) {\n          floatLiteral = true;\n        } else if (stream.match(/^\\.\\d+/)) {\n          floatLiteral = true;\n        }\n\n        if (floatLiteral) {\n          // Float literals may be \"imaginary\"\n          stream.eat(/J/i);\n          return 'number';\n        } // Integers\n\n\n        var intLiteral = false; // Hex\n\n        if (stream.match(/^&H[0-9a-f]+/i)) {\n          intLiteral = true;\n        } // Octal\n        else if (stream.match(/^&O[0-7]+/i)) {\n            intLiteral = true;\n          } // Decimal\n          else if (stream.match(/^[1-9]\\d*F?/)) {\n              // Decimal literals may be \"imaginary\"\n              stream.eat(/J/i); // TODO - Can you have imaginary longs?\n\n              intLiteral = true;\n            } // Zero by itself with no other piece of number.\n            else if (stream.match(/^0(?![\\dx])/i)) {\n                intLiteral = true;\n              }\n\n        if (intLiteral) {\n          // Integer literals may be \"long\"\n          stream.eat(/L/i);\n          return 'number';\n        }\n      } // Handle Strings\n\n\n      if (stream.match(stringPrefixes)) {\n        state.tokenize = tokenStringFactory(stream.current());\n        return state.tokenize(stream, state);\n      } // Handle operators and Delimiters\n\n\n      if (stream.match(doubleOperators) || stream.match(singleOperators) || stream.match(wordOperators)) {\n        return 'operator';\n      }\n\n      if (stream.match(singleDelimiters)) {\n        return null;\n      }\n\n      if (stream.match(brakets)) {\n        return \"bracket\";\n      }\n\n      if (stream.match(noIndentWords)) {\n        state.doInCurrentLine = true;\n        return 'keyword';\n      }\n\n      if (stream.match(doOpening)) {\n        indent(stream, state);\n        state.doInCurrentLine = true;\n        return 'keyword';\n      }\n\n      if (stream.match(opening)) {\n        if (!state.doInCurrentLine) indent(stream, state);else state.doInCurrentLine = false;\n        return 'keyword';\n      }\n\n      if (stream.match(middle)) {\n        return 'keyword';\n      }\n\n      if (stream.match(doubleClosing)) {\n        dedent(stream, state);\n        dedent(stream, state);\n        return 'keyword';\n      }\n\n      if (stream.match(closing)) {\n        if (!state.doInCurrentLine) dedent(stream, state);else state.doInCurrentLine = false;\n        return 'keyword';\n      }\n\n      if (stream.match(keywords)) {\n        return 'keyword';\n      }\n\n      if (stream.match(atoms)) {\n        return 'atom';\n      }\n\n      if (stream.match(known)) {\n        return 'variable-2';\n      }\n\n      if (stream.match(builtinFuncs)) {\n        return 'builtin';\n      }\n\n      if (stream.match(builtinObjs)) {\n        return 'variable-2';\n      }\n\n      if (stream.match(identifiers)) {\n        return 'variable';\n      } // Handle non-detected items\n\n\n      stream.next();\n      return ERRORCLASS;\n    }\n\n    function tokenStringFactory(delimiter) {\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = 'string';\n      return function (stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"]/);\n\n          if (stream.match(delimiter)) {\n            state.tokenize = tokenBase;\n            return OUTCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n\n        if (singleline) {\n          if (parserConf.singleLineStringErrors) {\n            return ERRORCLASS;\n          } else {\n            state.tokenize = tokenBase;\n          }\n        }\n\n        return OUTCLASS;\n      };\n    }\n\n    function tokenLexer(stream, state) {\n      var style = state.tokenize(stream, state);\n      var current = stream.current(); // Handle '.' connected identifiers\n\n      if (current === '.') {\n        style = state.tokenize(stream, state);\n        current = stream.current();\n\n        if (style && (style.substr(0, 8) === 'variable' || style === 'builtin' || style === 'keyword')) {\n          //|| knownWords.indexOf(current.substring(1)) > -1) {\n          if (style === 'builtin' || style === 'keyword') style = 'variable';\n          if (knownWords.indexOf(current.substr(1)) > -1) style = 'variable-2';\n          return style;\n        } else {\n          return ERRORCLASS;\n        }\n      }\n\n      return style;\n    }\n\n    var external = {\n      electricChars: \"dDpPtTfFeE \",\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          lastToken: null,\n          currentIndent: 0,\n          nextLineIndent: 0,\n          doInCurrentLine: false,\n          ignoreKeyword: false\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          state.currentIndent += state.nextLineIndent;\n          state.nextLineIndent = 0;\n          state.doInCurrentLine = 0;\n        }\n\n        var style = tokenLexer(stream, state);\n        state.lastToken = {\n          style: style,\n          content: stream.current()\n        };\n        if (style === 'space') style = null;\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        var trueText = textAfter.replace(/^\\s+|\\s+$/g, '');\n        if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return conf.indentUnit * (state.currentIndent - 1);\n        if (state.currentIndent < 0) return 0;\n        return state.currentIndent * conf.indentUnit;\n      }\n    };\n    return external;\n  });\n  CodeMirror.defineMIME(\"text/vbscript\", \"vbscript\");\n});"],"sourceRoot":""}