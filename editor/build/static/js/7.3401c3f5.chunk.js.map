{"version":3,"sources":["../node_modules/codemirror/mode/apl/apl.js"],"names":["CodeMirror","defineMode","builtInOps",".","\\","/","⌿","⍀","¨","⍣","builtInFuncs","+","−","×","÷","⌈","⌊","∣","⍳","?","⋆","⍟","○","!","⌹","<","≤","=",">","≥","≠","≡","≢","∈","⍷","∪","∩","∼","∨","∧","⍱","⍲","⍴",",","⍪","⌽","⊖","⍉","↑","↓","⊂","⊃","⌷","⍋","⍒","⊤","⊥","⍕","⍎","⊣","⊢","isOperator","isNiladic","isFunction","isArrow","isComment","startState","prev","func","op","string","escape","token","stream","state","ch","funcName","eatSpace","next","eatWhile","type","c","stringEater","test","skipToEnd","peek","defineMIME","mod","__webpack_require__"],"mappings":"8EAOC,SAAAA,GACD,aAEAA,EAAAC,WAAA,iBACA,IAAAC,EAAA,CACAC,IAAA,eACAC,KAAA,OACAC,IAAA,SACAC,SAAA,cACAC,SAAA,YACAC,OAAA,OACAC,SAAA,SAEAC,EAAA,CACAC,IAAA,oBACAC,SAAA,sBACAC,OAAA,sBACAC,OAAA,wBACAC,SAAA,wBACAC,SAAA,qBACAC,SAAA,uBACAC,SAAA,4BACAC,IAAA,gBACAC,SAAA,gCACAC,SAAA,8BACAC,SAAA,4BACAC,IAAA,yBACAC,SAAA,iCACAC,IAAA,kBACAC,SAAA,yBACAC,IAAA,gBACAC,IAAA,qBACAC,SAAA,4BACAC,SAAA,kBACAC,SAAA,kBACAC,SAAA,kBACAC,SAAA,wBACAC,SAAA,cACAC,SAAA,mBACAC,SAAA,sBACAC,SAAA,kBACAC,SAAA,YACAC,SAAA,aACAC,SAAA,aACAC,SAAA,cACAC,SAAA,sBACAC,IAAA,qBACAC,SAAA,2BACAC,SAAA,qBACAC,SAAA,+BACAC,SAAA,mBACAC,SAAA,iBACAC,SAAA,cACAC,SAAA,gCACAC,SAAA,mBACAC,SAAA,eACAC,SAAA,iBACAC,SAAA,mBACAC,SAAA,gBACAC,SAAA,gBACAC,SAAA,6BACAC,SAAA,iBACAC,SAAA,gBACAC,SAAA,kBAEAC,EAAA,+BACAC,EAAA,SACAC,EAAA,4QACAC,EAAA,SACAC,EAAA,eAgBA,OACAC,WAAA,WACA,OACAC,MAAA,EACAC,MAAA,EACAC,IAAA,EACAC,QAAA,EACAC,QAAA,IAGAC,MAAA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAEA,OAAAH,EAAAI,WACA,KAKA,OAFAF,EAAAF,EAAAK,SAEA,MAAAH,GACAF,EAAAM,SAlCA,SAAAC,GACA,IAAAb,EAEA,OADAA,GAAA,EACA,SAAAc,GAGA,OAFAd,EAAAc,EAEAA,IAAAD,GACA,OAAAb,GA2BAe,CAAAP,IACAF,EAAAK,OACAJ,EAAAP,MAAA,EACA,UAGA,UAAiBgB,KAAAR,IACjBD,EAAAP,MAAA,EACA,MAGA,UAAiBgB,KAAAR,IACjBD,EAAAP,MAAA,EACA,MAGAL,EAAAqB,KAAAR,IACAD,EAAAP,MAAA,EACA,WAGA,WAAAgB,KAAAR,IACAD,EAAAN,MACAM,EAAAN,MAAA,EACAM,EAAAP,MAAA,GAEAO,EAAAP,MAAA,EAGAM,EAAAM,SAAA,UACA,UAGAlB,EAAAsB,KAAAR,GACA,gBAAAzE,EAAAyE,GAGAX,EAAAmB,KAAAR,GACA,YAGAZ,EAAAoB,KAAAR,IACAC,EAAA,OAEA,MAAAlE,EAAAiE,KACAD,EAAAP,KACAS,GAAAlE,EAAAiE,GAAA,GAEAC,GAAAlE,EAAAiE,GAAA,IAIAD,EAAAN,MAAA,EACAM,EAAAP,MAAA,EACA,YAAAS,GAGAX,EAAAkB,KAAAR,IACAF,EAAAW,YACA,WAGA,WAAAT,GAAA,MAAAF,EAAAY,QACAZ,EAAAK,OACA,qBAGAL,EAAAM,SAAA,WACAL,EAAAP,MAAA,EACA,eAIAnE,EAAAsF,WAAA,kBArLAC,CAAQC,EAAQ","file":"static/js/7.3401c3f5.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"apl\", function () {\n    var builtInOps = {\n      \".\": \"innerProduct\",\n      \"\\\\\": \"scan\",\n      \"/\": \"reduce\",\n      \"⌿\": \"reduce1Axis\",\n      \"⍀\": \"scan1Axis\",\n      \"¨\": \"each\",\n      \"⍣\": \"power\"\n    };\n    var builtInFuncs = {\n      \"+\": [\"conjugate\", \"add\"],\n      \"−\": [\"negate\", \"subtract\"],\n      \"×\": [\"signOf\", \"multiply\"],\n      \"÷\": [\"reciprocal\", \"divide\"],\n      \"⌈\": [\"ceiling\", \"greaterOf\"],\n      \"⌊\": [\"floor\", \"lesserOf\"],\n      \"∣\": [\"absolute\", \"residue\"],\n      \"⍳\": [\"indexGenerate\", \"indexOf\"],\n      \"?\": [\"roll\", \"deal\"],\n      \"⋆\": [\"exponentiate\", \"toThePowerOf\"],\n      \"⍟\": [\"naturalLog\", \"logToTheBase\"],\n      \"○\": [\"piTimes\", \"circularFuncs\"],\n      \"!\": [\"factorial\", \"binomial\"],\n      \"⌹\": [\"matrixInverse\", \"matrixDivide\"],\n      \"<\": [null, \"lessThan\"],\n      \"≤\": [null, \"lessThanOrEqual\"],\n      \"=\": [null, \"equals\"],\n      \">\": [null, \"greaterThan\"],\n      \"≥\": [null, \"greaterThanOrEqual\"],\n      \"≠\": [null, \"notEqual\"],\n      \"≡\": [\"depth\", \"match\"],\n      \"≢\": [null, \"notMatch\"],\n      \"∈\": [\"enlist\", \"membership\"],\n      \"⍷\": [null, \"find\"],\n      \"∪\": [\"unique\", \"union\"],\n      \"∩\": [null, \"intersection\"],\n      \"∼\": [\"not\", \"without\"],\n      \"∨\": [null, \"or\"],\n      \"∧\": [null, \"and\"],\n      \"⍱\": [null, \"nor\"],\n      \"⍲\": [null, \"nand\"],\n      \"⍴\": [\"shapeOf\", \"reshape\"],\n      \",\": [\"ravel\", \"catenate\"],\n      \"⍪\": [null, \"firstAxisCatenate\"],\n      \"⌽\": [\"reverse\", \"rotate\"],\n      \"⊖\": [\"axis1Reverse\", \"axis1Rotate\"],\n      \"⍉\": [\"transpose\", null],\n      \"↑\": [\"first\", \"take\"],\n      \"↓\": [null, \"drop\"],\n      \"⊂\": [\"enclose\", \"partitionWithAxis\"],\n      \"⊃\": [\"diclose\", \"pick\"],\n      \"⌷\": [null, \"index\"],\n      \"⍋\": [\"gradeUp\", null],\n      \"⍒\": [\"gradeDown\", null],\n      \"⊤\": [\"encode\", null],\n      \"⊥\": [\"decode\", null],\n      \"⍕\": [\"format\", \"formatByExample\"],\n      \"⍎\": [\"execute\", null],\n      \"⊣\": [\"stop\", \"left\"],\n      \"⊢\": [\"pass\", \"right\"]\n    };\n    var isOperator = /[\\.\\/⌿⍀¨⍣]/;\n    var isNiladic = /⍬/;\n    var isFunction = /[\\+−×÷⌈⌊∣⍳\\?⋆⍟○!⌹<≤=>≥≠≡≢∈⍷∪∩∼∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⌷⍋⍒⊤⊥⍕⍎⊣⊢]/;\n    var isArrow = /←/;\n    var isComment = /[⍝#].*$/;\n\n    var stringEater = function stringEater(type) {\n      var prev;\n      prev = false;\n      return function (c) {\n        prev = c;\n\n        if (c === type) {\n          return prev === \"\\\\\";\n        }\n\n        return true;\n      };\n    };\n\n    return {\n      startState: function startState() {\n        return {\n          prev: false,\n          func: false,\n          op: false,\n          string: false,\n          escape: false\n        };\n      },\n      token: function token(stream, state) {\n        var ch, funcName;\n\n        if (stream.eatSpace()) {\n          return null;\n        }\n\n        ch = stream.next();\n\n        if (ch === '\"' || ch === \"'\") {\n          stream.eatWhile(stringEater(ch));\n          stream.next();\n          state.prev = true;\n          return \"string\";\n        }\n\n        if (/[\\[{\\(]/.test(ch)) {\n          state.prev = false;\n          return null;\n        }\n\n        if (/[\\]}\\)]/.test(ch)) {\n          state.prev = true;\n          return null;\n        }\n\n        if (isNiladic.test(ch)) {\n          state.prev = false;\n          return \"niladic\";\n        }\n\n        if (/[¯\\d]/.test(ch)) {\n          if (state.func) {\n            state.func = false;\n            state.prev = false;\n          } else {\n            state.prev = true;\n          }\n\n          stream.eatWhile(/[\\w\\.]/);\n          return \"number\";\n        }\n\n        if (isOperator.test(ch)) {\n          return \"operator apl-\" + builtInOps[ch];\n        }\n\n        if (isArrow.test(ch)) {\n          return \"apl-arrow\";\n        }\n\n        if (isFunction.test(ch)) {\n          funcName = \"apl-\";\n\n          if (builtInFuncs[ch] != null) {\n            if (state.prev) {\n              funcName += builtInFuncs[ch][1];\n            } else {\n              funcName += builtInFuncs[ch][0];\n            }\n          }\n\n          state.func = true;\n          state.prev = false;\n          return \"function \" + funcName;\n        }\n\n        if (isComment.test(ch)) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n\n        if (ch === \"∘\" && stream.peek() === \".\") {\n          stream.next();\n          return \"function jot-dot\";\n        }\n\n        stream.eatWhile(/[\\w\\$_]/);\n        state.prev = true;\n        return \"keyword\";\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/apl\", \"apl\");\n});"],"sourceRoot":""}