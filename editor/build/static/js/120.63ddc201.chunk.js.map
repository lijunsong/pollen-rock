{"version":3,"sources":["../node_modules/codemirror/mode/perl/perl.js"],"names":["CodeMirror","look","stream","c","string","charAt","pos","prefix","x","substr","suffix","y","length","eatSuffix","defineMode","PERL","->","++","--","**","=~","!~","*","/","%","+","-",".","<<",">>","<",">","<=",">=","lt","gt","le","ge","==","!=","<=>","eq","ne","cmp","~~","&","|","^","&&","||","//","..","...","?",":","=","+=","-=","*=",",","=>","::","not","and","or","xor","BEGIN","END","PRINT","PRINTF","GETC","READ","READLINE","DESTROY","TIE","TIEHANDLE","UNTIE","STDIN","STDIN_TOP","STDOUT","STDOUT_TOP","STDERR","STDERR_TOP","$ARG","$_","@ARG","@_","$LIST_SEPARATOR","$\"","$PROCESS_ID","$PID","$$","$REAL_GROUP_ID","$GID","$(","$EFFECTIVE_GROUP_ID","$EGID","$)","$PROGRAM_NAME","$0","$SUBSCRIPT_SEPARATOR","$SUBSEP","$;","$REAL_USER_ID","$UID","$<","$EFFECTIVE_USER_ID","$EUID","$>","$a","$b","$COMPILING","$^C","$DEBUGGING","$^D","${^ENCODING}","$ENV","%ENV","$SYSTEM_FD_MAX","$^F","@F","${^GLOBAL_PHASE}","$^H","%^H","@INC","%INC","$INPLACE_EDIT","$^I","$^M","$OSNAME","$^O","${^OPEN}","$PERLDB","$^P","$SIG","%SIG","$BASETIME","$^T","${^TAINT}","${^UNICODE}","${^UTF8CACHE}","${^UTF8LOCALE}","$PERL_VERSION","$^V","${^WIN32_SLOPPY_STAT}","$EXECUTABLE_NAME","$^X","$1","$MATCH","$&","${^MATCH}","$PREMATCH","$`","${^PREMATCH}","$POSTMATCH","$'","${^POSTMATCH}","$LAST_PAREN_MATCH","$+","$LAST_SUBMATCH_RESULT","$^N","@LAST_MATCH_END","@+","%LAST_PAREN_MATCH","%+","@LAST_MATCH_START","@-","%LAST_MATCH_START","%-","$LAST_REGEXP_CODE_RESULT","$^R","${^RE_DEBUG_FLAGS}","${^RE_TRIE_MAXBUF}","$ARGV","@ARGV","ARGV","ARGVOUT","$OUTPUT_FIELD_SEPARATOR","$OFS","$,","$INPUT_LINE_NUMBER","$NR","$.","$INPUT_RECORD_SEPARATOR","$RS","$/","$OUTPUT_RECORD_SEPARATOR","$ORS","$\\","$OUTPUT_AUTOFLUSH","$|","$ACCUMULATOR","$^A","$FORMAT_FORMFEED","$^L","$FORMAT_PAGE_NUMBER","$%","$FORMAT_LINES_LEFT","$-","$FORMAT_LINE_BREAK_CHARACTERS","$:","$FORMAT_LINES_PER_PAGE","$=","$FORMAT_TOP_NAME","$^","$FORMAT_NAME","$~","${^CHILD_ERROR_NATIVE}","$EXTENDED_OS_ERROR","$^E","$EXCEPTIONS_BEING_CAUGHT","$^S","$WARNING","$^W","${^WARNING_BITS}","$OS_ERROR","$ERRNO","$!","%OS_ERROR","%ERRNO","%!","$CHILD_ERROR","$?","$EVAL_ERROR","$@","$OFMT","$#","$*","$ARRAY_BASE","$[","$OLD_PERL_VERSION","$]","if","elsif","else","while","unless","for","foreach","abs","accept","alarm","atan2","bind","binmode","bless","bootstrap","break","caller","chdir","chmod","chomp","chop","chown","chr","chroot","close","closedir","connect","continue","cos","crypt","dbmclose","dbmopen","default","defined","delete","die","do","dump","each","endgrent","endhostent","endnetent","endprotoent","endpwent","endservent","eof","eval","exec","exists","exit","exp","fcntl","fileno","flock","fork","format","formline","getc","getgrent","getgrgid","getgrnam","gethostbyaddr","gethostbyname","gethostent","getlogin","getnetbyaddr","getnetbyname","getnetent","getpeername","getpgrp","getppid","getpriority","getprotobyname","getprotobynumber","getprotoent","getpwent","getpwnam","getpwuid","getservbyname","getservbyport","getservent","getsockname","getsockopt","given","glob","gmtime","goto","grep","hex","import","index","int","ioctl","join","keys","kill","last","lc","lcfirst","link","listen","local","localtime","lock","log","lstat","m","map","mkdir","msgctl","msgget","msgrcv","msgsnd","my","new","next","no","oct","open","opendir","ord","our","pack","package","pipe","pop","print","printf","prototype","push","q","qq","qr","quotemeta","qw","qx","rand","read","readdir","readline","readlink","readpipe","recv","redo","ref","rename","require","reset","return","reverse","rewinddir","rindex","rmdir","s","say","scalar","seek","seekdir","select","semctl","semget","semop","send","setgrent","sethostent","setnetent","setpgrp","setpriority","setprotoent","setpwent","setservent","setsockopt","shift","shmctl","shmget","shmread","shmwrite","shutdown","sin","sleep","socket","socketpair","sort","splice","split","sprintf","sqrt","srand","stat","state","study","sub","symlink","syscall","sysopen","sysread","sysseek","system","syswrite","tell","telldir","tie","tied","time","times","tr","truncate","uc","ucfirst","umask","undef","unlink","unpack","unshift","untie","use","utime","values","vec","wait","waitpid","wantarray","warn","when","write","RXstyle","RXmodifiers","tokenChain","chain","style","tail","tokenize","e","i","undefined","eatWhile","tokenPerl","tokenSOMETHING","skipToEnd","eatSpace","match","current","sol","ch","p","n","eat","test","l","startState","token","lineComment","registerHelper","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/120.63ddc201.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// CodeMirror2 mode/perl/perl.js (text/x-perl) beta 0.10 (2011-11-08)\n// This is a part of CodeMirror from https://github.com/sabaca/CodeMirror_mode_perl (mail@sabaca.com)\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"perl\", function () {\n    // http://perldoc.perl.org\n    var PERL = {\n      //   null - magic touch\n      //   1 - keyword\n      //   2 - def\n      //   3 - atom\n      //   4 - operator\n      //   5 - variable-2 (predefined)\n      //   [x,y] - x=1,2,3; y=must be defined if x{...}\n      //      PERL operators\n      '->': 4,\n      '++': 4,\n      '--': 4,\n      '**': 4,\n      //   ! ~ \\ and unary + and -\n      '=~': 4,\n      '!~': 4,\n      '*': 4,\n      '/': 4,\n      '%': 4,\n      'x': 4,\n      '+': 4,\n      '-': 4,\n      '.': 4,\n      '<<': 4,\n      '>>': 4,\n      //   named unary operators\n      '<': 4,\n      '>': 4,\n      '<=': 4,\n      '>=': 4,\n      'lt': 4,\n      'gt': 4,\n      'le': 4,\n      'ge': 4,\n      '==': 4,\n      '!=': 4,\n      '<=>': 4,\n      'eq': 4,\n      'ne': 4,\n      'cmp': 4,\n      '~~': 4,\n      '&': 4,\n      '|': 4,\n      '^': 4,\n      '&&': 4,\n      '||': 4,\n      '//': 4,\n      '..': 4,\n      '...': 4,\n      '?': 4,\n      ':': 4,\n      '=': 4,\n      '+=': 4,\n      '-=': 4,\n      '*=': 4,\n      //   etc. ???\n      ',': 4,\n      '=>': 4,\n      '::': 4,\n      //   list operators (rightward)\n      'not': 4,\n      'and': 4,\n      'or': 4,\n      'xor': 4,\n      //      PERL predefined variables (I know, what this is a paranoid idea, but may be needed for people, who learn PERL, and for me as well, ...and may be for you?;)\n      'BEGIN': [5, 1],\n      'END': [5, 1],\n      'PRINT': [5, 1],\n      'PRINTF': [5, 1],\n      'GETC': [5, 1],\n      'READ': [5, 1],\n      'READLINE': [5, 1],\n      'DESTROY': [5, 1],\n      'TIE': [5, 1],\n      'TIEHANDLE': [5, 1],\n      'UNTIE': [5, 1],\n      'STDIN': 5,\n      'STDIN_TOP': 5,\n      'STDOUT': 5,\n      'STDOUT_TOP': 5,\n      'STDERR': 5,\n      'STDERR_TOP': 5,\n      '$ARG': 5,\n      '$_': 5,\n      '@ARG': 5,\n      '@_': 5,\n      '$LIST_SEPARATOR': 5,\n      '$\"': 5,\n      '$PROCESS_ID': 5,\n      '$PID': 5,\n      '$$': 5,\n      '$REAL_GROUP_ID': 5,\n      '$GID': 5,\n      '$(': 5,\n      '$EFFECTIVE_GROUP_ID': 5,\n      '$EGID': 5,\n      '$)': 5,\n      '$PROGRAM_NAME': 5,\n      '$0': 5,\n      '$SUBSCRIPT_SEPARATOR': 5,\n      '$SUBSEP': 5,\n      '$;': 5,\n      '$REAL_USER_ID': 5,\n      '$UID': 5,\n      '$<': 5,\n      '$EFFECTIVE_USER_ID': 5,\n      '$EUID': 5,\n      '$>': 5,\n      '$a': 5,\n      '$b': 5,\n      '$COMPILING': 5,\n      '$^C': 5,\n      '$DEBUGGING': 5,\n      '$^D': 5,\n      '${^ENCODING}': 5,\n      '$ENV': 5,\n      '%ENV': 5,\n      '$SYSTEM_FD_MAX': 5,\n      '$^F': 5,\n      '@F': 5,\n      '${^GLOBAL_PHASE}': 5,\n      '$^H': 5,\n      '%^H': 5,\n      '@INC': 5,\n      '%INC': 5,\n      '$INPLACE_EDIT': 5,\n      '$^I': 5,\n      '$^M': 5,\n      '$OSNAME': 5,\n      '$^O': 5,\n      '${^OPEN}': 5,\n      '$PERLDB': 5,\n      '$^P': 5,\n      '$SIG': 5,\n      '%SIG': 5,\n      '$BASETIME': 5,\n      '$^T': 5,\n      '${^TAINT}': 5,\n      '${^UNICODE}': 5,\n      '${^UTF8CACHE}': 5,\n      '${^UTF8LOCALE}': 5,\n      '$PERL_VERSION': 5,\n      '$^V': 5,\n      '${^WIN32_SLOPPY_STAT}': 5,\n      '$EXECUTABLE_NAME': 5,\n      '$^X': 5,\n      '$1': 5,\n      // - regexp $1, $2...\n      '$MATCH': 5,\n      '$&': 5,\n      '${^MATCH}': 5,\n      '$PREMATCH': 5,\n      '$`': 5,\n      '${^PREMATCH}': 5,\n      '$POSTMATCH': 5,\n      \"$'\": 5,\n      '${^POSTMATCH}': 5,\n      '$LAST_PAREN_MATCH': 5,\n      '$+': 5,\n      '$LAST_SUBMATCH_RESULT': 5,\n      '$^N': 5,\n      '@LAST_MATCH_END': 5,\n      '@+': 5,\n      '%LAST_PAREN_MATCH': 5,\n      '%+': 5,\n      '@LAST_MATCH_START': 5,\n      '@-': 5,\n      '%LAST_MATCH_START': 5,\n      '%-': 5,\n      '$LAST_REGEXP_CODE_RESULT': 5,\n      '$^R': 5,\n      '${^RE_DEBUG_FLAGS}': 5,\n      '${^RE_TRIE_MAXBUF}': 5,\n      '$ARGV': 5,\n      '@ARGV': 5,\n      'ARGV': 5,\n      'ARGVOUT': 5,\n      '$OUTPUT_FIELD_SEPARATOR': 5,\n      '$OFS': 5,\n      '$,': 5,\n      '$INPUT_LINE_NUMBER': 5,\n      '$NR': 5,\n      '$.': 5,\n      '$INPUT_RECORD_SEPARATOR': 5,\n      '$RS': 5,\n      '$/': 5,\n      '$OUTPUT_RECORD_SEPARATOR': 5,\n      '$ORS': 5,\n      '$\\\\': 5,\n      '$OUTPUT_AUTOFLUSH': 5,\n      '$|': 5,\n      '$ACCUMULATOR': 5,\n      '$^A': 5,\n      '$FORMAT_FORMFEED': 5,\n      '$^L': 5,\n      '$FORMAT_PAGE_NUMBER': 5,\n      '$%': 5,\n      '$FORMAT_LINES_LEFT': 5,\n      '$-': 5,\n      '$FORMAT_LINE_BREAK_CHARACTERS': 5,\n      '$:': 5,\n      '$FORMAT_LINES_PER_PAGE': 5,\n      '$=': 5,\n      '$FORMAT_TOP_NAME': 5,\n      '$^': 5,\n      '$FORMAT_NAME': 5,\n      '$~': 5,\n      '${^CHILD_ERROR_NATIVE}': 5,\n      '$EXTENDED_OS_ERROR': 5,\n      '$^E': 5,\n      '$EXCEPTIONS_BEING_CAUGHT': 5,\n      '$^S': 5,\n      '$WARNING': 5,\n      '$^W': 5,\n      '${^WARNING_BITS}': 5,\n      '$OS_ERROR': 5,\n      '$ERRNO': 5,\n      '$!': 5,\n      '%OS_ERROR': 5,\n      '%ERRNO': 5,\n      '%!': 5,\n      '$CHILD_ERROR': 5,\n      '$?': 5,\n      '$EVAL_ERROR': 5,\n      '$@': 5,\n      '$OFMT': 5,\n      '$#': 5,\n      '$*': 5,\n      '$ARRAY_BASE': 5,\n      '$[': 5,\n      '$OLD_PERL_VERSION': 5,\n      '$]': 5,\n      //      PERL blocks\n      'if': [1, 1],\n      elsif: [1, 1],\n      'else': [1, 1],\n      'while': [1, 1],\n      unless: [1, 1],\n      'for': [1, 1],\n      foreach: [1, 1],\n      //      PERL functions\n      'abs': 1,\n      // - absolute value function\n      accept: 1,\n      // - accept an incoming socket connect\n      alarm: 1,\n      // - schedule a SIGALRM\n      'atan2': 1,\n      // - arctangent of Y/X in the range -PI to PI\n      bind: 1,\n      // - binds an address to a socket\n      binmode: 1,\n      // - prepare binary files for I/O\n      bless: 1,\n      // - create an object\n      bootstrap: 1,\n      //\n      'break': 1,\n      // - break out of a \"given\" block\n      caller: 1,\n      // - get context of the current subroutine call\n      chdir: 1,\n      // - change your current working directory\n      chmod: 1,\n      // - changes the permissions on a list of files\n      chomp: 1,\n      // - remove a trailing record separator from a string\n      chop: 1,\n      // - remove the last character from a string\n      chown: 1,\n      // - change the ownership on a list of files\n      chr: 1,\n      // - get character this number represents\n      chroot: 1,\n      // - make directory new root for path lookups\n      close: 1,\n      // - close file (or pipe or socket) handle\n      closedir: 1,\n      // - close directory handle\n      connect: 1,\n      // - connect to a remote socket\n      'continue': [1, 1],\n      // - optional trailing block in a while or foreach\n      'cos': 1,\n      // - cosine function\n      crypt: 1,\n      // - one-way passwd-style encryption\n      dbmclose: 1,\n      // - breaks binding on a tied dbm file\n      dbmopen: 1,\n      // - create binding on a tied dbm file\n      'default': 1,\n      //\n      defined: 1,\n      // - test whether a value, variable, or function is defined\n      'delete': 1,\n      // - deletes a value from a hash\n      die: 1,\n      // - raise an exception or bail out\n      'do': 1,\n      // - turn a BLOCK into a TERM\n      dump: 1,\n      // - create an immediate core dump\n      each: 1,\n      // - retrieve the next key/value pair from a hash\n      endgrent: 1,\n      // - be done using group file\n      endhostent: 1,\n      // - be done using hosts file\n      endnetent: 1,\n      // - be done using networks file\n      endprotoent: 1,\n      // - be done using protocols file\n      endpwent: 1,\n      // - be done using passwd file\n      endservent: 1,\n      // - be done using services file\n      eof: 1,\n      // - test a filehandle for its end\n      'eval': 1,\n      // - catch exceptions or compile and run code\n      'exec': 1,\n      // - abandon this program to run another\n      exists: 1,\n      // - test whether a hash key is present\n      exit: 1,\n      // - terminate this program\n      'exp': 1,\n      // - raise I to a power\n      fcntl: 1,\n      // - file control system call\n      fileno: 1,\n      // - return file descriptor from filehandle\n      flock: 1,\n      // - lock an entire file with an advisory lock\n      fork: 1,\n      // - create a new process just like this one\n      format: 1,\n      // - declare a picture format with use by the write() function\n      formline: 1,\n      // - internal function used for formats\n      getc: 1,\n      // - get the next character from the filehandle\n      getgrent: 1,\n      // - get next group record\n      getgrgid: 1,\n      // - get group record given group user ID\n      getgrnam: 1,\n      // - get group record given group name\n      gethostbyaddr: 1,\n      // - get host record given its address\n      gethostbyname: 1,\n      // - get host record given name\n      gethostent: 1,\n      // - get next hosts record\n      getlogin: 1,\n      // - return who logged in at this tty\n      getnetbyaddr: 1,\n      // - get network record given its address\n      getnetbyname: 1,\n      // - get networks record given name\n      getnetent: 1,\n      // - get next networks record\n      getpeername: 1,\n      // - find the other end of a socket connection\n      getpgrp: 1,\n      // - get process group\n      getppid: 1,\n      // - get parent process ID\n      getpriority: 1,\n      // - get current nice value\n      getprotobyname: 1,\n      // - get protocol record given name\n      getprotobynumber: 1,\n      // - get protocol record numeric protocol\n      getprotoent: 1,\n      // - get next protocols record\n      getpwent: 1,\n      // - get next passwd record\n      getpwnam: 1,\n      // - get passwd record given user login name\n      getpwuid: 1,\n      // - get passwd record given user ID\n      getservbyname: 1,\n      // - get services record given its name\n      getservbyport: 1,\n      // - get services record given numeric port\n      getservent: 1,\n      // - get next services record\n      getsockname: 1,\n      // - retrieve the sockaddr for a given socket\n      getsockopt: 1,\n      // - get socket options on a given socket\n      given: 1,\n      //\n      glob: 1,\n      // - expand filenames using wildcards\n      gmtime: 1,\n      // - convert UNIX time into record or string using Greenwich time\n      'goto': 1,\n      // - create spaghetti code\n      grep: 1,\n      // - locate elements in a list test true against a given criterion\n      hex: 1,\n      // - convert a string to a hexadecimal number\n      'import': 1,\n      // - patch a module's namespace into your own\n      index: 1,\n      // - find a substring within a string\n      'int': 1,\n      // - get the integer portion of a number\n      ioctl: 1,\n      // - system-dependent device control system call\n      'join': 1,\n      // - join a list into a string using a separator\n      keys: 1,\n      // - retrieve list of indices from a hash\n      kill: 1,\n      // - send a signal to a process or process group\n      last: 1,\n      // - exit a block prematurely\n      lc: 1,\n      // - return lower-case version of a string\n      lcfirst: 1,\n      // - return a string with just the next letter in lower case\n      length: 1,\n      // - return the number of bytes in a string\n      'link': 1,\n      // - create a hard link in the filesytem\n      listen: 1,\n      // - register your socket as a server\n      local: 2,\n      // - create a temporary value for a global variable (dynamic scoping)\n      localtime: 1,\n      // - convert UNIX time into record or string using local time\n      lock: 1,\n      // - get a thread lock on a variable, subroutine, or method\n      'log': 1,\n      // - retrieve the natural logarithm for a number\n      lstat: 1,\n      // - stat a symbolic link\n      m: null,\n      // - match a string with a regular expression pattern\n      map: 1,\n      // - apply a change to a list to get back a new list with the changes\n      mkdir: 1,\n      // - create a directory\n      msgctl: 1,\n      // - SysV IPC message control operations\n      msgget: 1,\n      // - get SysV IPC message queue\n      msgrcv: 1,\n      // - receive a SysV IPC message from a message queue\n      msgsnd: 1,\n      // - send a SysV IPC message to a message queue\n      my: 2,\n      // - declare and assign a local variable (lexical scoping)\n      'new': 1,\n      //\n      next: 1,\n      // - iterate a block prematurely\n      no: 1,\n      // - unimport some module symbols or semantics at compile time\n      oct: 1,\n      // - convert a string to an octal number\n      open: 1,\n      // - open a file, pipe, or descriptor\n      opendir: 1,\n      // - open a directory\n      ord: 1,\n      // - find a character's numeric representation\n      our: 2,\n      // - declare and assign a package variable (lexical scoping)\n      pack: 1,\n      // - convert a list into a binary representation\n      'package': 1,\n      // - declare a separate global namespace\n      pipe: 1,\n      // - open a pair of connected filehandles\n      pop: 1,\n      // - remove the last element from an array and return it\n      pos: 1,\n      // - find or set the offset for the last/next m//g search\n      print: 1,\n      // - output a list to a filehandle\n      printf: 1,\n      // - output a formatted list to a filehandle\n      prototype: 1,\n      // - get the prototype (if any) of a subroutine\n      push: 1,\n      // - append one or more elements to an array\n      q: null,\n      // - singly quote a string\n      qq: null,\n      // - doubly quote a string\n      qr: null,\n      // - Compile pattern\n      quotemeta: null,\n      // - quote regular expression magic characters\n      qw: null,\n      // - quote a list of words\n      qx: null,\n      // - backquote quote a string\n      rand: 1,\n      // - retrieve the next pseudorandom number\n      read: 1,\n      // - fixed-length buffered input from a filehandle\n      readdir: 1,\n      // - get a directory from a directory handle\n      readline: 1,\n      // - fetch a record from a file\n      readlink: 1,\n      // - determine where a symbolic link is pointing\n      readpipe: 1,\n      // - execute a system command and collect standard output\n      recv: 1,\n      // - receive a message over a Socket\n      redo: 1,\n      // - start this loop iteration over again\n      ref: 1,\n      // - find out the type of thing being referenced\n      rename: 1,\n      // - change a filename\n      require: 1,\n      // - load in external functions from a library at runtime\n      reset: 1,\n      // - clear all variables of a given name\n      'return': 1,\n      // - get out of a function early\n      reverse: 1,\n      // - flip a string or a list\n      rewinddir: 1,\n      // - reset directory handle\n      rindex: 1,\n      // - right-to-left substring search\n      rmdir: 1,\n      // - remove a directory\n      s: null,\n      // - replace a pattern with a string\n      say: 1,\n      // - print with newline\n      scalar: 1,\n      // - force a scalar context\n      seek: 1,\n      // - reposition file pointer for random-access I/O\n      seekdir: 1,\n      // - reposition directory pointer\n      select: 1,\n      // - reset default output or do I/O multiplexing\n      semctl: 1,\n      // - SysV semaphore control operations\n      semget: 1,\n      // - get set of SysV semaphores\n      semop: 1,\n      // - SysV semaphore operations\n      send: 1,\n      // - send a message over a socket\n      setgrent: 1,\n      // - prepare group file for use\n      sethostent: 1,\n      // - prepare hosts file for use\n      setnetent: 1,\n      // - prepare networks file for use\n      setpgrp: 1,\n      // - set the process group of a process\n      setpriority: 1,\n      // - set a process's nice value\n      setprotoent: 1,\n      // - prepare protocols file for use\n      setpwent: 1,\n      // - prepare passwd file for use\n      setservent: 1,\n      // - prepare services file for use\n      setsockopt: 1,\n      // - set some socket options\n      shift: 1,\n      // - remove the first element of an array, and return it\n      shmctl: 1,\n      // - SysV shared memory operations\n      shmget: 1,\n      // - get SysV shared memory segment identifier\n      shmread: 1,\n      // - read SysV shared memory\n      shmwrite: 1,\n      // - write SysV shared memory\n      shutdown: 1,\n      // - close down just half of a socket connection\n      'sin': 1,\n      // - return the sine of a number\n      sleep: 1,\n      // - block for some number of seconds\n      socket: 1,\n      // - create a socket\n      socketpair: 1,\n      // - create a pair of sockets\n      'sort': 1,\n      // - sort a list of values\n      splice: 1,\n      // - add or remove elements anywhere in an array\n      'split': 1,\n      // - split up a string using a regexp delimiter\n      sprintf: 1,\n      // - formatted print into a string\n      'sqrt': 1,\n      // - square root function\n      srand: 1,\n      // - seed the random number generator\n      stat: 1,\n      // - get a file's status information\n      state: 1,\n      // - declare and assign a state variable (persistent lexical scoping)\n      study: 1,\n      // - optimize input data for repeated searches\n      'sub': 1,\n      // - declare a subroutine, possibly anonymously\n      'substr': 1,\n      // - get or alter a portion of a stirng\n      symlink: 1,\n      // - create a symbolic link to a file\n      syscall: 1,\n      // - execute an arbitrary system call\n      sysopen: 1,\n      // - open a file, pipe, or descriptor\n      sysread: 1,\n      // - fixed-length unbuffered input from a filehandle\n      sysseek: 1,\n      // - position I/O pointer on handle used with sysread and syswrite\n      system: 1,\n      // - run a separate program\n      syswrite: 1,\n      // - fixed-length unbuffered output to a filehandle\n      tell: 1,\n      // - get current seekpointer on a filehandle\n      telldir: 1,\n      // - get current seekpointer on a directory handle\n      tie: 1,\n      // - bind a variable to an object class\n      tied: 1,\n      // - get a reference to the object underlying a tied variable\n      time: 1,\n      // - return number of seconds since 1970\n      times: 1,\n      // - return elapsed time for self and child processes\n      tr: null,\n      // - transliterate a string\n      truncate: 1,\n      // - shorten a file\n      uc: 1,\n      // - return upper-case version of a string\n      ucfirst: 1,\n      // - return a string with just the next letter in upper case\n      umask: 1,\n      // - set file creation mode mask\n      undef: 1,\n      // - remove a variable or function definition\n      unlink: 1,\n      // - remove one link to a file\n      unpack: 1,\n      // - convert binary structure into normal perl variables\n      unshift: 1,\n      // - prepend more elements to the beginning of a list\n      untie: 1,\n      // - break a tie binding to a variable\n      use: 1,\n      // - load in a module at compile time\n      utime: 1,\n      // - set a file's last access and modify times\n      values: 1,\n      // - return a list of the values in a hash\n      vec: 1,\n      // - test or set particular bits in a string\n      wait: 1,\n      // - wait for any child process to die\n      waitpid: 1,\n      // - wait for a particular child process to die\n      wantarray: 1,\n      // - get void vs scalar vs list context of current subroutine call\n      warn: 1,\n      // - print debugging info\n      when: 1,\n      //\n      write: 1,\n      // - print a picture record\n      y: null\n    }; // - transliterate a string\n\n    var RXstyle = \"string-2\";\n    var RXmodifiers = /[goseximacplud]/; // NOTE: \"m\", \"s\", \"y\" and \"tr\" need to correct real modifiers for each regexp type\n\n    function tokenChain(stream, state, chain, style, tail) {\n      // NOTE: chain.length > 2 is not working now (it's for s[...][...]geos;)\n      state.chain = null; //                                                          12   3tail\n\n      state.style = null;\n      state.tail = null;\n\n      state.tokenize = function (stream, state) {\n        var e = false,\n            c,\n            i = 0;\n\n        while (c = stream.next()) {\n          if (c === chain[i] && !e) {\n            if (chain[++i] !== undefined) {\n              state.chain = chain[i];\n              state.style = style;\n              state.tail = tail;\n            } else if (tail) stream.eatWhile(tail);\n\n            state.tokenize = tokenPerl;\n            return style;\n          }\n\n          e = !e && c == \"\\\\\";\n        }\n\n        return style;\n      };\n\n      return state.tokenize(stream, state);\n    }\n\n    function tokenSOMETHING(stream, state, string) {\n      state.tokenize = function (stream, state) {\n        if (stream.string == string) state.tokenize = tokenPerl;\n        stream.skipToEnd();\n        return \"string\";\n      };\n\n      return state.tokenize(stream, state);\n    }\n\n    function tokenPerl(stream, state) {\n      if (stream.eatSpace()) return null;\n      if (state.chain) return tokenChain(stream, state, state.chain, state.style, state.tail);\n      if (stream.match(/^\\-?[\\d\\.]/, false)) if (stream.match(/^(\\-?(\\d*\\.\\d+(e[+-]?\\d+)?|\\d+\\.\\d*)|0x[\\da-fA-F]+|0b[01]+|\\d+(e[+-]?\\d+)?)/)) return 'number';\n\n      if (stream.match(/^<<(?=\\w)/)) {\n        // NOTE: <<SOMETHING\\n...\\nSOMETHING\\n\n        stream.eatWhile(/\\w/);\n        return tokenSOMETHING(stream, state, stream.current().substr(2));\n      }\n\n      if (stream.sol() && stream.match(/^\\=item(?!\\w)/)) {\n        // NOTE: \\n=item...\\n=cut\\n\n        return tokenSOMETHING(stream, state, '=cut');\n      }\n\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        // NOTE: ' or \" or <<'SOMETHING'\\n...\\nSOMETHING\\n or <<\"SOMETHING\"\\n...\\nSOMETHING\\n\n        if (prefix(stream, 3) == \"<<\" + ch) {\n          var p = stream.pos;\n          stream.eatWhile(/\\w/);\n          var n = stream.current().substr(1);\n          if (n && stream.eat(ch)) return tokenSOMETHING(stream, state, n);\n          stream.pos = p;\n        }\n\n        return tokenChain(stream, state, [ch], \"string\");\n      }\n\n      if (ch == \"q\") {\n        var c = look(stream, -2);\n\n        if (!(c && /\\w/.test(c))) {\n          c = look(stream, 0);\n\n          if (c == \"x\") {\n            c = look(stream, 1);\n\n            if (c == \"(\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\")\"], RXstyle, RXmodifiers);\n            }\n\n            if (c == \"[\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\"]\"], RXstyle, RXmodifiers);\n            }\n\n            if (c == \"{\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\"}\"], RXstyle, RXmodifiers);\n            }\n\n            if (c == \"<\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\">\"], RXstyle, RXmodifiers);\n            }\n\n            if (/[\\^'\"!~\\/]/.test(c)) {\n              eatSuffix(stream, 1);\n              return tokenChain(stream, state, [stream.eat(c)], RXstyle, RXmodifiers);\n            }\n          } else if (c == \"q\") {\n            c = look(stream, 1);\n\n            if (c == \"(\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\")\"], \"string\");\n            }\n\n            if (c == \"[\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\"]\"], \"string\");\n            }\n\n            if (c == \"{\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\"}\"], \"string\");\n            }\n\n            if (c == \"<\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\">\"], \"string\");\n            }\n\n            if (/[\\^'\"!~\\/]/.test(c)) {\n              eatSuffix(stream, 1);\n              return tokenChain(stream, state, [stream.eat(c)], \"string\");\n            }\n          } else if (c == \"w\") {\n            c = look(stream, 1);\n\n            if (c == \"(\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\")\"], \"bracket\");\n            }\n\n            if (c == \"[\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\"]\"], \"bracket\");\n            }\n\n            if (c == \"{\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\"}\"], \"bracket\");\n            }\n\n            if (c == \"<\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\">\"], \"bracket\");\n            }\n\n            if (/[\\^'\"!~\\/]/.test(c)) {\n              eatSuffix(stream, 1);\n              return tokenChain(stream, state, [stream.eat(c)], \"bracket\");\n            }\n          } else if (c == \"r\") {\n            c = look(stream, 1);\n\n            if (c == \"(\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\")\"], RXstyle, RXmodifiers);\n            }\n\n            if (c == \"[\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\"]\"], RXstyle, RXmodifiers);\n            }\n\n            if (c == \"{\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\"}\"], RXstyle, RXmodifiers);\n            }\n\n            if (c == \"<\") {\n              eatSuffix(stream, 2);\n              return tokenChain(stream, state, [\">\"], RXstyle, RXmodifiers);\n            }\n\n            if (/[\\^'\"!~\\/]/.test(c)) {\n              eatSuffix(stream, 1);\n              return tokenChain(stream, state, [stream.eat(c)], RXstyle, RXmodifiers);\n            }\n          } else if (/[\\^'\"!~\\/(\\[{<]/.test(c)) {\n            if (c == \"(\") {\n              eatSuffix(stream, 1);\n              return tokenChain(stream, state, [\")\"], \"string\");\n            }\n\n            if (c == \"[\") {\n              eatSuffix(stream, 1);\n              return tokenChain(stream, state, [\"]\"], \"string\");\n            }\n\n            if (c == \"{\") {\n              eatSuffix(stream, 1);\n              return tokenChain(stream, state, [\"}\"], \"string\");\n            }\n\n            if (c == \"<\") {\n              eatSuffix(stream, 1);\n              return tokenChain(stream, state, [\">\"], \"string\");\n            }\n\n            if (/[\\^'\"!~\\/]/.test(c)) {\n              return tokenChain(stream, state, [stream.eat(c)], \"string\");\n            }\n          }\n        }\n      }\n\n      if (ch == \"m\") {\n        var c = look(stream, -2);\n\n        if (!(c && /\\w/.test(c))) {\n          c = stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n\n          if (c) {\n            if (/[\\^'\"!~\\/]/.test(c)) {\n              return tokenChain(stream, state, [c], RXstyle, RXmodifiers);\n            }\n\n            if (c == \"(\") {\n              return tokenChain(stream, state, [\")\"], RXstyle, RXmodifiers);\n            }\n\n            if (c == \"[\") {\n              return tokenChain(stream, state, [\"]\"], RXstyle, RXmodifiers);\n            }\n\n            if (c == \"{\") {\n              return tokenChain(stream, state, [\"}\"], RXstyle, RXmodifiers);\n            }\n\n            if (c == \"<\") {\n              return tokenChain(stream, state, [\">\"], RXstyle, RXmodifiers);\n            }\n          }\n        }\n      }\n\n      if (ch == \"s\") {\n        var c = /[\\/>\\]})\\w]/.test(look(stream, -2));\n\n        if (!c) {\n          c = stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n\n          if (c) {\n            if (c == \"[\") return tokenChain(stream, state, [\"]\", \"]\"], RXstyle, RXmodifiers);\n            if (c == \"{\") return tokenChain(stream, state, [\"}\", \"}\"], RXstyle, RXmodifiers);\n            if (c == \"<\") return tokenChain(stream, state, [\">\", \">\"], RXstyle, RXmodifiers);\n            if (c == \"(\") return tokenChain(stream, state, [\")\", \")\"], RXstyle, RXmodifiers);\n            return tokenChain(stream, state, [c, c], RXstyle, RXmodifiers);\n          }\n        }\n      }\n\n      if (ch == \"y\") {\n        var c = /[\\/>\\]})\\w]/.test(look(stream, -2));\n\n        if (!c) {\n          c = stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n\n          if (c) {\n            if (c == \"[\") return tokenChain(stream, state, [\"]\", \"]\"], RXstyle, RXmodifiers);\n            if (c == \"{\") return tokenChain(stream, state, [\"}\", \"}\"], RXstyle, RXmodifiers);\n            if (c == \"<\") return tokenChain(stream, state, [\">\", \">\"], RXstyle, RXmodifiers);\n            if (c == \"(\") return tokenChain(stream, state, [\")\", \")\"], RXstyle, RXmodifiers);\n            return tokenChain(stream, state, [c, c], RXstyle, RXmodifiers);\n          }\n        }\n      }\n\n      if (ch == \"t\") {\n        var c = /[\\/>\\]})\\w]/.test(look(stream, -2));\n\n        if (!c) {\n          c = stream.eat(\"r\");\n\n          if (c) {\n            c = stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n\n            if (c) {\n              if (c == \"[\") return tokenChain(stream, state, [\"]\", \"]\"], RXstyle, RXmodifiers);\n              if (c == \"{\") return tokenChain(stream, state, [\"}\", \"}\"], RXstyle, RXmodifiers);\n              if (c == \"<\") return tokenChain(stream, state, [\">\", \">\"], RXstyle, RXmodifiers);\n              if (c == \"(\") return tokenChain(stream, state, [\")\", \")\"], RXstyle, RXmodifiers);\n              return tokenChain(stream, state, [c, c], RXstyle, RXmodifiers);\n            }\n          }\n        }\n      }\n\n      if (ch == \"`\") {\n        return tokenChain(stream, state, [ch], \"variable-2\");\n      }\n\n      if (ch == \"/\") {\n        if (!/~\\s*$/.test(prefix(stream))) return \"operator\";else return tokenChain(stream, state, [ch], RXstyle, RXmodifiers);\n      }\n\n      if (ch == \"$\") {\n        var p = stream.pos;\n        if (stream.eatWhile(/\\d/) || stream.eat(\"{\") && stream.eatWhile(/\\d/) && stream.eat(\"}\")) return \"variable-2\";else stream.pos = p;\n      }\n\n      if (/[$@%]/.test(ch)) {\n        var p = stream.pos;\n\n        if (stream.eat(\"^\") && stream.eat(/[A-Z]/) || !/[@$%&]/.test(look(stream, -2)) && stream.eat(/[=|\\\\\\-#?@;:&`~\\^!\\[\\]*'\"$+.,\\/<>()]/)) {\n          var c = stream.current();\n          if (PERL[c]) return \"variable-2\";\n        }\n\n        stream.pos = p;\n      }\n\n      if (/[$@%&]/.test(ch)) {\n        if (stream.eatWhile(/[\\w$\\[\\]]/) || stream.eat(\"{\") && stream.eatWhile(/[\\w$\\[\\]]/) && stream.eat(\"}\")) {\n          var c = stream.current();\n          if (PERL[c]) return \"variable-2\";else return \"variable\";\n        }\n      }\n\n      if (ch == \"#\") {\n        if (look(stream, -2) != \"$\") {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/.test(ch)) {\n        var p = stream.pos;\n        stream.eatWhile(/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/);\n        if (PERL[stream.current()]) return \"operator\";else stream.pos = p;\n      }\n\n      if (ch == \"_\") {\n        if (stream.pos == 1) {\n          if (suffix(stream, 6) == \"_END__\") {\n            return tokenChain(stream, state, ['\\0'], \"comment\");\n          } else if (suffix(stream, 7) == \"_DATA__\") {\n            return tokenChain(stream, state, ['\\0'], \"variable-2\");\n          } else if (suffix(stream, 7) == \"_C__\") {\n            return tokenChain(stream, state, ['\\0'], \"string\");\n          }\n        }\n      }\n\n      if (/\\w/.test(ch)) {\n        var p = stream.pos;\n        if (look(stream, -2) == \"{\" && (look(stream, 0) == \"}\" || stream.eatWhile(/\\w/) && look(stream, 0) == \"}\")) return \"string\";else stream.pos = p;\n      }\n\n      if (/[A-Z]/.test(ch)) {\n        var l = look(stream, -2);\n        var p = stream.pos;\n        stream.eatWhile(/[A-Z_]/);\n\n        if (/[\\da-z]/.test(look(stream, 0))) {\n          stream.pos = p;\n        } else {\n          var c = PERL[stream.current()];\n          if (!c) return \"meta\";\n          if (c[1]) c = c[0];\n\n          if (l != \":\") {\n            if (c == 1) return \"keyword\";else if (c == 2) return \"def\";else if (c == 3) return \"atom\";else if (c == 4) return \"operator\";else if (c == 5) return \"variable-2\";else return \"meta\";\n          } else return \"meta\";\n        }\n      }\n\n      if (/[a-zA-Z_]/.test(ch)) {\n        var l = look(stream, -2);\n        stream.eatWhile(/\\w/);\n        var c = PERL[stream.current()];\n        if (!c) return \"meta\";\n        if (c[1]) c = c[0];\n\n        if (l != \":\") {\n          if (c == 1) return \"keyword\";else if (c == 2) return \"def\";else if (c == 3) return \"atom\";else if (c == 4) return \"operator\";else if (c == 5) return \"variable-2\";else return \"meta\";\n        } else return \"meta\";\n      }\n\n      return null;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenPerl,\n          chain: null,\n          style: null,\n          tail: null\n        };\n      },\n      token: function token(stream, state) {\n        return (state.tokenize || tokenPerl)(stream, state);\n      },\n      lineComment: '#'\n    };\n  });\n  CodeMirror.registerHelper(\"wordChars\", \"perl\", /[\\w$]/);\n  CodeMirror.defineMIME(\"text/x-perl\", \"perl\"); // it's like \"peek\", but need for look-ahead or look-behind if index < 0\n\n  function look(stream, c) {\n    return stream.string.charAt(stream.pos + (c || 0));\n  } // return a part of prefix of current stream from current position\n\n\n  function prefix(stream, c) {\n    if (c) {\n      var x = stream.pos - c;\n      return stream.string.substr(x >= 0 ? x : 0, c);\n    } else {\n      return stream.string.substr(0, stream.pos - 1);\n    }\n  } // return a part of suffix of current stream from current position\n\n\n  function suffix(stream, c) {\n    var y = stream.string.length;\n    var x = y - stream.pos + 1;\n    return stream.string.substr(stream.pos, c && c < y ? c : x);\n  } // eating and vomiting a part of stream from current position\n\n\n  function eatSuffix(stream, c) {\n    var x = stream.pos + c;\n    var y;\n    if (x <= 0) stream.pos = 0;else if (x >= (y = stream.string.length - 1)) stream.pos = y;else stream.pos = x;\n  }\n});"],"sourceRoot":""}