{"version":3,"sources":["../node_modules/codemirror/mode/http/http.js"],"names":["CodeMirror","defineMode","failFirstLine","stream","state","skipToEnd","cur","header","start","match","responseStatusCode","test","peek","requestPath","code","responseStatusText","status","Number","eatWhile","requestProtocol","sol","eat","body","token","eatSpace","blankLine","startState","defineMIME","mod","__webpack_require__"],"mappings":"+EAOC,SAAAA,GACD,aAEAA,EAAAC,WAAA,kBACA,SAAAC,EAAAC,EAAAC,GAGA,OAFAD,EAAAE,YACAD,EAAAE,IAAAC,EACA,QAGA,SAAAC,EAAAL,EAAAC,GACA,OAAAD,EAAAM,MAAA,kBACAL,EAAAE,IAAAI,EACA,WACOP,EAAAM,MAAA,oBAAAE,KAAAR,EAAAS,SACPR,EAAAE,IAAAO,EACA,WAEAX,EAAAC,EAAAC,GAIA,SAAAM,EAAAP,EAAAC,GACA,IAAAU,EAAAX,EAAAM,MAAA,QACA,IAAAK,EAAA,OAAAZ,EAAAC,EAAAC,GACAA,EAAAE,IAAAS,EACA,IAAAC,EAAAC,OAAAH,EAAA,IAEA,OAAAE,GAAA,KAAAA,EAAA,IACA,yBACOA,GAAA,KAAAA,EAAA,IACP,mBACOA,GAAA,KAAAA,EAAA,IACP,oBACOA,GAAA,KAAAA,EAAA,IACP,wBACOA,GAAA,KAAAA,EAAA,IACP,wBAEA,QAIA,SAAAD,EAAAZ,EAAAC,GAGA,OAFAD,EAAAE,YACAD,EAAAE,IAAAC,EACA,KAGA,SAAAM,EAAAV,EAAAC,GAGA,OAFAD,EAAAe,SAAA,MACAd,EAAAE,IAAAa,EACA,WAGA,SAAAA,EAAAhB,EAAAC,GACA,OAAAD,EAAAM,MAAA,mBACAL,EAAAE,IAAAC,EACA,WAEAL,EAAAC,EAAAC,GAIA,SAAAG,EAAAJ,GACA,OAAAA,EAAAiB,QAAAjB,EAAAkB,IAAA,SACAlB,EAAAM,MAAA,SACA,QAEAN,EAAAE,YACA,UAGAF,EAAAE,YACA,UAIA,SAAAiB,EAAAnB,GAEA,OADAA,EAAAE,YACA,KAGA,OACAkB,MAAA,SAAApB,EAAAC,GACA,IAAAE,EAAAF,EAAAE,IACA,OAAAA,GAAAC,GAAAD,GAAAgB,GAAAnB,EAAAqB,WAAA,KACAlB,EAAAH,EAAAC,IAEAqB,UAAA,SAAArB,GACAA,EAAAE,IAAAgB,GAEAI,WAAA,WACA,OACApB,IAAAE,OAKAR,EAAA2B,WAAA,uBAtGAC,CAAQC,EAAQ","file":"static/js/45.4d499dd1.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"http\", function () {\n    function failFirstLine(stream, state) {\n      stream.skipToEnd();\n      state.cur = header;\n      return \"error\";\n    }\n\n    function start(stream, state) {\n      if (stream.match(/^HTTP\\/\\d\\.\\d/)) {\n        state.cur = responseStatusCode;\n        return \"keyword\";\n      } else if (stream.match(/^[A-Z]+/) && /[ \\t]/.test(stream.peek())) {\n        state.cur = requestPath;\n        return \"keyword\";\n      } else {\n        return failFirstLine(stream, state);\n      }\n    }\n\n    function responseStatusCode(stream, state) {\n      var code = stream.match(/^\\d+/);\n      if (!code) return failFirstLine(stream, state);\n      state.cur = responseStatusText;\n      var status = Number(code[0]);\n\n      if (status >= 100 && status < 200) {\n        return \"positive informational\";\n      } else if (status >= 200 && status < 300) {\n        return \"positive success\";\n      } else if (status >= 300 && status < 400) {\n        return \"positive redirect\";\n      } else if (status >= 400 && status < 500) {\n        return \"negative client-error\";\n      } else if (status >= 500 && status < 600) {\n        return \"negative server-error\";\n      } else {\n        return \"error\";\n      }\n    }\n\n    function responseStatusText(stream, state) {\n      stream.skipToEnd();\n      state.cur = header;\n      return null;\n    }\n\n    function requestPath(stream, state) {\n      stream.eatWhile(/\\S/);\n      state.cur = requestProtocol;\n      return \"string-2\";\n    }\n\n    function requestProtocol(stream, state) {\n      if (stream.match(/^HTTP\\/\\d\\.\\d$/)) {\n        state.cur = header;\n        return \"keyword\";\n      } else {\n        return failFirstLine(stream, state);\n      }\n    }\n\n    function header(stream) {\n      if (stream.sol() && !stream.eat(/[ \\t]/)) {\n        if (stream.match(/^.*?:/)) {\n          return \"atom\";\n        } else {\n          stream.skipToEnd();\n          return \"error\";\n        }\n      } else {\n        stream.skipToEnd();\n        return \"string\";\n      }\n    }\n\n    function body(stream) {\n      stream.skipToEnd();\n      return null;\n    }\n\n    return {\n      token: function token(stream, state) {\n        var cur = state.cur;\n        if (cur != header && cur != body && stream.eatSpace()) return null;\n        return cur(stream, state);\n      },\n      blankLine: function blankLine(state) {\n        state.cur = body;\n      },\n      startState: function startState() {\n        return {\n          cur: start\n        };\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"message/http\", \"http\");\n});"],"sourceRoot":""}