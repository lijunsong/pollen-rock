{"version":3,"sources":["../node_modules/codemirror/mode/tiddlywiki/tiddlywiki.js"],"names":["CodeMirror","defineMode","textwords","keywords","allTags","closeAll","list","newJournal","newTiddler","permaview","saveChanges","search","slider","tabs","tag","tagging","tags","tiddler","timeline","today","version","option","with","filter","isSpaceName","reHR","reWikiCommentStart","reWikiCommentStop","reBlockQuote","reJsCodeStart","reJsCodeStop","reXmlCodeStart","reXmlCodeStop","reCodeBlockStart","reCodeBlockStop","reUntilCodeStop","chain","stream","state","f","tokenize","tokenBase","sol","ch","peek","block","test","match","twTokenCode","next","skipToEnd","eatWhile","eat","twTokenComment","twTokenEm","twTokenUnderline","twTokenStrike","twTokenStrong","twTokenMacro","propertyIsEnumerable","current","maybeEnd","sb","startState","token","eatSpace","style","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/91.b2e45511.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/***\n    |''Name''|tiddlywiki.js|\n    |''Description''|Enables TiddlyWikiy syntax highlighting using CodeMirror|\n    |''Author''|PMario|\n    |''Version''|0.1.7|\n    |''Status''|''stable''|\n    |''Source''|[[GitHub|https://github.com/pmario/CodeMirror2/blob/tw-syntax/mode/tiddlywiki]]|\n    |''Documentation''|https://codemirror.tiddlyspace.com/|\n    |''License''|[[MIT License|http://www.opensource.org/licenses/mit-license.php]]|\n    |''CoreVersion''|2.5.0|\n    |''Requires''|codemirror.js|\n    |''Keywords''|syntax highlighting color code mirror codemirror|\n    ! Info\n    CoreVersion parameter is needed for TiddlyWiki only!\n***/\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"tiddlywiki\", function () {\n    // Tokenizer\n    var textwords = {};\n    var keywords = {\n      \"allTags\": true,\n      \"closeAll\": true,\n      \"list\": true,\n      \"newJournal\": true,\n      \"newTiddler\": true,\n      \"permaview\": true,\n      \"saveChanges\": true,\n      \"search\": true,\n      \"slider\": true,\n      \"tabs\": true,\n      \"tag\": true,\n      \"tagging\": true,\n      \"tags\": true,\n      \"tiddler\": true,\n      \"timeline\": true,\n      \"today\": true,\n      \"version\": true,\n      \"option\": true,\n      \"with\": true,\n      \"filter\": true\n    };\n    var isSpaceName = /[\\w_\\-]/i,\n        reHR = /^\\-\\-\\-\\-+$/,\n        // <hr>\n    reWikiCommentStart = /^\\/\\*\\*\\*$/,\n        // /***\n    reWikiCommentStop = /^\\*\\*\\*\\/$/,\n        // ***/\n    reBlockQuote = /^<<<$/,\n        reJsCodeStart = /^\\/\\/\\{\\{\\{$/,\n        // //{{{ js block start\n    reJsCodeStop = /^\\/\\/\\}\\}\\}$/,\n        // //}}} js stop\n    reXmlCodeStart = /^<!--\\{\\{\\{-->$/,\n        // xml block start\n    reXmlCodeStop = /^<!--\\}\\}\\}-->$/,\n        // xml stop\n    reCodeBlockStart = /^\\{\\{\\{$/,\n        // {{{ TW text div block start\n    reCodeBlockStop = /^\\}\\}\\}$/,\n        // }}} TW text stop\n    reUntilCodeStop = /.*?\\}\\}\\}/;\n\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n\n    function tokenBase(stream, state) {\n      var sol = stream.sol(),\n          ch = stream.peek();\n      state.block = false; // indicates the start of a code block.\n      // check start of  blocks\n\n      if (sol && /[<\\/\\*{}\\-]/.test(ch)) {\n        if (stream.match(reCodeBlockStart)) {\n          state.block = true;\n          return chain(stream, state, twTokenCode);\n        }\n\n        if (stream.match(reBlockQuote)) return 'quote';\n        if (stream.match(reWikiCommentStart) || stream.match(reWikiCommentStop)) return 'comment';\n        if (stream.match(reJsCodeStart) || stream.match(reJsCodeStop) || stream.match(reXmlCodeStart) || stream.match(reXmlCodeStop)) return 'comment';\n        if (stream.match(reHR)) return 'hr';\n      }\n\n      stream.next();\n\n      if (sol && /[\\/\\*!#;:>|]/.test(ch)) {\n        if (ch == \"!\") {\n          // tw header\n          stream.skipToEnd();\n          return \"header\";\n        }\n\n        if (ch == \"*\") {\n          // tw list\n          stream.eatWhile('*');\n          return \"comment\";\n        }\n\n        if (ch == \"#\") {\n          // tw numbered list\n          stream.eatWhile('#');\n          return \"comment\";\n        }\n\n        if (ch == \";\") {\n          // definition list, term\n          stream.eatWhile(';');\n          return \"comment\";\n        }\n\n        if (ch == \":\") {\n          // definition list, description\n          stream.eatWhile(':');\n          return \"comment\";\n        }\n\n        if (ch == \">\") {\n          // single line quote\n          stream.eatWhile(\">\");\n          return \"quote\";\n        }\n\n        if (ch == '|') return 'header';\n      }\n\n      if (ch == '{' && stream.match(/\\{\\{/)) return chain(stream, state, twTokenCode); // rudimentary html:// file:// link matching. TW knows much more ...\n\n      if (/[hf]/i.test(ch) && /[ti]/i.test(stream.peek()) && stream.match(/\\b(ttps?|tp|ile):\\/\\/[\\-A-Z0-9+&@#\\/%?=~_|$!:,.;]*[A-Z0-9+&@#\\/%=~_|$]/i)) return \"link\"; // just a little string indicator, don't want to have the whole string covered\n\n      if (ch == '\"') return 'string';\n      if (ch == '~') // _no_ CamelCase indicator should be bold\n        return 'brace';\n      if (/[\\[\\]]/.test(ch) && stream.match(ch)) // check for [[..]]\n        return 'brace';\n\n      if (ch == \"@\") {\n        // check for space link. TODO fix @@...@@ highlighting\n        stream.eatWhile(isSpaceName);\n        return \"link\";\n      }\n\n      if (/\\d/.test(ch)) {\n        // numbers\n        stream.eatWhile(/\\d/);\n        return \"number\";\n      }\n\n      if (ch == \"/\") {\n        // tw invisible comment\n        if (stream.eat(\"%\")) {\n          return chain(stream, state, twTokenComment);\n        } else if (stream.eat(\"/\")) {\n          //\n          return chain(stream, state, twTokenEm);\n        }\n      }\n\n      if (ch == \"_\" && stream.eat(\"_\")) // tw underline\n        return chain(stream, state, twTokenUnderline); // strikethrough and mdash handling\n\n      if (ch == \"-\" && stream.eat(\"-\")) {\n        // if strikethrough looks ugly, change CSS.\n        if (stream.peek() != ' ') return chain(stream, state, twTokenStrike); // mdash\n\n        if (stream.peek() == ' ') return 'brace';\n      }\n\n      if (ch == \"'\" && stream.eat(\"'\")) // tw bold\n        return chain(stream, state, twTokenStrong);\n      if (ch == \"<\" && stream.eat(\"<\")) // tw macro\n        return chain(stream, state, twTokenMacro); // core macro handling\n\n      stream.eatWhile(/[\\w\\$_]/);\n      return textwords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null;\n    } // tw invisible comment\n\n\n    function twTokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"%\";\n      }\n\n      return \"comment\";\n    } // tw strong / bold\n\n\n    function twTokenStrong(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"'\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"'\";\n      }\n\n      return \"strong\";\n    } // tw code\n\n\n    function twTokenCode(stream, state) {\n      var sb = state.block;\n\n      if (sb && stream.current()) {\n        return \"comment\";\n      }\n\n      if (!sb && stream.match(reUntilCodeStop)) {\n        state.tokenize = tokenBase;\n        return \"comment\";\n      }\n\n      if (sb && stream.sol() && stream.match(reCodeBlockStop)) {\n        state.tokenize = tokenBase;\n        return \"comment\";\n      }\n\n      stream.next();\n      return \"comment\";\n    } // tw em / italic\n\n\n    function twTokenEm(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"/\";\n      }\n\n      return \"em\";\n    } // tw underlined text\n\n\n    function twTokenUnderline(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"_\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"_\";\n      }\n\n      return \"underlined\";\n    } // tw strike through text looks ugly\n    // change CSS if needed\n\n\n    function twTokenStrike(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"-\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"-\";\n      }\n\n      return \"strikethrough\";\n    } // macro\n\n\n    function twTokenMacro(stream, state) {\n      if (stream.current() == '<<') {\n        return 'macro';\n      }\n\n      var ch = stream.next();\n\n      if (!ch) {\n        state.tokenize = tokenBase;\n        return null;\n      }\n\n      if (ch == \">\") {\n        if (stream.peek() == '>') {\n          stream.next();\n          state.tokenize = tokenBase;\n          return \"macro\";\n        }\n      }\n\n      stream.eatWhile(/[\\w\\$_]/);\n      return keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null;\n    } // Interface\n\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        return style;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-tiddlywiki\", \"tiddlywiki\");\n});"],"sourceRoot":""}