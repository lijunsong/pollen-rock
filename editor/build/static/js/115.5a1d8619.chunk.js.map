{"version":3,"sources":["../node_modules/codemirror/mode/rst/rst.js","../node_modules/codemirror/addon/mode/overlay.js","../node_modules/codemirror/mode/python/python.js","../node_modules/codemirror/mode/stex/stex.js"],"names":["CodeMirror","defineMode","config","options","rx_strong","rx_emphasis","rx_literal","rx_number","rx_positive","rx_negative","rx_uri","RegExp","overlay","token","stream","match","next","mode","getMode","backdrop","overlayMode","format","string","args","Array","prototype","slice","call","arguments","replace","n","mode_python","mode_stex","TAIL","rx_TAIL","NAME","rx_NAME","REF_NAME","TEXT1","TEXT2","rx_TEXT2","rx_section","rx_explicit","rx_link","rx_directive","rx_substitution","rx_footnote","rx_citation","rx_substitution_ref","rx_footnote_ref","rx_citation_ref","rx_link_ref1","rx_link_ref2","rx_role_pre","rx_role_suf","rx_role","rx_directive_name","rx_directive_tail","rx_substitution_text","rx_substitution_sepa","rx_substitution_name","rx_substitution_tail","rx_link_head","rx_link_name","rx_link_tail","rx_verbatim","rx_examples","to_normal","state","sol","change","to_mode","local","startState","to_explicit","phase","stage","context","current","tmp_stex","undefined","tmp","peek","to_verbatim","tmp_py","eatSpace","eol","skipToEnd","to_comment","as_block","ctx","tok","copyState","innerMode","defineMIME","mod","__webpack_require__","base","combine","basePos","baseCur","overlayPos","overlayCur","streamSeen","Math","min","start","pos","combineTokens","indent","textAfter","electricChars","blankLine","baseToken","overlayToken","wordRegexp","words","join","str","wordOperators","commonKeywords","commonBuiltins","top","scopes","length","registerHelper","concat","conf","parserConf","ERRORCLASS","delimiters","singleDelimiters","operators","singleOperators","doubleOperators","doubleDelimiters","tripleDelimiters","i","splice","hangingIndent","indentUnit","myKeywords","myBuiltins","extra_keywords","extra_builtins","py3","version","Number","identifiers","stringPrefixes","keywords","builtins","tokenBase","lastToken","indentation","type","scopeOffset","offset","lineOffset","pushPyScope","dedent","errorToken","style","tokenBaseInner","floatLiteral","eat","intLiteral","isFmtString","toLowerCase","indexOf","tokenize","delimiter","tokenOuter","charAt","substr","singleline","OUTCLASS","tokenNestedExpr","depth","inner","tokenString","eatWhile","singleLineStringErrors","isString","formatStringFactory","tokenStringFactory","pop","push","align","indented","tokenLexer","beginningOfLine","test","lambda","delimiter_index","column","pushBracketScope","external","basecolumn","addErr","Pass","scope","closing","electricInput","closeBrackets","triples","lineComment","fold","name","split","_config","parserConfig","pushCommand","command","cmdState","peekCommand","addPluginPattern","pluginName","cmdStyle","styles","this","bracketNo","argument","styleIdentifier","openBracket","closeBracket","plugins","setState","f","normal","source","plug","cmdName","beginParams","inMathMode","ch","getMostPowerful","endModeSeq","popCommand","s"],"mappings":"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","file":"static/js/115.5a1d8619.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../python/python\"), require(\"../stex/stex\"), require(\"../../addon/mode/overlay\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../python/python\", \"../stex/stex\", \"../../addon/mode/overlay\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode('rst', function (config, options) {\n    var rx_strong = /^\\*\\*[^\\*\\s](?:[^\\*]*[^\\*\\s])?\\*\\*/;\n    var rx_emphasis = /^\\*[^\\*\\s](?:[^\\*]*[^\\*\\s])?\\*/;\n    var rx_literal = /^``[^`\\s](?:[^`]*[^`\\s])``/;\n    var rx_number = /^(?:[\\d]+(?:[\\.,]\\d+)*)/;\n    var rx_positive = /^(?:\\s\\+[\\d]+(?:[\\.,]\\d+)*)/;\n    var rx_negative = /^(?:\\s\\-[\\d]+(?:[\\.,]\\d+)*)/;\n    var rx_uri_protocol = \"[Hh][Tt][Tt][Pp][Ss]?://\";\n    var rx_uri_domain = \"(?:[\\\\d\\\\w.-]+)\\\\.(?:\\\\w{2,6})\";\n    var rx_uri_path = \"(?:/[\\\\d\\\\w\\\\#\\\\%\\\\&\\\\-\\\\.\\\\,\\\\/\\\\:\\\\=\\\\?\\\\~]+)*\";\n    var rx_uri = new RegExp(\"^\" + rx_uri_protocol + rx_uri_domain + rx_uri_path);\n    var overlay = {\n      token: function token(stream) {\n        if (stream.match(rx_strong) && stream.match(/\\W+|$/, false)) return 'strong';\n        if (stream.match(rx_emphasis) && stream.match(/\\W+|$/, false)) return 'em';\n        if (stream.match(rx_literal) && stream.match(/\\W+|$/, false)) return 'string-2';\n        if (stream.match(rx_number)) return 'number';\n        if (stream.match(rx_positive)) return 'positive';\n        if (stream.match(rx_negative)) return 'negative';\n        if (stream.match(rx_uri)) return 'link';\n\n        while (stream.next() != null) {\n          if (stream.match(rx_strong, false)) break;\n          if (stream.match(rx_emphasis, false)) break;\n          if (stream.match(rx_literal, false)) break;\n          if (stream.match(rx_number, false)) break;\n          if (stream.match(rx_positive, false)) break;\n          if (stream.match(rx_negative, false)) break;\n          if (stream.match(rx_uri, false)) break;\n        }\n\n        return null;\n      }\n    };\n    var mode = CodeMirror.getMode(config, options.backdrop || 'rst-base');\n    return CodeMirror.overlayMode(mode, overlay, true); // combine\n  }, 'python', 'stex'); ///////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////////\n\n  CodeMirror.defineMode('rst-base', function (config) {\n    ///////////////////////////////////////////////////////////////////////////\n    ///////////////////////////////////////////////////////////////////////////\n    function format(string) {\n      var args = Array.prototype.slice.call(arguments, 1);\n      return string.replace(/{(\\d+)}/g, function (match, n) {\n        return typeof args[n] != 'undefined' ? args[n] : match;\n      });\n    } ///////////////////////////////////////////////////////////////////////////\n    ///////////////////////////////////////////////////////////////////////////\n\n\n    var mode_python = CodeMirror.getMode(config, 'python');\n    var mode_stex = CodeMirror.getMode(config, 'stex'); ///////////////////////////////////////////////////////////////////////////\n    ///////////////////////////////////////////////////////////////////////////\n\n    var SEPA = \"\\\\s+\";\n    var TAIL = \"(?:\\\\s*|\\\\W|$)\",\n        rx_TAIL = new RegExp(format('^{0}', TAIL));\n    var NAME = \"(?:[^\\\\W\\\\d_](?:[\\\\w!\\\"#$%&'()\\\\*\\\\+,\\\\-\\\\.\\/:;<=>\\\\?]*[^\\\\W_])?)\",\n        rx_NAME = new RegExp(format('^{0}', NAME));\n    var NAME_WWS = \"(?:[^\\\\W\\\\d_](?:[\\\\w\\\\s!\\\"#$%&'()\\\\*\\\\+,\\\\-\\\\.\\/:;<=>\\\\?]*[^\\\\W_])?)\";\n    var REF_NAME = format('(?:{0}|`{1}`)', NAME, NAME_WWS);\n    var TEXT1 = \"(?:[^\\\\s\\\\|](?:[^\\\\|]*[^\\\\s\\\\|])?)\";\n    var TEXT2 = \"(?:[^\\\\`]+)\",\n        rx_TEXT2 = new RegExp(format('^{0}', TEXT2));\n    var rx_section = new RegExp(\"^([!'#$%&\\\"()*+,-./:;<=>?@\\\\[\\\\\\\\\\\\]^_`{|}~])\\\\1{3,}\\\\s*$\");\n    var rx_explicit = new RegExp(format('^\\\\.\\\\.{0}', SEPA));\n    var rx_link = new RegExp(format('^_{0}:{1}|^__:{1}', REF_NAME, TAIL));\n    var rx_directive = new RegExp(format('^{0}::{1}', REF_NAME, TAIL));\n    var rx_substitution = new RegExp(format('^\\\\|{0}\\\\|{1}{2}::{3}', TEXT1, SEPA, REF_NAME, TAIL));\n    var rx_footnote = new RegExp(format('^\\\\[(?:\\\\d+|#{0}?|\\\\*)]{1}', REF_NAME, TAIL));\n    var rx_citation = new RegExp(format('^\\\\[{0}\\\\]{1}', REF_NAME, TAIL));\n    var rx_substitution_ref = new RegExp(format('^\\\\|{0}\\\\|', TEXT1));\n    var rx_footnote_ref = new RegExp(format('^\\\\[(?:\\\\d+|#{0}?|\\\\*)]_', REF_NAME));\n    var rx_citation_ref = new RegExp(format('^\\\\[{0}\\\\]_', REF_NAME));\n    var rx_link_ref1 = new RegExp(format('^{0}__?', REF_NAME));\n    var rx_link_ref2 = new RegExp(format('^`{0}`_', TEXT2));\n    var rx_role_pre = new RegExp(format('^:{0}:`{1}`{2}', NAME, TEXT2, TAIL));\n    var rx_role_suf = new RegExp(format('^`{1}`:{0}:{2}', NAME, TEXT2, TAIL));\n    var rx_role = new RegExp(format('^:{0}:{1}', NAME, TAIL));\n    var rx_directive_name = new RegExp(format('^{0}', REF_NAME));\n    var rx_directive_tail = new RegExp(format('^::{0}', TAIL));\n    var rx_substitution_text = new RegExp(format('^\\\\|{0}\\\\|', TEXT1));\n    var rx_substitution_sepa = new RegExp(format('^{0}', SEPA));\n    var rx_substitution_name = new RegExp(format('^{0}', REF_NAME));\n    var rx_substitution_tail = new RegExp(format('^::{0}', TAIL));\n    var rx_link_head = new RegExp(\"^_\");\n    var rx_link_name = new RegExp(format('^{0}|_', REF_NAME));\n    var rx_link_tail = new RegExp(format('^:{0}', TAIL));\n    var rx_verbatim = new RegExp('^::\\\\s*$');\n    var rx_examples = new RegExp('^\\\\s+(?:>>>|In \\\\[\\\\d+\\\\]:)\\\\s'); ///////////////////////////////////////////////////////////////////////////\n    ///////////////////////////////////////////////////////////////////////////\n\n    function to_normal(stream, state) {\n      var token = null;\n\n      if (stream.sol() && stream.match(rx_examples, false)) {\n        change(state, to_mode, {\n          mode: mode_python,\n          local: CodeMirror.startState(mode_python)\n        });\n      } else if (stream.sol() && stream.match(rx_explicit)) {\n        change(state, to_explicit);\n        token = 'meta';\n      } else if (stream.sol() && stream.match(rx_section)) {\n        change(state, to_normal);\n        token = 'header';\n      } else if (phase(state) == rx_role_pre || stream.match(rx_role_pre, false)) {\n        switch (stage(state)) {\n          case 0:\n            change(state, to_normal, context(rx_role_pre, 1));\n            stream.match(/^:/);\n            token = 'meta';\n            break;\n\n          case 1:\n            change(state, to_normal, context(rx_role_pre, 2));\n            stream.match(rx_NAME);\n            token = 'keyword';\n\n            if (stream.current().match(/^(?:math|latex)/)) {\n              state.tmp_stex = true;\n            }\n\n            break;\n\n          case 2:\n            change(state, to_normal, context(rx_role_pre, 3));\n            stream.match(/^:`/);\n            token = 'meta';\n            break;\n\n          case 3:\n            if (state.tmp_stex) {\n              state.tmp_stex = undefined;\n              state.tmp = {\n                mode: mode_stex,\n                local: CodeMirror.startState(mode_stex)\n              };\n            }\n\n            if (state.tmp) {\n              if (stream.peek() == '`') {\n                change(state, to_normal, context(rx_role_pre, 4));\n                state.tmp = undefined;\n                break;\n              }\n\n              token = state.tmp.mode.token(stream, state.tmp.local);\n              break;\n            }\n\n            change(state, to_normal, context(rx_role_pre, 4));\n            stream.match(rx_TEXT2);\n            token = 'string';\n            break;\n\n          case 4:\n            change(state, to_normal, context(rx_role_pre, 5));\n            stream.match(/^`/);\n            token = 'meta';\n            break;\n\n          case 5:\n            change(state, to_normal, context(rx_role_pre, 6));\n            stream.match(rx_TAIL);\n            break;\n\n          default:\n            change(state, to_normal);\n        }\n      } else if (phase(state) == rx_role_suf || stream.match(rx_role_suf, false)) {\n        switch (stage(state)) {\n          case 0:\n            change(state, to_normal, context(rx_role_suf, 1));\n            stream.match(/^`/);\n            token = 'meta';\n            break;\n\n          case 1:\n            change(state, to_normal, context(rx_role_suf, 2));\n            stream.match(rx_TEXT2);\n            token = 'string';\n            break;\n\n          case 2:\n            change(state, to_normal, context(rx_role_suf, 3));\n            stream.match(/^`:/);\n            token = 'meta';\n            break;\n\n          case 3:\n            change(state, to_normal, context(rx_role_suf, 4));\n            stream.match(rx_NAME);\n            token = 'keyword';\n            break;\n\n          case 4:\n            change(state, to_normal, context(rx_role_suf, 5));\n            stream.match(/^:/);\n            token = 'meta';\n            break;\n\n          case 5:\n            change(state, to_normal, context(rx_role_suf, 6));\n            stream.match(rx_TAIL);\n            break;\n\n          default:\n            change(state, to_normal);\n        }\n      } else if (phase(state) == rx_role || stream.match(rx_role, false)) {\n        switch (stage(state)) {\n          case 0:\n            change(state, to_normal, context(rx_role, 1));\n            stream.match(/^:/);\n            token = 'meta';\n            break;\n\n          case 1:\n            change(state, to_normal, context(rx_role, 2));\n            stream.match(rx_NAME);\n            token = 'keyword';\n            break;\n\n          case 2:\n            change(state, to_normal, context(rx_role, 3));\n            stream.match(/^:/);\n            token = 'meta';\n            break;\n\n          case 3:\n            change(state, to_normal, context(rx_role, 4));\n            stream.match(rx_TAIL);\n            break;\n\n          default:\n            change(state, to_normal);\n        }\n      } else if (phase(state) == rx_substitution_ref || stream.match(rx_substitution_ref, false)) {\n        switch (stage(state)) {\n          case 0:\n            change(state, to_normal, context(rx_substitution_ref, 1));\n            stream.match(rx_substitution_text);\n            token = 'variable-2';\n            break;\n\n          case 1:\n            change(state, to_normal, context(rx_substitution_ref, 2));\n            if (stream.match(/^_?_?/)) token = 'link';\n            break;\n\n          default:\n            change(state, to_normal);\n        }\n      } else if (stream.match(rx_footnote_ref)) {\n        change(state, to_normal);\n        token = 'quote';\n      } else if (stream.match(rx_citation_ref)) {\n        change(state, to_normal);\n        token = 'quote';\n      } else if (stream.match(rx_link_ref1)) {\n        change(state, to_normal);\n\n        if (!stream.peek() || stream.peek().match(/^\\W$/)) {\n          token = 'link';\n        }\n      } else if (phase(state) == rx_link_ref2 || stream.match(rx_link_ref2, false)) {\n        switch (stage(state)) {\n          case 0:\n            if (!stream.peek() || stream.peek().match(/^\\W$/)) {\n              change(state, to_normal, context(rx_link_ref2, 1));\n            } else {\n              stream.match(rx_link_ref2);\n            }\n\n            break;\n\n          case 1:\n            change(state, to_normal, context(rx_link_ref2, 2));\n            stream.match(/^`/);\n            token = 'link';\n            break;\n\n          case 2:\n            change(state, to_normal, context(rx_link_ref2, 3));\n            stream.match(rx_TEXT2);\n            break;\n\n          case 3:\n            change(state, to_normal, context(rx_link_ref2, 4));\n            stream.match(/^`_/);\n            token = 'link';\n            break;\n\n          default:\n            change(state, to_normal);\n        }\n      } else if (stream.match(rx_verbatim)) {\n        change(state, to_verbatim);\n      } else {\n        if (stream.next()) change(state, to_normal);\n      }\n\n      return token;\n    } ///////////////////////////////////////////////////////////////////////////\n    ///////////////////////////////////////////////////////////////////////////\n\n\n    function to_explicit(stream, state) {\n      var token = null;\n\n      if (phase(state) == rx_substitution || stream.match(rx_substitution, false)) {\n        switch (stage(state)) {\n          case 0:\n            change(state, to_explicit, context(rx_substitution, 1));\n            stream.match(rx_substitution_text);\n            token = 'variable-2';\n            break;\n\n          case 1:\n            change(state, to_explicit, context(rx_substitution, 2));\n            stream.match(rx_substitution_sepa);\n            break;\n\n          case 2:\n            change(state, to_explicit, context(rx_substitution, 3));\n            stream.match(rx_substitution_name);\n            token = 'keyword';\n            break;\n\n          case 3:\n            change(state, to_explicit, context(rx_substitution, 4));\n            stream.match(rx_substitution_tail);\n            token = 'meta';\n            break;\n\n          default:\n            change(state, to_normal);\n        }\n      } else if (phase(state) == rx_directive || stream.match(rx_directive, false)) {\n        switch (stage(state)) {\n          case 0:\n            change(state, to_explicit, context(rx_directive, 1));\n            stream.match(rx_directive_name);\n            token = 'keyword';\n            if (stream.current().match(/^(?:math|latex)/)) state.tmp_stex = true;else if (stream.current().match(/^python/)) state.tmp_py = true;\n            break;\n\n          case 1:\n            change(state, to_explicit, context(rx_directive, 2));\n            stream.match(rx_directive_tail);\n            token = 'meta';\n\n            if (stream.match(/^latex\\s*$/) || state.tmp_stex) {\n              state.tmp_stex = undefined;\n              change(state, to_mode, {\n                mode: mode_stex,\n                local: CodeMirror.startState(mode_stex)\n              });\n            }\n\n            break;\n\n          case 2:\n            change(state, to_explicit, context(rx_directive, 3));\n\n            if (stream.match(/^python\\s*$/) || state.tmp_py) {\n              state.tmp_py = undefined;\n              change(state, to_mode, {\n                mode: mode_python,\n                local: CodeMirror.startState(mode_python)\n              });\n            }\n\n            break;\n\n          default:\n            change(state, to_normal);\n        }\n      } else if (phase(state) == rx_link || stream.match(rx_link, false)) {\n        switch (stage(state)) {\n          case 0:\n            change(state, to_explicit, context(rx_link, 1));\n            stream.match(rx_link_head);\n            stream.match(rx_link_name);\n            token = 'link';\n            break;\n\n          case 1:\n            change(state, to_explicit, context(rx_link, 2));\n            stream.match(rx_link_tail);\n            token = 'meta';\n            break;\n\n          default:\n            change(state, to_normal);\n        }\n      } else if (stream.match(rx_footnote)) {\n        change(state, to_normal);\n        token = 'quote';\n      } else if (stream.match(rx_citation)) {\n        change(state, to_normal);\n        token = 'quote';\n      } else {\n        stream.eatSpace();\n\n        if (stream.eol()) {\n          change(state, to_normal);\n        } else {\n          stream.skipToEnd();\n          change(state, to_comment);\n          token = 'comment';\n        }\n      }\n\n      return token;\n    } ///////////////////////////////////////////////////////////////////////////\n    ///////////////////////////////////////////////////////////////////////////\n\n\n    function to_comment(stream, state) {\n      return as_block(stream, state, 'comment');\n    }\n\n    function to_verbatim(stream, state) {\n      return as_block(stream, state, 'meta');\n    }\n\n    function as_block(stream, state, token) {\n      if (stream.eol() || stream.eatSpace()) {\n        stream.skipToEnd();\n        return token;\n      } else {\n        change(state, to_normal);\n        return null;\n      }\n    } ///////////////////////////////////////////////////////////////////////////\n    ///////////////////////////////////////////////////////////////////////////\n\n\n    function to_mode(stream, state) {\n      if (state.ctx.mode && state.ctx.local) {\n        if (stream.sol()) {\n          if (!stream.eatSpace()) change(state, to_normal);\n          return null;\n        }\n\n        return state.ctx.mode.token(stream, state.ctx.local);\n      }\n\n      change(state, to_normal);\n      return null;\n    } ///////////////////////////////////////////////////////////////////////////\n    ///////////////////////////////////////////////////////////////////////////\n\n\n    function context(phase, stage, mode, local) {\n      return {\n        phase: phase,\n        stage: stage,\n        mode: mode,\n        local: local\n      };\n    }\n\n    function change(state, tok, ctx) {\n      state.tok = tok;\n      state.ctx = ctx || {};\n    }\n\n    function stage(state) {\n      return state.ctx.stage || 0;\n    }\n\n    function phase(state) {\n      return state.ctx.phase;\n    } ///////////////////////////////////////////////////////////////////////////\n    ///////////////////////////////////////////////////////////////////////////\n\n\n    return {\n      startState: function startState() {\n        return {\n          tok: to_normal,\n          ctx: context(undefined, 0)\n        };\n      },\n      copyState: function copyState(state) {\n        var ctx = state.ctx,\n            tmp = state.tmp;\n        if (ctx.local) ctx = {\n          mode: ctx.mode,\n          local: CodeMirror.copyState(ctx.mode, ctx.local)\n        };\n        if (tmp) tmp = {\n          mode: tmp.mode,\n          local: CodeMirror.copyState(tmp.mode, tmp.local)\n        };\n        return {\n          tok: state.tok,\n          ctx: ctx,\n          tmp: tmp\n        };\n      },\n      innerMode: function innerMode(state) {\n        return state.tmp ? {\n          state: state.tmp.local,\n          mode: state.tmp.mode\n        } : state.ctx.mode ? {\n          state: state.ctx.local,\n          mode: state.ctx.mode\n        } : null;\n      },\n      token: function token(stream, state) {\n        return state.tok(stream, state);\n      }\n    };\n  }, 'python', 'stex'); ///////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////////\n\n  CodeMirror.defineMIME('text/x-rst', 'rst'); ///////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////////\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Utility function that allows modes to be combined. The mode given\n// as the base argument takes care of most of the normal mode\n// functionality, but a second (typically simple) mode is used, which\n// can override the style of text. Both modes get to parse all of the\n// text, but when both assign a non-null style to a piece of code, the\n// overlay wins, unless the combine argument was true and not overridden,\n// or state.overlay.combineTokens was true, in which case the styles are\n// combined.\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.overlayMode = function (base, overlay, combine) {\n    return {\n      startState: function startState() {\n        return {\n          base: CodeMirror.startState(base),\n          overlay: CodeMirror.startState(overlay),\n          basePos: 0,\n          baseCur: null,\n          overlayPos: 0,\n          overlayCur: null,\n          streamSeen: null\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          base: CodeMirror.copyState(base, state.base),\n          overlay: CodeMirror.copyState(overlay, state.overlay),\n          basePos: state.basePos,\n          baseCur: null,\n          overlayPos: state.overlayPos,\n          overlayCur: null\n        };\n      },\n      token: function token(stream, state) {\n        if (stream != state.streamSeen || Math.min(state.basePos, state.overlayPos) < stream.start) {\n          state.streamSeen = stream;\n          state.basePos = state.overlayPos = stream.start;\n        }\n\n        if (stream.start == state.basePos) {\n          state.baseCur = base.token(stream, state.base);\n          state.basePos = stream.pos;\n        }\n\n        if (stream.start == state.overlayPos) {\n          stream.pos = stream.start;\n          state.overlayCur = overlay.token(stream, state.overlay);\n          state.overlayPos = stream.pos;\n        }\n\n        stream.pos = Math.min(state.basePos, state.overlayPos); // state.overlay.combineTokens always takes precedence over combine,\n        // unless set to null\n\n        if (state.overlayCur == null) return state.baseCur;else if (state.baseCur != null && state.overlay.combineTokens || combine && state.overlay.combineTokens == null) return state.baseCur + \" \" + state.overlayCur;else return state.overlayCur;\n      },\n      indent: base.indent && function (state, textAfter) {\n        return base.indent(state.base, textAfter);\n      },\n      electricChars: base.electricChars,\n      innerMode: function innerMode(state) {\n        return {\n          state: state.base,\n          mode: base\n        };\n      },\n      blankLine: function blankLine(state) {\n        var baseToken, overlayToken;\n        if (base.blankLine) baseToken = base.blankLine(state.base);\n        if (overlay.blankLine) overlayToken = overlay.blankLine(state.overlay);\n        return overlayToken == null ? baseToken : combine && baseToken != null ? baseToken + \" \" + overlayToken : overlayToken;\n      }\n    };\n  };\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\n  var commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\", \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\", \"for\", \"from\", \"global\", \"if\", \"import\", \"lambda\", \"pass\", \"raise\", \"return\", \"try\", \"while\", \"with\", \"yield\", \"in\"];\n  var commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\", \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\", \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\", \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\", \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\", \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\", \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\", \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\", \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\", \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\", \"Ellipsis\", \"__debug__\"];\n  CodeMirror.registerHelper(\"hintWords\", \"python\", commonKeywords.concat(commonBuiltins));\n\n  function top(state) {\n    return state.scopes[state.scopes.length - 1];\n  }\n\n  CodeMirror.defineMode(\"python\", function (conf, parserConf) {\n    var ERRORCLASS = \"error\";\n    var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/; //               (Backwards-compatiblity with old, cumbersome config system)\n\n    var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters, parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@])/];\n\n    for (var i = 0; i < operators.length; i++) {\n      if (!operators[i]) operators.splice(i--, 1);\n    }\n\n    var hangingIndent = parserConf.hangingIndent || conf.indentUnit;\n    var myKeywords = commonKeywords,\n        myBuiltins = commonBuiltins;\n    if (parserConf.extra_keywords != undefined) myKeywords = myKeywords.concat(parserConf.extra_keywords);\n    if (parserConf.extra_builtins != undefined) myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n    var py3 = !(parserConf.version && Number(parserConf.version) < 3);\n\n    if (py3) {\n      // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n      var identifiers = parserConf.identifiers || /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n      myKeywords = myKeywords.concat([\"nonlocal\", \"False\", \"True\", \"None\", \"async\", \"await\"]);\n      myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n      var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(fr))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    } else {\n      var identifiers = parserConf.identifiers || /^[_A-Za-z][_A-Za-z0-9]*/;\n      myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n      myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\", \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\", \"unichr\", \"unicode\", \"xrange\", \"False\", \"True\", \"None\"]);\n      var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    }\n\n    var keywords = wordRegexp(myKeywords);\n    var builtins = wordRegexp(myBuiltins); // tokenizers\n\n    function tokenBase(stream, state) {\n      var sol = stream.sol() && state.lastToken != \"\\\\\";\n      if (sol) state.indent = stream.indentation(); // Handle scope changes\n\n      if (sol && top(state).type == \"py\") {\n        var scopeOffset = top(state).offset;\n\n        if (stream.eatSpace()) {\n          var lineOffset = stream.indentation();\n          if (lineOffset > scopeOffset) pushPyScope(state);else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\") state.errorToken = true;\n          return null;\n        } else {\n          var style = tokenBaseInner(stream, state);\n          if (scopeOffset > 0 && dedent(stream, state)) style += \" \" + ERRORCLASS;\n          return style;\n        }\n      }\n\n      return tokenBaseInner(stream, state);\n    }\n\n    function tokenBaseInner(stream, state) {\n      if (stream.eatSpace()) return null; // Handle Comments\n\n      if (stream.match(/^#.*/)) return \"comment\"; // Handle Number Literals\n\n      if (stream.match(/^[0-9\\.]/, false)) {\n        var floatLiteral = false; // Floats\n\n        if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) {\n          floatLiteral = true;\n        }\n\n        if (stream.match(/^[\\d_]+\\.\\d*/)) {\n          floatLiteral = true;\n        }\n\n        if (stream.match(/^\\.\\d+/)) {\n          floatLiteral = true;\n        }\n\n        if (floatLiteral) {\n          // Float literals may be \"imaginary\"\n          stream.eat(/J/i);\n          return \"number\";\n        } // Integers\n\n\n        var intLiteral = false; // Hex\n\n        if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true; // Binary\n\n        if (stream.match(/^0b[01_]+/i)) intLiteral = true; // Octal\n\n        if (stream.match(/^0o[0-7_]+/i)) intLiteral = true; // Decimal\n\n        if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n          // Decimal literals may be \"imaginary\"\n          stream.eat(/J/i); // TODO - Can you have imaginary longs?\n\n          intLiteral = true;\n        } // Zero by itself with no other piece of number.\n\n\n        if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n\n        if (intLiteral) {\n          // Integer literals may be \"long\"\n          stream.eat(/L/i);\n          return \"number\";\n        }\n      } // Handle Strings\n\n\n      if (stream.match(stringPrefixes)) {\n        var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n\n        if (!isFmtString) {\n          state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        } else {\n          state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        }\n      }\n\n      for (var i = 0; i < operators.length; i++) {\n        if (stream.match(operators[i])) return \"operator\";\n      }\n\n      if (stream.match(delimiters)) return \"punctuation\";\n      if (state.lastToken == \".\" && stream.match(identifiers)) return \"property\";\n      if (stream.match(keywords) || stream.match(wordOperators)) return \"keyword\";\n      if (stream.match(builtins)) return \"builtin\";\n      if (stream.match(/^(self|cls)\\b/)) return \"variable-2\";\n\n      if (stream.match(identifiers)) {\n        if (state.lastToken == \"def\" || state.lastToken == \"class\") return \"def\";\n        return \"variable\";\n      } // Handle non-detected items\n\n\n      stream.next();\n      return ERRORCLASS;\n    }\n\n    function formatStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0) {\n        delimiter = delimiter.substr(1);\n      }\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenNestedExpr(depth) {\n        return function (stream, state) {\n          var inner = tokenBaseInner(stream, state);\n\n          if (inner == \"punctuation\") {\n            if (stream.current() == \"{\") {\n              state.tokenize = tokenNestedExpr(depth + 1);\n            } else if (stream.current() == \"}\") {\n              if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1);else state.tokenize = tokenString;\n            }\n          }\n\n          return inner;\n        };\n      }\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol()) return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else if (stream.match('{{')) {\n            // ignore {{ in f-str\n            return OUTCLASS;\n          } else if (stream.match('{', false)) {\n            // switch to nested mode\n            state.tokenize = tokenNestedExpr(0);\n            if (stream.current()) return OUTCLASS;else return state.tokenize(stream, state);\n          } else if (stream.match('}}')) {\n            return OUTCLASS;\n          } else if (stream.match('}')) {\n            // single } in f-string is an error\n            return ERRORCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n\n        if (singleline) {\n          if (parserConf.singleLineStringErrors) return ERRORCLASS;else state.tokenize = tokenOuter;\n        }\n\n        return OUTCLASS;\n      }\n\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function tokenStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0) {\n        delimiter = delimiter.substr(1);\n      }\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\\\]/);\n\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol()) return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n\n        if (singleline) {\n          if (parserConf.singleLineStringErrors) return ERRORCLASS;else state.tokenize = tokenOuter;\n        }\n\n        return OUTCLASS;\n      }\n\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function pushPyScope(state) {\n      while (top(state).type != \"py\") {\n        state.scopes.pop();\n      }\n\n      state.scopes.push({\n        offset: top(state).offset + conf.indentUnit,\n        type: \"py\",\n        align: null\n      });\n    }\n\n    function pushBracketScope(stream, state, type) {\n      var align = stream.match(/^([\\s\\[\\{\\(]|#.*)*$/, false) ? null : stream.column() + 1;\n      state.scopes.push({\n        offset: state.indent + hangingIndent,\n        type: type,\n        align: align\n      });\n    }\n\n    function dedent(stream, state) {\n      var indented = stream.indentation();\n\n      while (state.scopes.length > 1 && top(state).offset > indented) {\n        if (top(state).type != \"py\") return true;\n        state.scopes.pop();\n      }\n\n      return top(state).offset != indented;\n    }\n\n    function tokenLexer(stream, state) {\n      if (stream.sol()) state.beginningOfLine = true;\n      var style = state.tokenize(stream, state);\n      var current = stream.current(); // Handle decorators\n\n      if (state.beginningOfLine && current == \"@\") return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n      if (/\\S/.test(current)) state.beginningOfLine = false;\n      if ((style == \"variable\" || style == \"builtin\") && state.lastToken == \"meta\") style = \"meta\"; // Handle scope changes.\n\n      if (current == \"pass\" || current == \"return\") state.dedent += 1;\n      if (current == \"lambda\") state.lambda = true;\n      if (current == \":\" && !state.lambda && top(state).type == \"py\") pushPyScope(state);\n\n      if (current.length == 1 && !/string|comment/.test(style)) {\n        var delimiter_index = \"[({\".indexOf(current);\n        if (delimiter_index != -1) pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index + 1));\n        delimiter_index = \"])}\".indexOf(current);\n\n        if (delimiter_index != -1) {\n          if (top(state).type == current) state.indent = state.scopes.pop().offset - hangingIndent;else return ERRORCLASS;\n        }\n      }\n\n      if (state.dedent > 0 && stream.eol() && top(state).type == \"py\") {\n        if (state.scopes.length > 1) state.scopes.pop();\n        state.dedent -= 1;\n      }\n\n      return style;\n    }\n\n    var external = {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: tokenBase,\n          scopes: [{\n            offset: basecolumn || 0,\n            type: \"py\",\n            align: null\n          }],\n          indent: basecolumn || 0,\n          lastToken: null,\n          lambda: false,\n          dedent: 0\n        };\n      },\n      token: function token(stream, state) {\n        var addErr = state.errorToken;\n        if (addErr) state.errorToken = false;\n        var style = tokenLexer(stream, state);\n        if (style && style != \"comment\") state.lastToken = style == \"keyword\" || style == \"punctuation\" ? stream.current() : style;\n        if (style == \"punctuation\") style = null;\n        if (stream.eol() && state.lambda) state.lambda = false;\n        return addErr ? style + \" \" + ERRORCLASS : style;\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize != tokenBase) return state.tokenize.isString ? CodeMirror.Pass : 0;\n        var scope = top(state),\n            closing = scope.type == textAfter.charAt(0);\n        if (scope.align != null) return scope.align - (closing ? 1 : 0);else return scope.offset - (closing ? hangingIndent : 0);\n      },\n      electricInput: /^\\s*[\\}\\]\\)]$/,\n      closeBrackets: {\n        triples: \"'\\\"\"\n      },\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n    return external;\n  });\n  CodeMirror.defineMIME(\"text/x-python\", \"python\");\n\n  var words = function words(str) {\n    return str.split(\" \");\n  };\n\n  CodeMirror.defineMIME(\"text/x-cython\", {\n    name: \"python\",\n    extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \" + \"extern gil include nogil property public \" + \"readonly struct union DEF IF ELIF ELSE\")\n  });\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\n * Author: Constantin Jucovschi (c.jucovschi@jacobs-university.de)\n * Licence: MIT\n */\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"stex\", function (_config, parserConfig) {\n    \"use strict\";\n\n    function pushCommand(state, command) {\n      state.cmdState.push(command);\n    }\n\n    function peekCommand(state) {\n      if (state.cmdState.length > 0) {\n        return state.cmdState[state.cmdState.length - 1];\n      } else {\n        return null;\n      }\n    }\n\n    function popCommand(state) {\n      var plug = state.cmdState.pop();\n\n      if (plug) {\n        plug.closeBracket();\n      }\n    } // returns the non-default plugin closest to the end of the list\n\n\n    function getMostPowerful(state) {\n      var context = state.cmdState;\n\n      for (var i = context.length - 1; i >= 0; i--) {\n        var plug = context[i];\n\n        if (plug.name == \"DEFAULT\") {\n          continue;\n        }\n\n        return plug;\n      }\n\n      return {\n        styleIdentifier: function styleIdentifier() {\n          return null;\n        }\n      };\n    }\n\n    function addPluginPattern(pluginName, cmdStyle, styles) {\n      return function () {\n        this.name = pluginName;\n        this.bracketNo = 0;\n        this.style = cmdStyle;\n        this.styles = styles;\n        this.argument = null; // \\begin and \\end have arguments that follow. These are stored in the plugin\n\n        this.styleIdentifier = function () {\n          return this.styles[this.bracketNo - 1] || null;\n        };\n\n        this.openBracket = function () {\n          this.bracketNo++;\n          return \"bracket\";\n        };\n\n        this.closeBracket = function () {};\n      };\n    }\n\n    var plugins = {};\n    plugins[\"importmodule\"] = addPluginPattern(\"importmodule\", \"tag\", [\"string\", \"builtin\"]);\n    plugins[\"documentclass\"] = addPluginPattern(\"documentclass\", \"tag\", [\"\", \"atom\"]);\n    plugins[\"usepackage\"] = addPluginPattern(\"usepackage\", \"tag\", [\"atom\"]);\n    plugins[\"begin\"] = addPluginPattern(\"begin\", \"tag\", [\"atom\"]);\n    plugins[\"end\"] = addPluginPattern(\"end\", \"tag\", [\"atom\"]);\n    plugins[\"label\"] = addPluginPattern(\"label\", \"tag\", [\"atom\"]);\n    plugins[\"ref\"] = addPluginPattern(\"ref\", \"tag\", [\"atom\"]);\n    plugins[\"eqref\"] = addPluginPattern(\"eqref\", \"tag\", [\"atom\"]);\n    plugins[\"cite\"] = addPluginPattern(\"cite\", \"tag\", [\"atom\"]);\n    plugins[\"bibitem\"] = addPluginPattern(\"bibitem\", \"tag\", [\"atom\"]);\n    plugins[\"Bibitem\"] = addPluginPattern(\"Bibitem\", \"tag\", [\"atom\"]);\n    plugins[\"RBibitem\"] = addPluginPattern(\"RBibitem\", \"tag\", [\"atom\"]);\n\n    plugins[\"DEFAULT\"] = function () {\n      this.name = \"DEFAULT\";\n      this.style = \"tag\";\n\n      this.styleIdentifier = this.openBracket = this.closeBracket = function () {};\n    };\n\n    function setState(state, f) {\n      state.f = f;\n    } // called when in a normal (no environment) context\n\n\n    function normal(source, state) {\n      var plug; // Do we look like '\\command' ?  If so, attempt to apply the plugin 'command'\n\n      if (source.match(/^\\\\[a-zA-Z@]+/)) {\n        var cmdName = source.current().slice(1);\n        plug = plugins[cmdName] || plugins[\"DEFAULT\"];\n        plug = new plug();\n        pushCommand(state, plug);\n        setState(state, beginParams);\n        return plug.style;\n      } // escape characters\n\n\n      if (source.match(/^\\\\[$&%#{}_]/)) {\n        return \"tag\";\n      } // white space control characters\n\n\n      if (source.match(/^\\\\[,;!\\/\\\\]/)) {\n        return \"tag\";\n      } // find if we're starting various math modes\n\n\n      if (source.match(\"\\\\[\")) {\n        setState(state, function (source, state) {\n          return inMathMode(source, state, \"\\\\]\");\n        });\n        return \"keyword\";\n      }\n\n      if (source.match(\"\\\\(\")) {\n        setState(state, function (source, state) {\n          return inMathMode(source, state, \"\\\\)\");\n        });\n        return \"keyword\";\n      }\n\n      if (source.match(\"$$\")) {\n        setState(state, function (source, state) {\n          return inMathMode(source, state, \"$$\");\n        });\n        return \"keyword\";\n      }\n\n      if (source.match(\"$\")) {\n        setState(state, function (source, state) {\n          return inMathMode(source, state, \"$\");\n        });\n        return \"keyword\";\n      }\n\n      var ch = source.next();\n\n      if (ch == \"%\") {\n        source.skipToEnd();\n        return \"comment\";\n      } else if (ch == '}' || ch == ']') {\n        plug = peekCommand(state);\n\n        if (plug) {\n          plug.closeBracket(ch);\n          setState(state, beginParams);\n        } else {\n          return \"error\";\n        }\n\n        return \"bracket\";\n      } else if (ch == '{' || ch == '[') {\n        plug = plugins[\"DEFAULT\"];\n        plug = new plug();\n        pushCommand(state, plug);\n        return \"bracket\";\n      } else if (/\\d/.test(ch)) {\n        source.eatWhile(/[\\w.%]/);\n        return \"atom\";\n      } else {\n        source.eatWhile(/[\\w\\-_]/);\n        plug = getMostPowerful(state);\n\n        if (plug.name == 'begin') {\n          plug.argument = source.current();\n        }\n\n        return plug.styleIdentifier();\n      }\n    }\n\n    function inMathMode(source, state, endModeSeq) {\n      if (source.eatSpace()) {\n        return null;\n      }\n\n      if (endModeSeq && source.match(endModeSeq)) {\n        setState(state, normal);\n        return \"keyword\";\n      }\n\n      if (source.match(/^\\\\[a-zA-Z@]+/)) {\n        return \"tag\";\n      }\n\n      if (source.match(/^[a-zA-Z]+/)) {\n        return \"variable-2\";\n      } // escape characters\n\n\n      if (source.match(/^\\\\[$&%#{}_]/)) {\n        return \"tag\";\n      } // white space control characters\n\n\n      if (source.match(/^\\\\[,;!\\/]/)) {\n        return \"tag\";\n      } // special math-mode characters\n\n\n      if (source.match(/^[\\^_&]/)) {\n        return \"tag\";\n      } // non-special characters\n\n\n      if (source.match(/^[+\\-<>|=,\\/@!*:;'\"`~#?]/)) {\n        return null;\n      }\n\n      if (source.match(/^(\\d+\\.\\d*|\\d*\\.\\d+|\\d+)/)) {\n        return \"number\";\n      }\n\n      var ch = source.next();\n\n      if (ch == \"{\" || ch == \"}\" || ch == \"[\" || ch == \"]\" || ch == \"(\" || ch == \")\") {\n        return \"bracket\";\n      }\n\n      if (ch == \"%\") {\n        source.skipToEnd();\n        return \"comment\";\n      }\n\n      return \"error\";\n    }\n\n    function beginParams(source, state) {\n      var ch = source.peek(),\n          lastPlug;\n\n      if (ch == '{' || ch == '[') {\n        lastPlug = peekCommand(state);\n        lastPlug.openBracket(ch);\n        source.eat(ch);\n        setState(state, normal);\n        return \"bracket\";\n      }\n\n      if (/[ \\t\\r]/.test(ch)) {\n        source.eat(ch);\n        return null;\n      }\n\n      setState(state, normal);\n      popCommand(state);\n      return normal(source, state);\n    }\n\n    return {\n      startState: function startState() {\n        var f = parserConfig.inMathMode ? function (source, state) {\n          return inMathMode(source, state);\n        } : normal;\n        return {\n          cmdState: [],\n          f: f\n        };\n      },\n      copyState: function copyState(s) {\n        return {\n          cmdState: s.cmdState.slice(),\n          f: s.f\n        };\n      },\n      token: function token(stream, state) {\n        return state.f(stream, state);\n      },\n      blankLine: function blankLine(state) {\n        state.f = normal;\n        state.cmdState.length = 0;\n      },\n      lineComment: \"%\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-stex\", \"stex\");\n  CodeMirror.defineMIME(\"text/x-latex\", \"stex\");\n});"],"sourceRoot":""}