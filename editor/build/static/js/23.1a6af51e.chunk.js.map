{"version":3,"sources":["../node_modules/codemirror/mode/dtd/dtd.js"],"names":["CodeMirror","defineMode","config","type","indentUnit","ret","style","tp","tokenBase","stream","state","quote","terminator","ch","next","eat","tokenize","eol","match","eatWhile","escaped","sc","current","substr","length","backUp","tokenSGMLComment","dashes","startState","base","baseIndent","stack","token","eatSpace","context","push","pop","indent","textAfter","n","electricChars","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/23.1a6af51e.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\n  DTD mode\n  Ported to CodeMirror by Peter Kroon <plakroon@gmail.com>\n  Report bugs/issues here: https://github.com/codemirror/CodeMirror/issues\n  GitHub: @peterkroon\n*/\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"dtd\", function (config) {\n    var indentUnit = config.indentUnit,\n        type;\n\n    function ret(style, tp) {\n      type = tp;\n      return style;\n    }\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \"<\" && stream.eat(\"!\")) {\n        if (stream.eatWhile(/[\\-]/)) {\n          state.tokenize = tokenSGMLComment;\n          return tokenSGMLComment(stream, state);\n        } else if (stream.eatWhile(/[\\w]/)) return ret(\"keyword\", \"doindent\");\n      } else if (ch == \"<\" && stream.eat(\"?\")) {\n        //xml declaration\n        state.tokenize = inBlock(\"meta\", \"?>\");\n        return ret(\"meta\", ch);\n      } else if (ch == \"#\" && stream.eatWhile(/[\\w]/)) return ret(\"atom\", \"tag\");else if (ch == \"|\") return ret(\"keyword\", \"seperator\");else if (ch.match(/[\\(\\)\\[\\]\\-\\.,\\+\\?>]/)) return ret(null, ch); //if(ch === \">\") return ret(null, \"endtag\"); else\n      else if (ch.match(/[\\[\\]]/)) return ret(\"rule\", ch);else if (ch == \"\\\"\" || ch == \"'\") {\n          state.tokenize = tokenString(ch);\n          return state.tokenize(stream, state);\n        } else if (stream.eatWhile(/[a-zA-Z\\?\\+\\d]/)) {\n          var sc = stream.current();\n          if (sc.substr(sc.length - 1, sc.length).match(/\\?|\\+/) !== null) stream.backUp(1);\n          return ret(\"tag\", \"tag\");\n        } else if (ch == \"%\" || ch == \"*\") return ret(\"number\", \"number\");else {\n          stream.eatWhile(/[\\w\\\\\\-_%.{,]/);\n          return ret(null, null);\n        }\n    }\n\n    function tokenSGMLComment(stream, state) {\n      var dashes = 0,\n          ch;\n\n      while ((ch = stream.next()) != null) {\n        if (dashes >= 2 && ch == \">\") {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        dashes = ch == \"-\" ? dashes + 1 : 0;\n      }\n\n      return ret(\"comment\", \"comment\");\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && !escaped) {\n            state.tokenize = tokenBase;\n            break;\n          }\n\n          escaped = !escaped && ch == \"\\\\\";\n        }\n\n        return ret(\"string\", \"tag\");\n      };\n    }\n\n    function inBlock(style, terminator) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = tokenBase;\n            break;\n          }\n\n          stream.next();\n        }\n\n        return style;\n      };\n    }\n\n    return {\n      startState: function startState(base) {\n        return {\n          tokenize: tokenBase,\n          baseIndent: base || 0,\n          stack: []\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        var context = state.stack[state.stack.length - 1];\n        if (stream.current() == \"[\" || type === \"doindent\" || type == \"[\") state.stack.push(\"rule\");else if (type === \"endtag\") state.stack[state.stack.length - 1] = \"endtag\";else if (stream.current() == \"]\" || type == \"]\" || type == \">\" && context == \"rule\") state.stack.pop();else if (type == \"[\") state.stack.push(\"[\");\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        var n = state.stack.length;\n        if (textAfter.match(/\\]\\s+|\\]/)) n = n - 1;else if (textAfter.substr(textAfter.length - 1, textAfter.length) === \">\") {\n          if (textAfter.substr(0, 1) === \"<\") {} else if (type == \"doindent\" && textAfter.length > 1) {} else if (type == \"doindent\") n--;else if (type == \">\" && textAfter.length > 1) {} else if (type == \"tag\" && textAfter !== \">\") {} else if (type == \"tag\" && state.stack[state.stack.length - 1] == \"rule\") n--;else if (type == \"tag\") n++;else if (textAfter === \">\" && state.stack[state.stack.length - 1] == \"rule\" && type === \">\") n--;else if (textAfter === \">\" && state.stack[state.stack.length - 1] == \"rule\") {} else if (textAfter.substr(0, 1) !== \"<\" && textAfter.substr(0, 1) === \">\") n = n - 1;else if (textAfter === \">\") {} else n = n - 1; //over rule them all\n\n\n          if (type == null || type == \"]\") n--;\n        }\n        return state.baseIndent + n * indentUnit;\n      },\n      electricChars: \"]>\"\n    };\n  });\n  CodeMirror.defineMIME(\"application/xml-dtd\", \"dtd\");\n});"],"sourceRoot":""}