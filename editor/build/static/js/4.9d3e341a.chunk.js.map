{"version":3,"sources":["../node_modules/codemirror/mode/stylus/stylus.js"],"names":["CodeMirror","defineMode","config","ch","style","type","override","indentUnit","indentUnitString","tagKeywords","keySet","tagKeywords_","tagVariablesRegexp","propertyKeywords","propertyKeywords_","nonStandardPropertyKeywords","nonStandardPropertyKeywords_","valueKeywords","valueKeywords_","colorKeywords","colorKeywords_","documentTypes","documentTypes_","documentTypesRegexp","wordRegexp","mediaFeatures","mediaFeatures_","mediaTypes","mediaTypes_","fontProperties","fontProperties_","operatorsRegexp","wordOperatorKeywordsRegexp","wordOperatorKeywords_","blockKeywords","blockKeywords_","vendorPrefixesRegexp","RegExp","commonAtoms","commonAtoms_","firstWordMatch","states","length","tokenCComment","stream","state","maybeEnd","next","tokenize","tokenString","quote","escaped","backUp","tokenParenthesized","match","Context","indent","prev","line","this","firstWord","pushContext","context","indentation","popContext","currentIndent","contextIndent","popAndPass","n","i","pass","wordIsTag","word","toLowerCase","wordIsProperty","wordIsBlock","wordIsVendorPrefix","wordAsValue","wordLC","typeIsBlock","endOfLine","typeIsInterpolation","typeIsPseudo","startOfLine","sol","string","current","replace","eol","firstWordOfLine","re","result","block","test","charAt","slice","parens","vendorPrefixes","pseudo","atBlock","hasOwnProperty","atBlock_parens","keyframes","interpolation","extend","variableName","startState","base","token","eatSpace","peek","skipToEnd","eatWhile","textAfter","cx","lineFirstWord","lineIndent","prevLineFirstWord","prevLineIndent","electricChars","lineComment","fold","hintWords","concat","words","sort","a","b","join","array","keys","registerHelper","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/4.9d3e341a.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Stylus mode created by Dmitry Kiselyov http://git.io/AaRB\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"stylus\", function (config) {\n    var indentUnit = config.indentUnit,\n        indentUnitString = '',\n        tagKeywords = keySet(tagKeywords_),\n        tagVariablesRegexp = /^(a|b|i|s|col|em)$/i,\n        propertyKeywords = keySet(propertyKeywords_),\n        nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_),\n        valueKeywords = keySet(valueKeywords_),\n        colorKeywords = keySet(colorKeywords_),\n        documentTypes = keySet(documentTypes_),\n        documentTypesRegexp = wordRegexp(documentTypes_),\n        mediaFeatures = keySet(mediaFeatures_),\n        mediaTypes = keySet(mediaTypes_),\n        fontProperties = keySet(fontProperties_),\n        operatorsRegexp = /^\\s*([.]{2,3}|&&|\\|\\||\\*\\*|[?!=:]?=|[-+*\\/%<>]=?|\\?:|\\~)/,\n        wordOperatorKeywordsRegexp = wordRegexp(wordOperatorKeywords_),\n        blockKeywords = keySet(blockKeywords_),\n        vendorPrefixesRegexp = new RegExp(/^\\-(moz|ms|o|webkit)-/i),\n        commonAtoms = keySet(commonAtoms_),\n        firstWordMatch = \"\",\n        states = {},\n        ch,\n        style,\n        type,\n        override;\n\n    while (indentUnitString.length < indentUnit) {\n      indentUnitString += ' ';\n    }\n    /**\n     * Tokenizers\n     */\n\n\n    function tokenBase(stream, state) {\n      firstWordMatch = stream.string.match(/(^[\\w-]+\\s*=\\s*$)|(^\\s*[\\w-]+\\s*=\\s*[\\w-])|(^\\s*(\\.|#|@|\\$|\\&|\\[|\\d|\\+|::?|\\{|\\>|~|\\/)?\\s*[\\w-]*([a-z0-9-]|\\*|\\/\\*)(\\(|,)?)/);\n      state.context.line.firstWord = firstWordMatch ? firstWordMatch[0].replace(/^\\s*/, \"\") : \"\";\n      state.context.line.indent = stream.indentation();\n      ch = stream.peek(); // Line comment\n\n      if (stream.match(\"//\")) {\n        stream.skipToEnd();\n        return [\"comment\", \"comment\"];\n      } // Block comment\n\n\n      if (stream.match(\"/*\")) {\n        state.tokenize = tokenCComment;\n        return tokenCComment(stream, state);\n      } // String\n\n\n      if (ch == \"\\\"\" || ch == \"'\") {\n        stream.next();\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      } // Def\n\n\n      if (ch == \"@\") {\n        stream.next();\n        stream.eatWhile(/[\\w\\\\-]/);\n        return [\"def\", stream.current()];\n      } // ID selector or Hex color\n\n\n      if (ch == \"#\") {\n        stream.next(); // Hex color\n\n        if (stream.match(/^[0-9a-f]{3}([0-9a-f]([0-9a-f]{2}){0,2})?\\b/i)) {\n          return [\"atom\", \"atom\"];\n        } // ID selector\n\n\n        if (stream.match(/^[a-z][\\w-]*/i)) {\n          return [\"builtin\", \"hash\"];\n        }\n      } // Vendor prefixes\n\n\n      if (stream.match(vendorPrefixesRegexp)) {\n        return [\"meta\", \"vendor-prefixes\"];\n      } // Numbers\n\n\n      if (stream.match(/^-?[0-9]?\\.?[0-9]/)) {\n        stream.eatWhile(/[a-z%]/i);\n        return [\"number\", \"unit\"];\n      } // !important|optional\n\n\n      if (ch == \"!\") {\n        stream.next();\n        return [stream.match(/^(important|optional)/i) ? \"keyword\" : \"operator\", \"important\"];\n      } // Class\n\n\n      if (ch == \".\" && stream.match(/^\\.[a-z][\\w-]*/i)) {\n        return [\"qualifier\", \"qualifier\"];\n      } // url url-prefix domain regexp\n\n\n      if (stream.match(documentTypesRegexp)) {\n        if (stream.peek() == \"(\") state.tokenize = tokenParenthesized;\n        return [\"property\", \"word\"];\n      } // Mixins / Functions\n\n\n      if (stream.match(/^[a-z][\\w-]*\\(/i)) {\n        stream.backUp(1);\n        return [\"keyword\", \"mixin\"];\n      } // Block mixins\n\n\n      if (stream.match(/^(\\+|-)[a-z][\\w-]*\\(/i)) {\n        stream.backUp(1);\n        return [\"keyword\", \"block-mixin\"];\n      } // Parent Reference BEM naming\n\n\n      if (stream.string.match(/^\\s*&/) && stream.match(/^[-_]+[a-z][\\w-]*/)) {\n        return [\"qualifier\", \"qualifier\"];\n      } // / Root Reference & Parent Reference\n\n\n      if (stream.match(/^(\\/|&)(-|_|:|\\.|#|[a-z])/)) {\n        stream.backUp(1);\n        return [\"variable-3\", \"reference\"];\n      }\n\n      if (stream.match(/^&{1}\\s*$/)) {\n        return [\"variable-3\", \"reference\"];\n      } // Word operator\n\n\n      if (stream.match(wordOperatorKeywordsRegexp)) {\n        return [\"operator\", \"operator\"];\n      } // Word\n\n\n      if (stream.match(/^\\$?[-_]*[a-z0-9]+[\\w-]*/i)) {\n        // Variable\n        if (stream.match(/^(\\.|\\[)[\\w-\\'\\\"\\]]+/i, false)) {\n          if (!wordIsTag(stream.current())) {\n            stream.match(/\\./);\n            return [\"variable-2\", \"variable-name\"];\n          }\n        }\n\n        return [\"variable-2\", \"word\"];\n      } // Operators\n\n\n      if (stream.match(operatorsRegexp)) {\n        return [\"operator\", stream.current()];\n      } // Delimiters\n\n\n      if (/[:;,{}\\[\\]\\(\\)]/.test(ch)) {\n        stream.next();\n        return [null, ch];\n      } // Non-detected items\n\n\n      stream.next();\n      return [null, null];\n    }\n    /**\n     * Token comment\n     */\n\n\n    function tokenCComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while ((ch = stream.next()) != null) {\n        if (maybeEnd && ch == \"/\") {\n          state.tokenize = null;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return [\"comment\", \"comment\"];\n    }\n    /**\n     * Token string\n     */\n\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && !escaped) {\n            if (quote == \")\") stream.backUp(1);\n            break;\n          }\n\n          escaped = !escaped && ch == \"\\\\\";\n        }\n\n        if (ch == quote || !escaped && quote != \")\") state.tokenize = null;\n        return [\"string\", \"string\"];\n      };\n    }\n    /**\n     * Token parenthesized\n     */\n\n\n    function tokenParenthesized(stream, state) {\n      stream.next(); // Must be \"(\"\n\n      if (!stream.match(/\\s*[\\\"\\')]/, false)) state.tokenize = tokenString(\")\");else state.tokenize = null;\n      return [null, \"(\"];\n    }\n    /**\n     * Context management\n     */\n\n\n    function Context(type, indent, prev, line) {\n      this.type = type;\n      this.indent = indent;\n      this.prev = prev;\n      this.line = line || {\n        firstWord: \"\",\n        indent: 0\n      };\n    }\n\n    function pushContext(state, stream, type, indent) {\n      indent = indent >= 0 ? indent : indentUnit;\n      state.context = new Context(type, stream.indentation() + indent, state.context);\n      return type;\n    }\n\n    function popContext(state, currentIndent) {\n      var contextIndent = state.context.indent - indentUnit;\n      currentIndent = currentIndent || false;\n      state.context = state.context.prev;\n      if (currentIndent) state.context.indent = contextIndent;\n      return state.context.type;\n    }\n\n    function pass(type, stream, state) {\n      return states[state.context.type](type, stream, state);\n    }\n\n    function popAndPass(type, stream, state, n) {\n      for (var i = n || 1; i > 0; i--) {\n        state.context = state.context.prev;\n      }\n\n      return pass(type, stream, state);\n    }\n    /**\n     * Parser\n     */\n\n\n    function wordIsTag(word) {\n      return word.toLowerCase() in tagKeywords;\n    }\n\n    function wordIsProperty(word) {\n      word = word.toLowerCase();\n      return word in propertyKeywords || word in fontProperties;\n    }\n\n    function wordIsBlock(word) {\n      return word.toLowerCase() in blockKeywords;\n    }\n\n    function wordIsVendorPrefix(word) {\n      return word.toLowerCase().match(vendorPrefixesRegexp);\n    }\n\n    function wordAsValue(word) {\n      var wordLC = word.toLowerCase();\n      var override = \"variable-2\";\n      if (wordIsTag(word)) override = \"tag\";else if (wordIsBlock(word)) override = \"block-keyword\";else if (wordIsProperty(word)) override = \"property\";else if (wordLC in valueKeywords || wordLC in commonAtoms) override = \"atom\";else if (wordLC == \"return\" || wordLC in colorKeywords) override = \"keyword\"; // Font family\n      else if (word.match(/^[A-Z]/)) override = \"string\";\n      return override;\n    }\n\n    function typeIsBlock(type, stream) {\n      return endOfLine(stream) && (type == \"{\" || type == \"]\" || type == \"hash\" || type == \"qualifier\") || type == \"block-mixin\";\n    }\n\n    function typeIsInterpolation(type, stream) {\n      return type == \"{\" && stream.match(/^\\s*\\$?[\\w-]+/i, false);\n    }\n\n    function typeIsPseudo(type, stream) {\n      return type == \":\" && stream.match(/^[a-z-]+/, false);\n    }\n\n    function startOfLine(stream) {\n      return stream.sol() || stream.string.match(new RegExp(\"^\\\\s*\" + escapeRegExp(stream.current())));\n    }\n\n    function endOfLine(stream) {\n      return stream.eol() || stream.match(/^\\s*$/, false);\n    }\n\n    function firstWordOfLine(line) {\n      var re = /^\\s*[-_]*[a-z0-9]+[\\w-]*/i;\n      var result = typeof line == \"string\" ? line.match(re) : line.string.match(re);\n      return result ? result[0].replace(/^\\s*/, \"\") : \"\";\n    }\n    /**\n     * Block\n     */\n\n\n    states.block = function (type, stream, state) {\n      if (type == \"comment\" && startOfLine(stream) || type == \",\" && endOfLine(stream) || type == \"mixin\") {\n        return pushContext(state, stream, \"block\", 0);\n      }\n\n      if (typeIsInterpolation(type, stream)) {\n        return pushContext(state, stream, \"interpolation\");\n      }\n\n      if (endOfLine(stream) && type == \"]\") {\n        if (!/^\\s*(\\.|#|:|\\[|\\*|&)/.test(stream.string) && !wordIsTag(firstWordOfLine(stream))) {\n          return pushContext(state, stream, \"block\", 0);\n        }\n      }\n\n      if (typeIsBlock(type, stream)) {\n        return pushContext(state, stream, \"block\");\n      }\n\n      if (type == \"}\" && endOfLine(stream)) {\n        return pushContext(state, stream, \"block\", 0);\n      }\n\n      if (type == \"variable-name\") {\n        if (stream.string.match(/^\\s?\\$[\\w-\\.\\[\\]\\'\\\"]+$/) || wordIsBlock(firstWordOfLine(stream))) {\n          return pushContext(state, stream, \"variableName\");\n        } else {\n          return pushContext(state, stream, \"variableName\", 0);\n        }\n      }\n\n      if (type == \"=\") {\n        if (!endOfLine(stream) && !wordIsBlock(firstWordOfLine(stream))) {\n          return pushContext(state, stream, \"block\", 0);\n        }\n\n        return pushContext(state, stream, \"block\");\n      }\n\n      if (type == \"*\") {\n        if (endOfLine(stream) || stream.match(/\\s*(,|\\.|#|\\[|:|{)/, false)) {\n          override = \"tag\";\n          return pushContext(state, stream, \"block\");\n        }\n      }\n\n      if (typeIsPseudo(type, stream)) {\n        return pushContext(state, stream, \"pseudo\");\n      }\n\n      if (/@(font-face|media|supports|(-moz-)?document)/.test(type)) {\n        return pushContext(state, stream, endOfLine(stream) ? \"block\" : \"atBlock\");\n      }\n\n      if (/@(-(moz|ms|o|webkit)-)?keyframes$/.test(type)) {\n        return pushContext(state, stream, \"keyframes\");\n      }\n\n      if (/@extends?/.test(type)) {\n        return pushContext(state, stream, \"extend\", 0);\n      }\n\n      if (type && type.charAt(0) == \"@\") {\n        // Property Lookup\n        if (stream.indentation() > 0 && wordIsProperty(stream.current().slice(1))) {\n          override = \"variable-2\";\n          return \"block\";\n        }\n\n        if (/(@import|@require|@charset)/.test(type)) {\n          return pushContext(state, stream, \"block\", 0);\n        }\n\n        return pushContext(state, stream, \"block\");\n      }\n\n      if (type == \"reference\" && endOfLine(stream)) {\n        return pushContext(state, stream, \"block\");\n      }\n\n      if (type == \"(\") {\n        return pushContext(state, stream, \"parens\");\n      }\n\n      if (type == \"vendor-prefixes\") {\n        return pushContext(state, stream, \"vendorPrefixes\");\n      }\n\n      if (type == \"word\") {\n        var word = stream.current();\n        override = wordAsValue(word);\n\n        if (override == \"property\") {\n          if (startOfLine(stream)) {\n            return pushContext(state, stream, \"block\", 0);\n          } else {\n            override = \"atom\";\n            return \"block\";\n          }\n        }\n\n        if (override == \"tag\") {\n          // tag is a css value\n          if (/embed|menu|pre|progress|sub|table/.test(word)) {\n            if (wordIsProperty(firstWordOfLine(stream))) {\n              override = \"atom\";\n              return \"block\";\n            }\n          } // tag is an attribute\n\n\n          if (stream.string.match(new RegExp(\"\\\\[\\\\s*\" + word + \"|\" + word + \"\\\\s*\\\\]\"))) {\n            override = \"atom\";\n            return \"block\";\n          } // tag is a variable\n\n\n          if (tagVariablesRegexp.test(word)) {\n            if (startOfLine(stream) && stream.string.match(/=/) || !startOfLine(stream) && !stream.string.match(/^(\\s*\\.|#|\\&|\\[|\\/|>|\\*)/) && !wordIsTag(firstWordOfLine(stream))) {\n              override = \"variable-2\";\n              if (wordIsBlock(firstWordOfLine(stream))) return \"block\";\n              return pushContext(state, stream, \"block\", 0);\n            }\n          }\n\n          if (endOfLine(stream)) return pushContext(state, stream, \"block\");\n        }\n\n        if (override == \"block-keyword\") {\n          override = \"keyword\"; // Postfix conditionals\n\n          if (stream.current(/(if|unless)/) && !startOfLine(stream)) {\n            return \"block\";\n          }\n\n          return pushContext(state, stream, \"block\");\n        }\n\n        if (word == \"return\") return pushContext(state, stream, \"block\", 0); // Placeholder selector\n\n        if (override == \"variable-2\" && stream.string.match(/^\\s?\\$[\\w-\\.\\[\\]\\'\\\"]+$/)) {\n          return pushContext(state, stream, \"block\");\n        }\n      }\n\n      return state.context.type;\n    };\n    /**\n     * Parens\n     */\n\n\n    states.parens = function (type, stream, state) {\n      if (type == \"(\") return pushContext(state, stream, \"parens\");\n\n      if (type == \")\") {\n        if (state.context.prev.type == \"parens\") {\n          return popContext(state);\n        }\n\n        if (stream.string.match(/^[a-z][\\w-]*\\(/i) && endOfLine(stream) || wordIsBlock(firstWordOfLine(stream)) || /(\\.|#|:|\\[|\\*|&|>|~|\\+|\\/)/.test(firstWordOfLine(stream)) || !stream.string.match(/^-?[a-z][\\w-\\.\\[\\]\\'\\\"]*\\s*=/) && wordIsTag(firstWordOfLine(stream))) {\n          return pushContext(state, stream, \"block\");\n        }\n\n        if (stream.string.match(/^[\\$-]?[a-z][\\w-\\.\\[\\]\\'\\\"]*\\s*=/) || stream.string.match(/^\\s*(\\(|\\)|[0-9])/) || stream.string.match(/^\\s+[a-z][\\w-]*\\(/i) || stream.string.match(/^\\s+[\\$-]?[a-z]/i)) {\n          return pushContext(state, stream, \"block\", 0);\n        }\n\n        if (endOfLine(stream)) return pushContext(state, stream, \"block\");else return pushContext(state, stream, \"block\", 0);\n      }\n\n      if (type && type.charAt(0) == \"@\" && wordIsProperty(stream.current().slice(1))) {\n        override = \"variable-2\";\n      }\n\n      if (type == \"word\") {\n        var word = stream.current();\n        override = wordAsValue(word);\n\n        if (override == \"tag\" && tagVariablesRegexp.test(word)) {\n          override = \"variable-2\";\n        }\n\n        if (override == \"property\" || word == \"to\") override = \"atom\";\n      }\n\n      if (type == \"variable-name\") {\n        return pushContext(state, stream, \"variableName\");\n      }\n\n      if (typeIsPseudo(type, stream)) {\n        return pushContext(state, stream, \"pseudo\");\n      }\n\n      return state.context.type;\n    };\n    /**\n     * Vendor prefixes\n     */\n\n\n    states.vendorPrefixes = function (type, stream, state) {\n      if (type == \"word\") {\n        override = \"property\";\n        return pushContext(state, stream, \"block\", 0);\n      }\n\n      return popContext(state);\n    };\n    /**\n     * Pseudo\n     */\n\n\n    states.pseudo = function (type, stream, state) {\n      if (!wordIsProperty(firstWordOfLine(stream.string))) {\n        stream.match(/^[a-z-]+/);\n        override = \"variable-3\";\n        if (endOfLine(stream)) return pushContext(state, stream, \"block\");\n        return popContext(state);\n      }\n\n      return popAndPass(type, stream, state);\n    };\n    /**\n     * atBlock\n     */\n\n\n    states.atBlock = function (type, stream, state) {\n      if (type == \"(\") return pushContext(state, stream, \"atBlock_parens\");\n\n      if (typeIsBlock(type, stream)) {\n        return pushContext(state, stream, \"block\");\n      }\n\n      if (typeIsInterpolation(type, stream)) {\n        return pushContext(state, stream, \"interpolation\");\n      }\n\n      if (type == \"word\") {\n        var word = stream.current().toLowerCase();\n        if (/^(only|not|and|or)$/.test(word)) override = \"keyword\";else if (documentTypes.hasOwnProperty(word)) override = \"tag\";else if (mediaTypes.hasOwnProperty(word)) override = \"attribute\";else if (mediaFeatures.hasOwnProperty(word)) override = \"property\";else if (nonStandardPropertyKeywords.hasOwnProperty(word)) override = \"string-2\";else override = wordAsValue(stream.current());\n\n        if (override == \"tag\" && endOfLine(stream)) {\n          return pushContext(state, stream, \"block\");\n        }\n      }\n\n      if (type == \"operator\" && /^(not|and|or)$/.test(stream.current())) {\n        override = \"keyword\";\n      }\n\n      return state.context.type;\n    };\n\n    states.atBlock_parens = function (type, stream, state) {\n      if (type == \"{\" || type == \"}\") return state.context.type;\n\n      if (type == \")\") {\n        if (endOfLine(stream)) return pushContext(state, stream, \"block\");else return pushContext(state, stream, \"atBlock\");\n      }\n\n      if (type == \"word\") {\n        var word = stream.current().toLowerCase();\n        override = wordAsValue(word);\n        if (/^(max|min)/.test(word)) override = \"property\";\n\n        if (override == \"tag\") {\n          tagVariablesRegexp.test(word) ? override = \"variable-2\" : override = \"atom\";\n        }\n\n        return state.context.type;\n      }\n\n      return states.atBlock(type, stream, state);\n    };\n    /**\n     * Keyframes\n     */\n\n\n    states.keyframes = function (type, stream, state) {\n      if (stream.indentation() == \"0\" && (type == \"}\" && startOfLine(stream) || type == \"]\" || type == \"hash\" || type == \"qualifier\" || wordIsTag(stream.current()))) {\n        return popAndPass(type, stream, state);\n      }\n\n      if (type == \"{\") return pushContext(state, stream, \"keyframes\");\n\n      if (type == \"}\") {\n        if (startOfLine(stream)) return popContext(state, true);else return pushContext(state, stream, \"keyframes\");\n      }\n\n      if (type == \"unit\" && /^[0-9]+\\%$/.test(stream.current())) {\n        return pushContext(state, stream, \"keyframes\");\n      }\n\n      if (type == \"word\") {\n        override = wordAsValue(stream.current());\n\n        if (override == \"block-keyword\") {\n          override = \"keyword\";\n          return pushContext(state, stream, \"keyframes\");\n        }\n      }\n\n      if (/@(font-face|media|supports|(-moz-)?document)/.test(type)) {\n        return pushContext(state, stream, endOfLine(stream) ? \"block\" : \"atBlock\");\n      }\n\n      if (type == \"mixin\") {\n        return pushContext(state, stream, \"block\", 0);\n      }\n\n      return state.context.type;\n    };\n    /**\n     * Interpolation\n     */\n\n\n    states.interpolation = function (type, stream, state) {\n      if (type == \"{\") popContext(state) && pushContext(state, stream, \"block\");\n\n      if (type == \"}\") {\n        if (stream.string.match(/^\\s*(\\.|#|:|\\[|\\*|&|>|~|\\+|\\/)/i) || stream.string.match(/^\\s*[a-z]/i) && wordIsTag(firstWordOfLine(stream))) {\n          return pushContext(state, stream, \"block\");\n        }\n\n        if (!stream.string.match(/^(\\{|\\s*\\&)/) || stream.match(/\\s*[\\w-]/, false)) {\n          return pushContext(state, stream, \"block\", 0);\n        }\n\n        return pushContext(state, stream, \"block\");\n      }\n\n      if (type == \"variable-name\") {\n        return pushContext(state, stream, \"variableName\", 0);\n      }\n\n      if (type == \"word\") {\n        override = wordAsValue(stream.current());\n        if (override == \"tag\") override = \"atom\";\n      }\n\n      return state.context.type;\n    };\n    /**\n     * Extend/s\n     */\n\n\n    states.extend = function (type, stream, state) {\n      if (type == \"[\" || type == \"=\") return \"extend\";\n      if (type == \"]\") return popContext(state);\n\n      if (type == \"word\") {\n        override = wordAsValue(stream.current());\n        return \"extend\";\n      }\n\n      return popContext(state);\n    };\n    /**\n     * Variable name\n     */\n\n\n    states.variableName = function (type, stream, state) {\n      if (type == \"string\" || type == \"[\" || type == \"]\" || stream.current().match(/^(\\.|\\$)/)) {\n        if (stream.current().match(/^\\.[\\w-]+/i)) override = \"variable-2\";\n        return \"variableName\";\n      }\n\n      return popAndPass(type, stream, state);\n    };\n\n    return {\n      startState: function startState(base) {\n        return {\n          tokenize: null,\n          state: \"block\",\n          context: new Context(\"block\", base || 0, null)\n        };\n      },\n      token: function token(stream, state) {\n        if (!state.tokenize && stream.eatSpace()) return null;\n        style = (state.tokenize || tokenBase)(stream, state);\n\n        if (style && typeof style == \"object\") {\n          type = style[1];\n          style = style[0];\n        }\n\n        override = style;\n        state.state = states[state.state](type, stream, state);\n        return override;\n      },\n      indent: function indent(state, textAfter, line) {\n        var cx = state.context,\n            ch = textAfter && textAfter.charAt(0),\n            indent = cx.indent,\n            lineFirstWord = firstWordOfLine(textAfter),\n            lineIndent = line.match(/^\\s*/)[0].replace(/\\t/g, indentUnitString).length,\n            prevLineFirstWord = state.context.prev ? state.context.prev.line.firstWord : \"\",\n            prevLineIndent = state.context.prev ? state.context.prev.line.indent : lineIndent;\n\n        if (cx.prev && (ch == \"}\" && (cx.type == \"block\" || cx.type == \"atBlock\" || cx.type == \"keyframes\") || ch == \")\" && (cx.type == \"parens\" || cx.type == \"atBlock_parens\") || ch == \"{\" && cx.type == \"at\")) {\n          indent = cx.indent - indentUnit;\n        } else if (!/(\\})/.test(ch)) {\n          if (/@|\\$|\\d/.test(ch) || /^\\{/.test(textAfter) || /^\\s*\\/(\\/|\\*)/.test(textAfter) || /^\\s*\\/\\*/.test(prevLineFirstWord) || /^\\s*[\\w-\\.\\[\\]\\'\\\"]+\\s*(\\?|:|\\+)?=/i.test(textAfter) || /^(\\+|-)?[a-z][\\w-]*\\(/i.test(textAfter) || /^return/.test(textAfter) || wordIsBlock(lineFirstWord)) {\n            indent = lineIndent;\n          } else if (/(\\.|#|:|\\[|\\*|&|>|~|\\+|\\/)/.test(ch) || wordIsTag(lineFirstWord)) {\n            if (/\\,\\s*$/.test(prevLineFirstWord)) {\n              indent = prevLineIndent;\n            } else if (/^\\s+/.test(line) && (/(\\.|#|:|\\[|\\*|&|>|~|\\+|\\/)/.test(prevLineFirstWord) || wordIsTag(prevLineFirstWord))) {\n              indent = lineIndent <= prevLineIndent ? prevLineIndent : prevLineIndent + indentUnit;\n            } else {\n              indent = lineIndent;\n            }\n          } else if (!/,\\s*$/.test(line) && (wordIsVendorPrefix(lineFirstWord) || wordIsProperty(lineFirstWord))) {\n            if (wordIsBlock(prevLineFirstWord)) {\n              indent = lineIndent <= prevLineIndent ? prevLineIndent : prevLineIndent + indentUnit;\n            } else if (/^\\{/.test(prevLineFirstWord)) {\n              indent = lineIndent <= prevLineIndent ? lineIndent : prevLineIndent + indentUnit;\n            } else if (wordIsVendorPrefix(prevLineFirstWord) || wordIsProperty(prevLineFirstWord)) {\n              indent = lineIndent >= prevLineIndent ? prevLineIndent : lineIndent;\n            } else if (/^(\\.|#|:|\\[|\\*|&|@|\\+|\\-|>|~|\\/)/.test(prevLineFirstWord) || /=\\s*$/.test(prevLineFirstWord) || wordIsTag(prevLineFirstWord) || /^\\$[\\w-\\.\\[\\]\\'\\\"]/.test(prevLineFirstWord)) {\n              indent = prevLineIndent + indentUnit;\n            } else {\n              indent = lineIndent;\n            }\n          }\n        }\n\n        return indent;\n      },\n      electricChars: \"}\",\n      lineComment: \"//\",\n      fold: \"indent\"\n    };\n  }); // developer.mozilla.org/en-US/docs/Web/HTML/Element\n\n  var tagKeywords_ = [\"a\", \"abbr\", \"address\", \"area\", \"article\", \"aside\", \"audio\", \"b\", \"base\", \"bdi\", \"bdo\", \"bgsound\", \"blockquote\", \"body\", \"br\", \"button\", \"canvas\", \"caption\", \"cite\", \"code\", \"col\", \"colgroup\", \"data\", \"datalist\", \"dd\", \"del\", \"details\", \"dfn\", \"div\", \"dl\", \"dt\", \"em\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"i\", \"iframe\", \"img\", \"input\", \"ins\", \"kbd\", \"keygen\", \"label\", \"legend\", \"li\", \"link\", \"main\", \"map\", \"mark\", \"marquee\", \"menu\", \"menuitem\", \"meta\", \"meter\", \"nav\", \"nobr\", \"noframes\", \"noscript\", \"object\", \"ol\", \"optgroup\", \"option\", \"output\", \"p\", \"param\", \"pre\", \"progress\", \"q\", \"rp\", \"rt\", \"ruby\", \"s\", \"samp\", \"script\", \"section\", \"select\", \"small\", \"source\", \"span\", \"strong\", \"style\", \"sub\", \"summary\", \"sup\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"time\", \"tr\", \"track\", \"u\", \"ul\", \"var\", \"video\"]; // github.com/codemirror/CodeMirror/blob/master/mode/css/css.js\n\n  var documentTypes_ = [\"domain\", \"regexp\", \"url\", \"url-prefix\"];\n  var mediaTypes_ = [\"all\", \"aural\", \"braille\", \"handheld\", \"print\", \"projection\", \"screen\", \"tty\", \"tv\", \"embossed\"];\n  var mediaFeatures_ = [\"width\", \"min-width\", \"max-width\", \"height\", \"min-height\", \"max-height\", \"device-width\", \"min-device-width\", \"max-device-width\", \"device-height\", \"min-device-height\", \"max-device-height\", \"aspect-ratio\", \"min-aspect-ratio\", \"max-aspect-ratio\", \"device-aspect-ratio\", \"min-device-aspect-ratio\", \"max-device-aspect-ratio\", \"color\", \"min-color\", \"max-color\", \"color-index\", \"min-color-index\", \"max-color-index\", \"monochrome\", \"min-monochrome\", \"max-monochrome\", \"resolution\", \"min-resolution\", \"max-resolution\", \"scan\", \"grid\"];\n  var propertyKeywords_ = [\"align-content\", \"align-items\", \"align-self\", \"alignment-adjust\", \"alignment-baseline\", \"anchor-point\", \"animation\", \"animation-delay\", \"animation-direction\", \"animation-duration\", \"animation-fill-mode\", \"animation-iteration-count\", \"animation-name\", \"animation-play-state\", \"animation-timing-function\", \"appearance\", \"azimuth\", \"backface-visibility\", \"background\", \"background-attachment\", \"background-clip\", \"background-color\", \"background-image\", \"background-origin\", \"background-position\", \"background-repeat\", \"background-size\", \"baseline-shift\", \"binding\", \"bleed\", \"bookmark-label\", \"bookmark-level\", \"bookmark-state\", \"bookmark-target\", \"border\", \"border-bottom\", \"border-bottom-color\", \"border-bottom-left-radius\", \"border-bottom-right-radius\", \"border-bottom-style\", \"border-bottom-width\", \"border-collapse\", \"border-color\", \"border-image\", \"border-image-outset\", \"border-image-repeat\", \"border-image-slice\", \"border-image-source\", \"border-image-width\", \"border-left\", \"border-left-color\", \"border-left-style\", \"border-left-width\", \"border-radius\", \"border-right\", \"border-right-color\", \"border-right-style\", \"border-right-width\", \"border-spacing\", \"border-style\", \"border-top\", \"border-top-color\", \"border-top-left-radius\", \"border-top-right-radius\", \"border-top-style\", \"border-top-width\", \"border-width\", \"bottom\", \"box-decoration-break\", \"box-shadow\", \"box-sizing\", \"break-after\", \"break-before\", \"break-inside\", \"caption-side\", \"clear\", \"clip\", \"color\", \"color-profile\", \"column-count\", \"column-fill\", \"column-gap\", \"column-rule\", \"column-rule-color\", \"column-rule-style\", \"column-rule-width\", \"column-span\", \"column-width\", \"columns\", \"content\", \"counter-increment\", \"counter-reset\", \"crop\", \"cue\", \"cue-after\", \"cue-before\", \"cursor\", \"direction\", \"display\", \"dominant-baseline\", \"drop-initial-after-adjust\", \"drop-initial-after-align\", \"drop-initial-before-adjust\", \"drop-initial-before-align\", \"drop-initial-size\", \"drop-initial-value\", \"elevation\", \"empty-cells\", \"fit\", \"fit-position\", \"flex\", \"flex-basis\", \"flex-direction\", \"flex-flow\", \"flex-grow\", \"flex-shrink\", \"flex-wrap\", \"float\", \"float-offset\", \"flow-from\", \"flow-into\", \"font\", \"font-feature-settings\", \"font-family\", \"font-kerning\", \"font-language-override\", \"font-size\", \"font-size-adjust\", \"font-stretch\", \"font-style\", \"font-synthesis\", \"font-variant\", \"font-variant-alternates\", \"font-variant-caps\", \"font-variant-east-asian\", \"font-variant-ligatures\", \"font-variant-numeric\", \"font-variant-position\", \"font-weight\", \"grid\", \"grid-area\", \"grid-auto-columns\", \"grid-auto-flow\", \"grid-auto-position\", \"grid-auto-rows\", \"grid-column\", \"grid-column-end\", \"grid-column-start\", \"grid-row\", \"grid-row-end\", \"grid-row-start\", \"grid-template\", \"grid-template-areas\", \"grid-template-columns\", \"grid-template-rows\", \"hanging-punctuation\", \"height\", \"hyphens\", \"icon\", \"image-orientation\", \"image-rendering\", \"image-resolution\", \"inline-box-align\", \"justify-content\", \"left\", \"letter-spacing\", \"line-break\", \"line-height\", \"line-stacking\", \"line-stacking-ruby\", \"line-stacking-shift\", \"line-stacking-strategy\", \"list-style\", \"list-style-image\", \"list-style-position\", \"list-style-type\", \"margin\", \"margin-bottom\", \"margin-left\", \"margin-right\", \"margin-top\", \"marker-offset\", \"marks\", \"marquee-direction\", \"marquee-loop\", \"marquee-play-count\", \"marquee-speed\", \"marquee-style\", \"max-height\", \"max-width\", \"min-height\", \"min-width\", \"move-to\", \"nav-down\", \"nav-index\", \"nav-left\", \"nav-right\", \"nav-up\", \"object-fit\", \"object-position\", \"opacity\", \"order\", \"orphans\", \"outline\", \"outline-color\", \"outline-offset\", \"outline-style\", \"outline-width\", \"overflow\", \"overflow-style\", \"overflow-wrap\", \"overflow-x\", \"overflow-y\", \"padding\", \"padding-bottom\", \"padding-left\", \"padding-right\", \"padding-top\", \"page\", \"page-break-after\", \"page-break-before\", \"page-break-inside\", \"page-policy\", \"pause\", \"pause-after\", \"pause-before\", \"perspective\", \"perspective-origin\", \"pitch\", \"pitch-range\", \"play-during\", \"position\", \"presentation-level\", \"punctuation-trim\", \"quotes\", \"region-break-after\", \"region-break-before\", \"region-break-inside\", \"region-fragment\", \"rendering-intent\", \"resize\", \"rest\", \"rest-after\", \"rest-before\", \"richness\", \"right\", \"rotation\", \"rotation-point\", \"ruby-align\", \"ruby-overhang\", \"ruby-position\", \"ruby-span\", \"shape-image-threshold\", \"shape-inside\", \"shape-margin\", \"shape-outside\", \"size\", \"speak\", \"speak-as\", \"speak-header\", \"speak-numeral\", \"speak-punctuation\", \"speech-rate\", \"stress\", \"string-set\", \"tab-size\", \"table-layout\", \"target\", \"target-name\", \"target-new\", \"target-position\", \"text-align\", \"text-align-last\", \"text-decoration\", \"text-decoration-color\", \"text-decoration-line\", \"text-decoration-skip\", \"text-decoration-style\", \"text-emphasis\", \"text-emphasis-color\", \"text-emphasis-position\", \"text-emphasis-style\", \"text-height\", \"text-indent\", \"text-justify\", \"text-outline\", \"text-overflow\", \"text-shadow\", \"text-size-adjust\", \"text-space-collapse\", \"text-transform\", \"text-underline-position\", \"text-wrap\", \"top\", \"transform\", \"transform-origin\", \"transform-style\", \"transition\", \"transition-delay\", \"transition-duration\", \"transition-property\", \"transition-timing-function\", \"unicode-bidi\", \"vertical-align\", \"visibility\", \"voice-balance\", \"voice-duration\", \"voice-family\", \"voice-pitch\", \"voice-range\", \"voice-rate\", \"voice-stress\", \"voice-volume\", \"volume\", \"white-space\", \"widows\", \"width\", \"will-change\", \"word-break\", \"word-spacing\", \"word-wrap\", \"z-index\", \"clip-path\", \"clip-rule\", \"mask\", \"enable-background\", \"filter\", \"flood-color\", \"flood-opacity\", \"lighting-color\", \"stop-color\", \"stop-opacity\", \"pointer-events\", \"color-interpolation\", \"color-interpolation-filters\", \"color-rendering\", \"fill\", \"fill-opacity\", \"fill-rule\", \"image-rendering\", \"marker\", \"marker-end\", \"marker-mid\", \"marker-start\", \"shape-rendering\", \"stroke\", \"stroke-dasharray\", \"stroke-dashoffset\", \"stroke-linecap\", \"stroke-linejoin\", \"stroke-miterlimit\", \"stroke-opacity\", \"stroke-width\", \"text-rendering\", \"baseline-shift\", \"dominant-baseline\", \"glyph-orientation-horizontal\", \"glyph-orientation-vertical\", \"text-anchor\", \"writing-mode\", \"font-smoothing\", \"osx-font-smoothing\"];\n  var nonStandardPropertyKeywords_ = [\"scrollbar-arrow-color\", \"scrollbar-base-color\", \"scrollbar-dark-shadow-color\", \"scrollbar-face-color\", \"scrollbar-highlight-color\", \"scrollbar-shadow-color\", \"scrollbar-3d-light-color\", \"scrollbar-track-color\", \"shape-inside\", \"searchfield-cancel-button\", \"searchfield-decoration\", \"searchfield-results-button\", \"searchfield-results-decoration\", \"zoom\"];\n  var fontProperties_ = [\"font-family\", \"src\", \"unicode-range\", \"font-variant\", \"font-feature-settings\", \"font-stretch\", \"font-weight\", \"font-style\"];\n  var colorKeywords_ = [\"aliceblue\", \"antiquewhite\", \"aqua\", \"aquamarine\", \"azure\", \"beige\", \"bisque\", \"black\", \"blanchedalmond\", \"blue\", \"blueviolet\", \"brown\", \"burlywood\", \"cadetblue\", \"chartreuse\", \"chocolate\", \"coral\", \"cornflowerblue\", \"cornsilk\", \"crimson\", \"cyan\", \"darkblue\", \"darkcyan\", \"darkgoldenrod\", \"darkgray\", \"darkgreen\", \"darkkhaki\", \"darkmagenta\", \"darkolivegreen\", \"darkorange\", \"darkorchid\", \"darkred\", \"darksalmon\", \"darkseagreen\", \"darkslateblue\", \"darkslategray\", \"darkturquoise\", \"darkviolet\", \"deeppink\", \"deepskyblue\", \"dimgray\", \"dodgerblue\", \"firebrick\", \"floralwhite\", \"forestgreen\", \"fuchsia\", \"gainsboro\", \"ghostwhite\", \"gold\", \"goldenrod\", \"gray\", \"grey\", \"green\", \"greenyellow\", \"honeydew\", \"hotpink\", \"indianred\", \"indigo\", \"ivory\", \"khaki\", \"lavender\", \"lavenderblush\", \"lawngreen\", \"lemonchiffon\", \"lightblue\", \"lightcoral\", \"lightcyan\", \"lightgoldenrodyellow\", \"lightgray\", \"lightgreen\", \"lightpink\", \"lightsalmon\", \"lightseagreen\", \"lightskyblue\", \"lightslategray\", \"lightsteelblue\", \"lightyellow\", \"lime\", \"limegreen\", \"linen\", \"magenta\", \"maroon\", \"mediumaquamarine\", \"mediumblue\", \"mediumorchid\", \"mediumpurple\", \"mediumseagreen\", \"mediumslateblue\", \"mediumspringgreen\", \"mediumturquoise\", \"mediumvioletred\", \"midnightblue\", \"mintcream\", \"mistyrose\", \"moccasin\", \"navajowhite\", \"navy\", \"oldlace\", \"olive\", \"olivedrab\", \"orange\", \"orangered\", \"orchid\", \"palegoldenrod\", \"palegreen\", \"paleturquoise\", \"palevioletred\", \"papayawhip\", \"peachpuff\", \"peru\", \"pink\", \"plum\", \"powderblue\", \"purple\", \"rebeccapurple\", \"red\", \"rosybrown\", \"royalblue\", \"saddlebrown\", \"salmon\", \"sandybrown\", \"seagreen\", \"seashell\", \"sienna\", \"silver\", \"skyblue\", \"slateblue\", \"slategray\", \"snow\", \"springgreen\", \"steelblue\", \"tan\", \"teal\", \"thistle\", \"tomato\", \"turquoise\", \"violet\", \"wheat\", \"white\", \"whitesmoke\", \"yellow\", \"yellowgreen\"];\n  var valueKeywords_ = [\"above\", \"absolute\", \"activeborder\", \"additive\", \"activecaption\", \"afar\", \"after-white-space\", \"ahead\", \"alias\", \"all\", \"all-scroll\", \"alphabetic\", \"alternate\", \"always\", \"amharic\", \"amharic-abegede\", \"antialiased\", \"appworkspace\", \"arabic-indic\", \"armenian\", \"asterisks\", \"attr\", \"auto\", \"avoid\", \"avoid-column\", \"avoid-page\", \"avoid-region\", \"background\", \"backwards\", \"baseline\", \"below\", \"bidi-override\", \"binary\", \"bengali\", \"blink\", \"block\", \"block-axis\", \"bold\", \"bolder\", \"border\", \"border-box\", \"both\", \"bottom\", \"break\", \"break-all\", \"break-word\", \"bullets\", \"button\", \"button-bevel\", \"buttonface\", \"buttonhighlight\", \"buttonshadow\", \"buttontext\", \"calc\", \"cambodian\", \"capitalize\", \"caps-lock-indicator\", \"caption\", \"captiontext\", \"caret\", \"cell\", \"center\", \"checkbox\", \"circle\", \"cjk-decimal\", \"cjk-earthly-branch\", \"cjk-heavenly-stem\", \"cjk-ideographic\", \"clear\", \"clip\", \"close-quote\", \"col-resize\", \"collapse\", \"column\", \"compact\", \"condensed\", \"contain\", \"content\", \"contents\", \"content-box\", \"context-menu\", \"continuous\", \"copy\", \"counter\", \"counters\", \"cover\", \"crop\", \"cross\", \"crosshair\", \"currentcolor\", \"cursive\", \"cyclic\", \"dashed\", \"decimal\", \"decimal-leading-zero\", \"default\", \"default-button\", \"destination-atop\", \"destination-in\", \"destination-out\", \"destination-over\", \"devanagari\", \"disc\", \"discard\", \"disclosure-closed\", \"disclosure-open\", \"document\", \"dot-dash\", \"dot-dot-dash\", \"dotted\", \"double\", \"down\", \"e-resize\", \"ease\", \"ease-in\", \"ease-in-out\", \"ease-out\", \"element\", \"ellipse\", \"ellipsis\", \"embed\", \"end\", \"ethiopic\", \"ethiopic-abegede\", \"ethiopic-abegede-am-et\", \"ethiopic-abegede-gez\", \"ethiopic-abegede-ti-er\", \"ethiopic-abegede-ti-et\", \"ethiopic-halehame-aa-er\", \"ethiopic-halehame-aa-et\", \"ethiopic-halehame-am-et\", \"ethiopic-halehame-gez\", \"ethiopic-halehame-om-et\", \"ethiopic-halehame-sid-et\", \"ethiopic-halehame-so-et\", \"ethiopic-halehame-ti-er\", \"ethiopic-halehame-ti-et\", \"ethiopic-halehame-tig\", \"ethiopic-numeric\", \"ew-resize\", \"expanded\", \"extends\", \"extra-condensed\", \"extra-expanded\", \"fantasy\", \"fast\", \"fill\", \"fixed\", \"flat\", \"flex\", \"footnotes\", \"forwards\", \"from\", \"geometricPrecision\", \"georgian\", \"graytext\", \"groove\", \"gujarati\", \"gurmukhi\", \"hand\", \"hangul\", \"hangul-consonant\", \"hebrew\", \"help\", \"hidden\", \"hide\", \"higher\", \"highlight\", \"highlighttext\", \"hiragana\", \"hiragana-iroha\", \"horizontal\", \"hsl\", \"hsla\", \"icon\", \"ignore\", \"inactiveborder\", \"inactivecaption\", \"inactivecaptiontext\", \"infinite\", \"infobackground\", \"infotext\", \"inherit\", \"initial\", \"inline\", \"inline-axis\", \"inline-block\", \"inline-flex\", \"inline-table\", \"inset\", \"inside\", \"intrinsic\", \"invert\", \"italic\", \"japanese-formal\", \"japanese-informal\", \"justify\", \"kannada\", \"katakana\", \"katakana-iroha\", \"keep-all\", \"khmer\", \"korean-hangul-formal\", \"korean-hanja-formal\", \"korean-hanja-informal\", \"landscape\", \"lao\", \"large\", \"larger\", \"left\", \"level\", \"lighter\", \"line-through\", \"linear\", \"linear-gradient\", \"lines\", \"list-item\", \"listbox\", \"listitem\", \"local\", \"logical\", \"loud\", \"lower\", \"lower-alpha\", \"lower-armenian\", \"lower-greek\", \"lower-hexadecimal\", \"lower-latin\", \"lower-norwegian\", \"lower-roman\", \"lowercase\", \"ltr\", \"malayalam\", \"match\", \"matrix\", \"matrix3d\", \"media-controls-background\", \"media-current-time-display\", \"media-fullscreen-button\", \"media-mute-button\", \"media-play-button\", \"media-return-to-realtime-button\", \"media-rewind-button\", \"media-seek-back-button\", \"media-seek-forward-button\", \"media-slider\", \"media-sliderthumb\", \"media-time-remaining-display\", \"media-volume-slider\", \"media-volume-slider-container\", \"media-volume-sliderthumb\", \"medium\", \"menu\", \"menulist\", \"menulist-button\", \"menulist-text\", \"menulist-textfield\", \"menutext\", \"message-box\", \"middle\", \"min-intrinsic\", \"mix\", \"mongolian\", \"monospace\", \"move\", \"multiple\", \"myanmar\", \"n-resize\", \"narrower\", \"ne-resize\", \"nesw-resize\", \"no-close-quote\", \"no-drop\", \"no-open-quote\", \"no-repeat\", \"none\", \"normal\", \"not-allowed\", \"nowrap\", \"ns-resize\", \"numbers\", \"numeric\", \"nw-resize\", \"nwse-resize\", \"oblique\", \"octal\", \"open-quote\", \"optimizeLegibility\", \"optimizeSpeed\", \"oriya\", \"oromo\", \"outset\", \"outside\", \"outside-shape\", \"overlay\", \"overline\", \"padding\", \"padding-box\", \"painted\", \"page\", \"paused\", \"persian\", \"perspective\", \"plus-darker\", \"plus-lighter\", \"pointer\", \"polygon\", \"portrait\", \"pre\", \"pre-line\", \"pre-wrap\", \"preserve-3d\", \"progress\", \"push-button\", \"radial-gradient\", \"radio\", \"read-only\", \"read-write\", \"read-write-plaintext-only\", \"rectangle\", \"region\", \"relative\", \"repeat\", \"repeating-linear-gradient\", \"repeating-radial-gradient\", \"repeat-x\", \"repeat-y\", \"reset\", \"reverse\", \"rgb\", \"rgba\", \"ridge\", \"right\", \"rotate\", \"rotate3d\", \"rotateX\", \"rotateY\", \"rotateZ\", \"round\", \"row-resize\", \"rtl\", \"run-in\", \"running\", \"s-resize\", \"sans-serif\", \"scale\", \"scale3d\", \"scaleX\", \"scaleY\", \"scaleZ\", \"scroll\", \"scrollbar\", \"scroll-position\", \"se-resize\", \"searchfield\", \"searchfield-cancel-button\", \"searchfield-decoration\", \"searchfield-results-button\", \"searchfield-results-decoration\", \"semi-condensed\", \"semi-expanded\", \"separate\", \"serif\", \"show\", \"sidama\", \"simp-chinese-formal\", \"simp-chinese-informal\", \"single\", \"skew\", \"skewX\", \"skewY\", \"skip-white-space\", \"slide\", \"slider-horizontal\", \"slider-vertical\", \"sliderthumb-horizontal\", \"sliderthumb-vertical\", \"slow\", \"small\", \"small-caps\", \"small-caption\", \"smaller\", \"solid\", \"somali\", \"source-atop\", \"source-in\", \"source-out\", \"source-over\", \"space\", \"spell-out\", \"square\", \"square-button\", \"start\", \"static\", \"status-bar\", \"stretch\", \"stroke\", \"sub\", \"subpixel-antialiased\", \"super\", \"sw-resize\", \"symbolic\", \"symbols\", \"table\", \"table-caption\", \"table-cell\", \"table-column\", \"table-column-group\", \"table-footer-group\", \"table-header-group\", \"table-row\", \"table-row-group\", \"tamil\", \"telugu\", \"text\", \"text-bottom\", \"text-top\", \"textarea\", \"textfield\", \"thai\", \"thick\", \"thin\", \"threeddarkshadow\", \"threedface\", \"threedhighlight\", \"threedlightshadow\", \"threedshadow\", \"tibetan\", \"tigre\", \"tigrinya-er\", \"tigrinya-er-abegede\", \"tigrinya-et\", \"tigrinya-et-abegede\", \"to\", \"top\", \"trad-chinese-formal\", \"trad-chinese-informal\", \"translate\", \"translate3d\", \"translateX\", \"translateY\", \"translateZ\", \"transparent\", \"ultra-condensed\", \"ultra-expanded\", \"underline\", \"up\", \"upper-alpha\", \"upper-armenian\", \"upper-greek\", \"upper-hexadecimal\", \"upper-latin\", \"upper-norwegian\", \"upper-roman\", \"uppercase\", \"urdu\", \"url\", \"var\", \"vertical\", \"vertical-text\", \"visible\", \"visibleFill\", \"visiblePainted\", \"visibleStroke\", \"visual\", \"w-resize\", \"wait\", \"wave\", \"wider\", \"window\", \"windowframe\", \"windowtext\", \"words\", \"x-large\", \"x-small\", \"xor\", \"xx-large\", \"xx-small\", \"bicubic\", \"optimizespeed\", \"grayscale\", \"row\", \"row-reverse\", \"wrap\", \"wrap-reverse\", \"column-reverse\", \"flex-start\", \"flex-end\", \"space-between\", \"space-around\", \"unset\"];\n  var wordOperatorKeywords_ = [\"in\", \"and\", \"or\", \"not\", \"is not\", \"is a\", \"is\", \"isnt\", \"defined\", \"if unless\"],\n      blockKeywords_ = [\"for\", \"if\", \"else\", \"unless\", \"from\", \"to\"],\n      commonAtoms_ = [\"null\", \"true\", \"false\", \"href\", \"title\", \"type\", \"not-allowed\", \"readonly\", \"disabled\"],\n      commonDef_ = [\"@font-face\", \"@keyframes\", \"@media\", \"@viewport\", \"@page\", \"@host\", \"@supports\", \"@block\", \"@css\"];\n  var hintWords = tagKeywords_.concat(documentTypes_, mediaTypes_, mediaFeatures_, propertyKeywords_, nonStandardPropertyKeywords_, colorKeywords_, valueKeywords_, fontProperties_, wordOperatorKeywords_, blockKeywords_, commonAtoms_, commonDef_);\n\n  function wordRegexp(words) {\n    words = words.sort(function (a, b) {\n      return b > a;\n    });\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  function keySet(array) {\n    var keys = {};\n\n    for (var i = 0; i < array.length; ++i) {\n      keys[array[i]] = true;\n    }\n\n    return keys;\n  }\n\n  function escapeRegExp(text) {\n    return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n  }\n\n  CodeMirror.registerHelper(\"hintWords\", \"stylus\", hintWords);\n  CodeMirror.defineMIME(\"text/x-styl\", \"stylus\");\n});"],"sourceRoot":""}