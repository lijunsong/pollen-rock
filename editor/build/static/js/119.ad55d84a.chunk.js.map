{"version":3,"sources":["../node_modules/codemirror/mode/soy/soy.js","../node_modules/codemirror/mode/xml/xml.js","../node_modules/codemirror/mode/htmlmixed/htmlmixed.js"],"names":["CodeMirror","indentingTags","defineMode","config","textMode","getMode","modes","html","name","multilineTagIndentFactor","multilineTagIndentPastTag","attributes","text","uri","trusted_resource_uri","css","js","statementIndent","indentUnit","last","array","length","tokenUntil","stream","state","untilRegExp","sol","indent","eat","oldString","string","match","exec","substr","pos","index","result","hideFirstChars","localState","localStates","mode","token","prepend","list","element","next","popscope","scopes","variables","startState","kind","kindTag","soyState","templates","quoteKind","copyState","tag","concat","map","loose","pop","skipToEnd","paramRe","current","push","peek","eatWhile","indexOf","contains","test","this","textAfter","top","Pass","innerMode","electricInput","lineComment","blockCommentStart","blockCommentEnd","blockCommentContinue","useInnerComments","fold","registerHelper","defineMIME","mod","__webpack_require__","htmlConfig","autoSelfClosers","area","base","br","col","command","embed","frame","hr","img","input","keygen","link","meta","param","source","track","wbr","menuitem","implicitlyClosed","dd","li","optgroup","option","p","rp","rt","tbody","td","tfoot","th","tr","contextGrabbers","dt","address","article","aside","blockquote","dir","div","dl","fieldset","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","menu","nav","ol","pre","section","table","ul","thead","doNotIndent","allowUnquoted","allowMissing","caseFold","xmlConfig","allowMissingTagName","editorConf","config_","type","setStyle","defaults","htmlMode","prop","inText","chain","parser","tokenize","ch","inBlock","doctype","depth","inTag","baseState","tagName","tagStart","quote","closure","eol","isInAttribute","inAttribute","stringStartCol","column","style","terminator","Context","startOfLine","prev","context","indented","hasOwnProperty","noIndent","popContext","maybePopContext","nextTagName","parentTagName","tagNameState","closeTagNameState","attrState","matchClosing","closeState","closeStateErr","_stream","attrEqState","attrValueState","attrContinuedState","isInText","baseIndent","indentation","eatSpace","fullLine","alignCDATA","tagAfter","grabbers","configuration","helperType","skipAttribute","mimeModes","defaultTags","script","attrRegexpCache","getAttrValue","attr","regexp","RegExp","getAttrRegexp","getTagRegexp","anchored","addTags","from","to","dest","i","unshift","parserConfig","tags","configTags","configScript","scriptTypes","matches","htmlState","toLowerCase","modeSpec","tagInfo","tagText","spec","findMatchingMode","endTagA","endTag","localMode","pat","cur","close","search","backUp","maybeBackup","local","line"],"mappings":"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","file":"static/js/119.ad55d84a.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var indentingTags = [\"template\", \"literal\", \"msg\", \"fallbackmsg\", \"let\", \"if\", \"elseif\", \"else\", \"switch\", \"case\", \"default\", \"foreach\", \"ifempty\", \"for\", \"call\", \"param\", \"deltemplate\", \"delcall\", \"log\"];\n  CodeMirror.defineMode(\"soy\", function (config) {\n    var textMode = CodeMirror.getMode(config, \"text/plain\");\n    var modes = {\n      html: CodeMirror.getMode(config, {\n        name: \"text/html\",\n        multilineTagIndentFactor: 2,\n        multilineTagIndentPastTag: false\n      }),\n      attributes: textMode,\n      text: textMode,\n      uri: textMode,\n      trusted_resource_uri: textMode,\n      css: CodeMirror.getMode(config, \"text/css\"),\n      js: CodeMirror.getMode(config, {\n        name: \"text/javascript\",\n        statementIndent: 2 * config.indentUnit\n      })\n    };\n\n    function last(array) {\n      return array[array.length - 1];\n    }\n\n    function tokenUntil(stream, state, untilRegExp) {\n      if (stream.sol()) {\n        for (var indent = 0; indent < state.indent; indent++) {\n          if (!stream.eat(/\\s/)) break;\n        }\n\n        if (indent) return null;\n      }\n\n      var oldString = stream.string;\n      var match = untilRegExp.exec(oldString.substr(stream.pos));\n\n      if (match) {\n        // We don't use backUp because it backs up just the position, not the state.\n        // This uses an undocumented API.\n        stream.string = oldString.substr(0, stream.pos + match.index);\n      }\n\n      var result = stream.hideFirstChars(state.indent, function () {\n        var localState = last(state.localStates);\n        return localState.mode.token(stream, localState.state);\n      });\n      stream.string = oldString;\n      return result;\n    }\n\n    function contains(list, element) {\n      while (list) {\n        if (list.element === element) return true;\n        list = list.next;\n      }\n\n      return false;\n    }\n\n    function prepend(list, element) {\n      return {\n        element: element,\n        next: list\n      };\n    } // Reference a variable `name` in `list`.\n    // Let `loose` be truthy to ignore missing identifiers.\n\n\n    function ref(list, name, loose) {\n      return contains(list, name) ? \"variable-2\" : loose ? \"variable\" : \"variable-2 error\";\n    }\n\n    function popscope(state) {\n      if (state.scopes) {\n        state.variables = state.scopes.element;\n        state.scopes = state.scopes.next;\n      }\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          kind: [],\n          kindTag: [],\n          soyState: [],\n          templates: null,\n          variables: prepend(null, 'ij'),\n          scopes: null,\n          indent: 0,\n          quoteKind: null,\n          localStates: [{\n            mode: modes.html,\n            state: CodeMirror.startState(modes.html)\n          }]\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          tag: state.tag,\n          // Last seen Soy tag.\n          kind: state.kind.concat([]),\n          // Values of kind=\"\" attributes.\n          kindTag: state.kindTag.concat([]),\n          // Opened tags with kind=\"\" attributes.\n          soyState: state.soyState.concat([]),\n          templates: state.templates,\n          variables: state.variables,\n          scopes: state.scopes,\n          indent: state.indent,\n          // Indentation of the following line.\n          quoteKind: state.quoteKind,\n          localStates: state.localStates.map(function (localState) {\n            return {\n              mode: localState.mode,\n              state: CodeMirror.copyState(localState.mode, localState.state)\n            };\n          })\n        };\n      },\n      token: function token(stream, state) {\n        var match;\n\n        switch (last(state.soyState)) {\n          case \"comment\":\n            if (stream.match(/^.*?\\*\\//)) {\n              state.soyState.pop();\n            } else {\n              stream.skipToEnd();\n            }\n\n            if (!state.scopes) {\n              var paramRe = /@param\\??\\s+(\\S+)/g;\n              var current = stream.current();\n\n              for (var match; match = paramRe.exec(current);) {\n                state.variables = prepend(state.variables, match[1]);\n              }\n            }\n\n            return \"comment\";\n\n          case \"string\":\n            var match = stream.match(/^.*?([\"']|\\\\[\\s\\S])/);\n\n            if (!match) {\n              stream.skipToEnd();\n            } else if (match[1] == state.quoteKind) {\n              state.quoteKind = null;\n              state.soyState.pop();\n            }\n\n            return \"string\";\n        }\n\n        if (!state.soyState.length || last(state.soyState) != \"literal\") {\n          if (stream.match(/^\\/\\*/)) {\n            state.soyState.push(\"comment\");\n            return \"comment\";\n          } else if (stream.match(stream.sol() ? /^\\s*\\/\\/.*/ : /^\\s+\\/\\/.*/)) {\n            return \"comment\";\n          }\n        }\n\n        switch (last(state.soyState)) {\n          case \"templ-def\":\n            if (match = stream.match(/^\\.?([\\w]+(?!\\.[\\w]+)*)/)) {\n              state.templates = prepend(state.templates, match[1]);\n              state.scopes = prepend(state.scopes, state.variables);\n              state.soyState.pop();\n              return \"def\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"templ-ref\":\n            if (match = stream.match(/(\\.?[a-zA-Z_][a-zA-Z_0-9]+)+/)) {\n              state.soyState.pop(); // If the first character is '.', it can only be a local template.\n\n              if (match[0][0] == '.') {\n                return \"variable-2\";\n              } // Otherwise\n\n\n              return \"variable\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"namespace-def\":\n            if (match = stream.match(/^\\.?([\\w\\.]+)/)) {\n              state.soyState.pop();\n              return \"variable\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"param-def\":\n            if (match = stream.match(/^\\w+/)) {\n              state.variables = prepend(state.variables, match[0]);\n              state.soyState.pop();\n              state.soyState.push(\"param-type\");\n              return \"def\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"param-ref\":\n            if (match = stream.match(/^\\w+/)) {\n              state.soyState.pop();\n              return \"property\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"param-type\":\n            if (stream.peek() == \"}\") {\n              state.soyState.pop();\n              return null;\n            }\n\n            if (stream.eatWhile(/^([\\w]+|[?])/)) {\n              return \"type\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"var-def\":\n            if (match = stream.match(/^\\$([\\w]+)/)) {\n              state.variables = prepend(state.variables, match[1]);\n              state.soyState.pop();\n              return \"def\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"tag\":\n            if (stream.match(/^\\/?}/)) {\n              if (state.tag == \"/template\" || state.tag == \"/deltemplate\") {\n                popscope(state);\n                state.variables = prepend(null, 'ij');\n                state.indent = 0;\n              } else {\n                if (state.tag == \"/for\" || state.tag == \"/foreach\") {\n                  popscope(state);\n                }\n\n                state.indent -= config.indentUnit * (stream.current() == \"/}\" || indentingTags.indexOf(state.tag) == -1 ? 2 : 1);\n              }\n\n              state.soyState.pop();\n              return \"keyword\";\n            } else if (stream.match(/^([\\w?]+)(?==)/)) {\n              if (stream.current() == \"kind\" && (match = stream.match(/^=\"([^\"]+)/, false))) {\n                var kind = match[1];\n                state.kind.push(kind);\n                state.kindTag.push(state.tag);\n                var mode = modes[kind] || modes.html;\n                var localState = last(state.localStates);\n\n                if (localState.mode.indent) {\n                  state.indent += localState.mode.indent(localState.state, \"\");\n                }\n\n                state.localStates.push({\n                  mode: mode,\n                  state: CodeMirror.startState(mode)\n                });\n              }\n\n              return \"attribute\";\n            } else if (match = stream.match(/([\\w]+)(?=\\()/)) {\n              return \"variable callee\";\n            } else if (match = stream.match(/^[\"']/)) {\n              state.soyState.push(\"string\");\n              state.quoteKind = match;\n              return \"string\";\n            }\n\n            if (stream.match(/(true|false)(?!\\w)/) || stream.match(/0x([0-9a-fA-F]{2,})/) || stream.match(/-?([0-9]*[.])?[0-9]+/)) {\n              return \"atom\";\n            }\n\n            if (stream.match(/(\\||[+\\-*\\/%]|[=!][=]|[<>][=]?)/)) {\n              // Tokenize filter, binary, and equality operators.\n              return \"operator\";\n            }\n\n            if (match = stream.match(/^\\$([\\w]+)/)) {\n              return ref(state.variables, match[1]);\n            }\n\n            if (match = stream.match(/^\\w+/)) {\n              return /^(?:as|and|or|not|in)$/.test(match[0]) ? \"keyword\" : null;\n            }\n\n            stream.next();\n            return null;\n\n          case \"literal\":\n            if (stream.match(/^(?=\\{\\/literal})/)) {\n              state.indent -= config.indentUnit;\n              state.soyState.pop();\n              return this.token(stream, state);\n            }\n\n            return tokenUntil(stream, state, /\\{\\/literal}/);\n        }\n\n        if (stream.match(/^\\{literal}/)) {\n          state.indent += config.indentUnit;\n          state.soyState.push(\"literal\");\n          return \"keyword\"; // A tag-keyword must be followed by whitespace, comment or a closing tag.\n        } else if (match = stream.match(/^\\{([/@\\\\]?\\w+\\??)(?=$|[\\s}]|\\/[/*])/)) {\n          if (match[1] != \"/switch\") state.indent += (/^(\\/|(else|elseif|ifempty|case|fallbackmsg|default)$)/.test(match[1]) && state.tag != \"switch\" ? 1 : 2) * config.indentUnit;\n          state.tag = match[1];\n\n          if (state.tag == \"/\" + last(state.kindTag)) {\n            // We found the tag that opened the current kind=\"\".\n            state.kind.pop();\n            state.kindTag.pop();\n            state.localStates.pop();\n            var localState = last(state.localStates);\n\n            if (localState.mode.indent) {\n              state.indent -= localState.mode.indent(localState.state, \"\");\n            }\n          }\n\n          state.soyState.push(\"tag\");\n\n          if (state.tag == \"template\" || state.tag == \"deltemplate\") {\n            state.soyState.push(\"templ-def\");\n          } else if (state.tag == \"call\" || state.tag == \"delcall\") {\n            state.soyState.push(\"templ-ref\");\n          } else if (state.tag == \"let\") {\n            state.soyState.push(\"var-def\");\n          } else if (state.tag == \"for\" || state.tag == \"foreach\") {\n            state.scopes = prepend(state.scopes, state.variables);\n            state.soyState.push(\"var-def\");\n          } else if (state.tag == \"namespace\") {\n            state.soyState.push(\"namespace-def\");\n\n            if (!state.scopes) {\n              state.variables = prepend(null, 'ij');\n            }\n          } else if (state.tag.match(/^@(?:param\\??|inject|prop)/)) {\n            state.soyState.push(\"param-def\");\n          } else if (state.tag.match(/^(?:param)/)) {\n            state.soyState.push(\"param-ref\");\n          }\n\n          return \"keyword\"; // Not a tag-keyword; it's an implicit print tag.\n        } else if (stream.eat('{')) {\n          state.tag = \"print\";\n          state.indent += 2 * config.indentUnit;\n          state.soyState.push(\"tag\");\n          return \"keyword\";\n        }\n\n        return tokenUntil(stream, state, /\\{|\\s+\\/\\/|\\/\\*/);\n      },\n      indent: function indent(state, textAfter) {\n        var indent = state.indent,\n            top = last(state.soyState);\n        if (top == \"comment\") return CodeMirror.Pass;\n\n        if (top == \"literal\") {\n          if (/^\\{\\/literal}/.test(textAfter)) indent -= config.indentUnit;\n        } else {\n          if (/^\\s*\\{\\/(template|deltemplate)\\b/.test(textAfter)) return 0;\n          if (/^\\{(\\/|(fallbackmsg|elseif|else|ifempty)\\b)/.test(textAfter)) indent -= config.indentUnit;\n          if (state.tag != \"switch\" && /^\\{(case|default)\\b/.test(textAfter)) indent -= config.indentUnit;\n          if (/^\\{\\/switch\\b/.test(textAfter)) indent -= config.indentUnit;\n        }\n\n        var localState = last(state.localStates);\n\n        if (indent && localState.mode.indent) {\n          indent += localState.mode.indent(localState.state, textAfter);\n        }\n\n        return indent;\n      },\n      innerMode: function innerMode(state) {\n        if (state.soyState.length && last(state.soyState) != \"literal\") return null;else return last(state.localStates);\n      },\n      electricInput: /^\\s*\\{(\\/|\\/template|\\/deltemplate|\\/switch|fallbackmsg|elseif|else|case|default|ifempty|\\/literal\\})$/,\n      lineComment: \"//\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      blockCommentContinue: \" * \",\n      useInnerComments: false,\n      fold: \"indent\"\n    };\n  }, \"htmlmixed\");\n  CodeMirror.registerHelper(\"wordChars\", \"soy\", /[\\w$]/);\n  CodeMirror.registerHelper(\"hintWords\", \"soy\", indentingTags.concat([\"delpackage\", \"namespace\", \"alias\", \"print\", \"css\", \"debugger\"]));\n  CodeMirror.defineMIME(\"text/x-soy\", \"soy\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var htmlConfig = {\n    autoSelfClosers: {\n      'area': true,\n      'base': true,\n      'br': true,\n      'col': true,\n      'command': true,\n      'embed': true,\n      'frame': true,\n      'hr': true,\n      'img': true,\n      'input': true,\n      'keygen': true,\n      'link': true,\n      'meta': true,\n      'param': true,\n      'source': true,\n      'track': true,\n      'wbr': true,\n      'menuitem': true\n    },\n    implicitlyClosed: {\n      'dd': true,\n      'li': true,\n      'optgroup': true,\n      'option': true,\n      'p': true,\n      'rp': true,\n      'rt': true,\n      'tbody': true,\n      'td': true,\n      'tfoot': true,\n      'th': true,\n      'tr': true\n    },\n    contextGrabbers: {\n      'dd': {\n        'dd': true,\n        'dt': true\n      },\n      'dt': {\n        'dd': true,\n        'dt': true\n      },\n      'li': {\n        'li': true\n      },\n      'option': {\n        'option': true,\n        'optgroup': true\n      },\n      'optgroup': {\n        'optgroup': true\n      },\n      'p': {\n        'address': true,\n        'article': true,\n        'aside': true,\n        'blockquote': true,\n        'dir': true,\n        'div': true,\n        'dl': true,\n        'fieldset': true,\n        'footer': true,\n        'form': true,\n        'h1': true,\n        'h2': true,\n        'h3': true,\n        'h4': true,\n        'h5': true,\n        'h6': true,\n        'header': true,\n        'hgroup': true,\n        'hr': true,\n        'menu': true,\n        'nav': true,\n        'ol': true,\n        'p': true,\n        'pre': true,\n        'section': true,\n        'table': true,\n        'ul': true\n      },\n      'rp': {\n        'rp': true,\n        'rt': true\n      },\n      'rt': {\n        'rp': true,\n        'rt': true\n      },\n      'tbody': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'td': {\n        'td': true,\n        'th': true\n      },\n      'tfoot': {\n        'tbody': true\n      },\n      'th': {\n        'td': true,\n        'th': true\n      },\n      'thead': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'tr': {\n        'tr': true\n      }\n    },\n    doNotIndent: {\n      \"pre\": true\n    },\n    allowUnquoted: true,\n    allowMissing: true,\n    caseFold: true\n  };\n  var xmlConfig = {\n    autoSelfClosers: {},\n    implicitlyClosed: {},\n    contextGrabbers: {},\n    doNotIndent: {},\n    allowUnquoted: false,\n    allowMissing: false,\n    allowMissingTagName: false,\n    caseFold: false\n  };\n  CodeMirror.defineMode(\"xml\", function (editorConf, config_) {\n    var indentUnit = editorConf.indentUnit;\n    var config = {};\n    var defaults = config_.htmlMode ? htmlConfig : xmlConfig;\n\n    for (var prop in defaults) {\n      config[prop] = defaults[prop];\n    }\n\n    for (var prop in config_) {\n      config[prop] = config_[prop];\n    } // Return variables for tokenizers\n\n\n    var type, setStyle;\n\n    function inText(stream, state) {\n      function chain(parser) {\n        state.tokenize = parser;\n        return parser(stream, state);\n      }\n\n      var ch = stream.next();\n\n      if (ch == \"<\") {\n        if (stream.eat(\"!\")) {\n          if (stream.eat(\"[\")) {\n            if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));else return null;\n          } else if (stream.match(\"--\")) {\n            return chain(inBlock(\"comment\", \"-->\"));\n          } else if (stream.match(\"DOCTYPE\", true, true)) {\n            stream.eatWhile(/[\\w\\._\\-]/);\n            return chain(doctype(1));\n          } else {\n            return null;\n          }\n        } else if (stream.eat(\"?\")) {\n          stream.eatWhile(/[\\w\\._\\-]/);\n          state.tokenize = inBlock(\"meta\", \"?>\");\n          return \"meta\";\n        } else {\n          type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n          state.tokenize = inTag;\n          return \"tag bracket\";\n        }\n      } else if (ch == \"&\") {\n        var ok;\n\n        if (stream.eat(\"#\")) {\n          if (stream.eat(\"x\")) {\n            ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n          } else {\n            ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n          }\n        } else {\n          ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n        }\n\n        return ok ? \"atom\" : \"error\";\n      } else {\n        stream.eatWhile(/[^&<]/);\n        return null;\n      }\n    }\n\n    inText.isInText = true;\n\n    function inTag(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \">\" || ch == \"/\" && stream.eat(\">\")) {\n        state.tokenize = inText;\n        type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n        return \"tag bracket\";\n      } else if (ch == \"=\") {\n        type = \"equals\";\n        return null;\n      } else if (ch == \"<\") {\n        state.tokenize = inText;\n        state.state = baseState;\n        state.tagName = state.tagStart = null;\n        var next = state.tokenize(stream, state);\n        return next ? next + \" tag error\" : \"tag error\";\n      } else if (/[\\'\\\"]/.test(ch)) {\n        state.tokenize = inAttribute(ch);\n        state.stringStartCol = stream.column();\n        return state.tokenize(stream, state);\n      } else {\n        stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\n        return \"word\";\n      }\n    }\n\n    function inAttribute(quote) {\n      var closure = function closure(stream, state) {\n        while (!stream.eol()) {\n          if (stream.next() == quote) {\n            state.tokenize = inTag;\n            break;\n          }\n        }\n\n        return \"string\";\n      };\n\n      closure.isInAttribute = true;\n      return closure;\n    }\n\n    function inBlock(style, terminator) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = inText;\n            break;\n          }\n\n          stream.next();\n        }\n\n        return style;\n      };\n    }\n\n    function doctype(depth) {\n      return function (stream, state) {\n        var ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == \"<\") {\n            state.tokenize = doctype(depth + 1);\n            return state.tokenize(stream, state);\n          } else if (ch == \">\") {\n            if (depth == 1) {\n              state.tokenize = inText;\n              break;\n            } else {\n              state.tokenize = doctype(depth - 1);\n              return state.tokenize(stream, state);\n            }\n          }\n        }\n\n        return \"meta\";\n      };\n    }\n\n    function Context(state, tagName, startOfLine) {\n      this.prev = state.context;\n      this.tagName = tagName;\n      this.indent = state.indented;\n      this.startOfLine = startOfLine;\n      if (config.doNotIndent.hasOwnProperty(tagName) || state.context && state.context.noIndent) this.noIndent = true;\n    }\n\n    function popContext(state) {\n      if (state.context) state.context = state.context.prev;\n    }\n\n    function maybePopContext(state, nextTagName) {\n      var parentTagName;\n\n      while (true) {\n        if (!state.context) {\n          return;\n        }\n\n        parentTagName = state.context.tagName;\n\n        if (!config.contextGrabbers.hasOwnProperty(parentTagName) || !config.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {\n          return;\n        }\n\n        popContext(state);\n      }\n    }\n\n    function baseState(type, stream, state) {\n      if (type == \"openTag\") {\n        state.tagStart = stream.column();\n        return tagNameState;\n      } else if (type == \"closeTag\") {\n        return closeTagNameState;\n      } else {\n        return baseState;\n      }\n    }\n\n    function tagNameState(type, stream, state) {\n      if (type == \"word\") {\n        state.tagName = stream.current();\n        setStyle = \"tag\";\n        return attrState;\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return attrState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return tagNameState;\n      }\n    }\n\n    function closeTagNameState(type, stream, state) {\n      if (type == \"word\") {\n        var tagName = stream.current();\n        if (state.context && state.context.tagName != tagName && config.implicitlyClosed.hasOwnProperty(state.context.tagName)) popContext(state);\n\n        if (state.context && state.context.tagName == tagName || config.matchClosing === false) {\n          setStyle = \"tag\";\n          return closeState;\n        } else {\n          setStyle = \"tag error\";\n          return closeStateErr;\n        }\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return closeState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return closeStateErr;\n      }\n    }\n\n    function closeState(type, _stream, state) {\n      if (type != \"endTag\") {\n        setStyle = \"error\";\n        return closeState;\n      }\n\n      popContext(state);\n      return baseState;\n    }\n\n    function closeStateErr(type, stream, state) {\n      setStyle = \"error\";\n      return closeState(type, stream, state);\n    }\n\n    function attrState(type, _stream, state) {\n      if (type == \"word\") {\n        setStyle = \"attribute\";\n        return attrEqState;\n      } else if (type == \"endTag\" || type == \"selfcloseTag\") {\n        var tagName = state.tagName,\n            tagStart = state.tagStart;\n        state.tagName = state.tagStart = null;\n\n        if (type == \"selfcloseTag\" || config.autoSelfClosers.hasOwnProperty(tagName)) {\n          maybePopContext(state, tagName);\n        } else {\n          maybePopContext(state, tagName);\n          state.context = new Context(state, tagName, tagStart == state.indented);\n        }\n\n        return baseState;\n      }\n\n      setStyle = \"error\";\n      return attrState;\n    }\n\n    function attrEqState(type, stream, state) {\n      if (type == \"equals\") return attrValueState;\n      if (!config.allowMissing) setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrValueState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n\n      if (type == \"word\" && config.allowUnquoted) {\n        setStyle = \"string\";\n        return attrState;\n      }\n\n      setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrContinuedState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n      return attrState(type, stream, state);\n    }\n\n    return {\n      startState: function startState(baseIndent) {\n        var state = {\n          tokenize: inText,\n          state: baseState,\n          indented: baseIndent || 0,\n          tagName: null,\n          tagStart: null,\n          context: null\n        };\n        if (baseIndent != null) state.baseIndent = baseIndent;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (!state.tagName && stream.sol()) state.indented = stream.indentation();\n        if (stream.eatSpace()) return null;\n        type = null;\n        var style = state.tokenize(stream, state);\n\n        if ((style || type) && style != \"comment\") {\n          setStyle = null;\n          state.state = state.state(type || style, stream, state);\n          if (setStyle) style = setStyle == \"error\" ? style + \" error\" : setStyle;\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter, fullLine) {\n        var context = state.context; // Indent multi-line strings (e.g. css).\n\n        if (state.tokenize.isInAttribute) {\n          if (state.tagStart == state.indented) return state.stringStartCol + 1;else return state.indented + indentUnit;\n        }\n\n        if (context && context.noIndent) return CodeMirror.Pass;\n        if (state.tokenize != inTag && state.tokenize != inText) return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0; // Indent the starts of attribute names.\n\n        if (state.tagName) {\n          if (config.multilineTagIndentPastTag !== false) return state.tagStart + state.tagName.length + 2;else return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n        }\n\n        if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\n        var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n\n        if (tagAfter && tagAfter[1]) {\n          // Closing tag spotted\n          while (context) {\n            if (context.tagName == tagAfter[2]) {\n              context = context.prev;\n              break;\n            } else if (config.implicitlyClosed.hasOwnProperty(context.tagName)) {\n              context = context.prev;\n            } else {\n              break;\n            }\n          }\n        } else if (tagAfter) {\n          // Opening tag spotted\n          while (context) {\n            var grabbers = config.contextGrabbers[context.tagName];\n            if (grabbers && grabbers.hasOwnProperty(tagAfter[2])) context = context.prev;else break;\n          }\n        }\n\n        while (context && context.prev && !context.startOfLine) {\n          context = context.prev;\n        }\n\n        if (context) return context.indent + indentUnit;else return state.baseIndent || 0;\n      },\n      electricInput: /<\\/[\\s\\w:]+>$/,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      configuration: config.htmlMode ? \"html\" : \"xml\",\n      helperType: config.htmlMode ? \"html\" : \"xml\",\n      skipAttribute: function skipAttribute(state) {\n        if (state.state == attrValueState) state.state = attrState;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/xml\", \"xml\");\n  CodeMirror.defineMIME(\"application/xml\", \"xml\");\n  if (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\")) CodeMirror.defineMIME(\"text/html\", {\n    name: \"xml\",\n    htmlMode: true\n  });\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../javascript/javascript\"), require(\"../css/css\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../javascript/javascript\", \"../css/css\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var defaultTags = {\n    script: [[\"lang\", /(javascript|babel)/i, \"javascript\"], [\"type\", /^(?:text|application)\\/(?:x-)?(?:java|ecma)script$|^module$|^$/i, \"javascript\"], [\"type\", /./, \"text/plain\"], [null, null, \"javascript\"]],\n    style: [[\"lang\", /^css$/i, \"css\"], [\"type\", /^(text\\/)?(x-)?(stylesheet|css)$/i, \"css\"], [\"type\", /./, \"text/plain\"], [null, null, \"css\"]]\n  };\n\n  function maybeBackup(stream, pat, style) {\n    var cur = stream.current(),\n        close = cur.search(pat);\n\n    if (close > -1) {\n      stream.backUp(cur.length - close);\n    } else if (cur.match(/<\\/?$/)) {\n      stream.backUp(cur.length);\n      if (!stream.match(pat, false)) stream.match(cur);\n    }\n\n    return style;\n  }\n\n  var attrRegexpCache = {};\n\n  function getAttrRegexp(attr) {\n    var regexp = attrRegexpCache[attr];\n    if (regexp) return regexp;\n    return attrRegexpCache[attr] = new RegExp(\"\\\\s+\" + attr + \"\\\\s*=\\\\s*('|\\\")?([^'\\\"]+)('|\\\")?\\\\s*\");\n  }\n\n  function getAttrValue(text, attr) {\n    var match = text.match(getAttrRegexp(attr));\n    return match ? /^\\s*(.*?)\\s*$/.exec(match[2])[1] : \"\";\n  }\n\n  function getTagRegexp(tagName, anchored) {\n    return new RegExp((anchored ? \"^\" : \"\") + \"<\\/\\s*\" + tagName + \"\\s*>\", \"i\");\n  }\n\n  function addTags(from, to) {\n    for (var tag in from) {\n      var dest = to[tag] || (to[tag] = []);\n      var source = from[tag];\n\n      for (var i = source.length - 1; i >= 0; i--) {\n        dest.unshift(source[i]);\n      }\n    }\n  }\n\n  function findMatchingMode(tagInfo, tagText) {\n    for (var i = 0; i < tagInfo.length; i++) {\n      var spec = tagInfo[i];\n      if (!spec[0] || spec[1].test(getAttrValue(tagText, spec[0]))) return spec[2];\n    }\n  }\n\n  CodeMirror.defineMode(\"htmlmixed\", function (config, parserConfig) {\n    var htmlMode = CodeMirror.getMode(config, {\n      name: \"xml\",\n      htmlMode: true,\n      multilineTagIndentFactor: parserConfig.multilineTagIndentFactor,\n      multilineTagIndentPastTag: parserConfig.multilineTagIndentPastTag\n    });\n    var tags = {};\n    var configTags = parserConfig && parserConfig.tags,\n        configScript = parserConfig && parserConfig.scriptTypes;\n    addTags(defaultTags, tags);\n    if (configTags) addTags(configTags, tags);\n    if (configScript) for (var i = configScript.length - 1; i >= 0; i--) {\n      tags.script.unshift([\"type\", configScript[i].matches, configScript[i].mode]);\n    }\n\n    function html(stream, state) {\n      var style = htmlMode.token(stream, state.htmlState),\n          tag = /\\btag\\b/.test(style),\n          tagName;\n\n      if (tag && !/[<>\\s\\/]/.test(stream.current()) && (tagName = state.htmlState.tagName && state.htmlState.tagName.toLowerCase()) && tags.hasOwnProperty(tagName)) {\n        state.inTag = tagName + \" \";\n      } else if (state.inTag && tag && />$/.test(stream.current())) {\n        var inTag = /^([\\S]+) (.*)/.exec(state.inTag);\n        state.inTag = null;\n        var modeSpec = stream.current() == \">\" && findMatchingMode(tags[inTag[1]], inTag[2]);\n        var mode = CodeMirror.getMode(config, modeSpec);\n        var endTagA = getTagRegexp(inTag[1], true),\n            endTag = getTagRegexp(inTag[1], false);\n\n        state.token = function (stream, state) {\n          if (stream.match(endTagA, false)) {\n            state.token = html;\n            state.localState = state.localMode = null;\n            return null;\n          }\n\n          return maybeBackup(stream, endTag, state.localMode.token(stream, state.localState));\n        };\n\n        state.localMode = mode;\n        state.localState = CodeMirror.startState(mode, htmlMode.indent(state.htmlState, \"\"));\n      } else if (state.inTag) {\n        state.inTag += stream.current();\n        if (stream.eol()) state.inTag += \" \";\n      }\n\n      return style;\n    }\n\n    ;\n    return {\n      startState: function startState() {\n        var state = CodeMirror.startState(htmlMode);\n        return {\n          token: html,\n          inTag: null,\n          localMode: null,\n          localState: null,\n          htmlState: state\n        };\n      },\n      copyState: function copyState(state) {\n        var local;\n\n        if (state.localState) {\n          local = CodeMirror.copyState(state.localMode, state.localState);\n        }\n\n        return {\n          token: state.token,\n          inTag: state.inTag,\n          localMode: state.localMode,\n          localState: local,\n          htmlState: CodeMirror.copyState(htmlMode, state.htmlState)\n        };\n      },\n      token: function token(stream, state) {\n        return state.token(stream, state);\n      },\n      indent: function indent(state, textAfter, line) {\n        if (!state.localMode || /^\\s*<\\//.test(textAfter)) return htmlMode.indent(state.htmlState, textAfter);else if (state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line);else return CodeMirror.Pass;\n      },\n      innerMode: function innerMode(state) {\n        return {\n          state: state.localState || state.htmlState,\n          mode: state.localMode || htmlMode\n        };\n      }\n    };\n  }, \"xml\", \"javascript\", \"css\");\n  CodeMirror.defineMIME(\"text/html\", \"htmlmixed\");\n});"],"sourceRoot":""}