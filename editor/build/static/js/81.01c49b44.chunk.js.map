{"version":3,"sources":["../node_modules/codemirror/mode/sieve/sieve.js"],"names":["CodeMirror","defineMode","config","words","str","obj","split","i","length","keywords","atoms","indentUnit","tokenBase","stream","state","quote","ch","next","eat","tokenize","tokenCComment","skipToEnd","escaped","_indent","push","pop","test","eatWhile","cur","current","tokenMultiLineString","propertyIsEnumerable","_multiLineString","sol","eol","eatSpace","peek","maybeEnd","startState","base","baseIndent","token","indent","_textAfter","electricChars","defineMIME","mod","__webpack_require__"],"mappings":"+EAOC,SAAAA,GACD,aAEAA,EAAAC,WAAA,iBAAAC,GACA,SAAAC,EAAAC,GAIA,IAHA,IAAAC,EAAA,GACAF,EAAAC,EAAAE,MAAA,KAEAC,EAAA,EAAqBA,EAAAJ,EAAAK,SAAkBD,EACvCF,EAAAF,EAAAI,KAAA,EAGA,OAAAF,EAGA,IAAAI,EAAAN,EAAA,8BACAO,EAAAP,EAAA,kBACAQ,EAAAT,EAAAS,WAEA,SAAAC,EAAAC,EAAAC,GACA,IAoHAC,EApHAC,EAAAH,EAAAI,OAEA,QAAAD,GAAAH,EAAAK,IAAA,KAEA,OADAJ,EAAAK,SAAAC,EACAA,EAAAP,EAAAC,GAGA,SAAAE,EAEA,OADAH,EAAAQ,YACA,UAGA,QAAAL,EAEA,OADAF,EAAAK,UAuGAJ,EAvGAC,EAwGA,SAAAH,EAAAC,GAIA,IAHA,IACAE,EADAM,GAAA,EAGA,OAAAN,EAAAH,EAAAI,UACAD,GAAAD,GAAAO,IACAA,MAAA,MAAAN,EAIA,OADAM,IAAAR,EAAAK,SAAAP,GACA,WAjHAE,EAAAK,SAAAN,EAAAC,GAGA,QAAAE,EAOA,OANAF,EAAAS,QAAAC,KAAA,KAIAV,EAAAS,QAAAC,KAAA,KAEA,KAGA,SAAAR,EAGA,OAFAF,EAAAS,QAAAC,KAAA,KAEA,KASA,GANA,KAAAR,IACAF,EAAAS,QAAAE,MAEAX,EAAAS,QAAAE,OAGA,MAAAT,EAGA,OAFAF,EAAAS,QAAAE,MAEA,KAGA,QAAAT,EAAA,YACA,QAAAA,EAAkB,YAClB,gBAAoBU,KAAAV,GAAA,YAEpB,QAAAU,KAAAV,GAGA,OAFAH,EAAAc,SAAA,QACAd,EAAAK,IAAA,YACA,SAIA,QAAAF,EAGA,OAFAH,EAAAc,SAAA,aACAd,EAAAc,SAAA,gBACA,WAGAd,EAAAc,SAAA,MACA,IAAAC,EAAAf,EAAAgB,UAIA,cAAAD,GAAAf,EAAAK,IAAA,MACAJ,EAAAK,SAAAW,EACA,UAGArB,EAAAsB,qBAAAH,GAAA,UACAlB,EAAAqB,qBAAAH,GAAA,OACA,KAGA,SAAAE,EAAAjB,EAAAC,GAGA,OAFAA,EAAAkB,kBAAA,EAEAnB,EAAAoB,OAYA,KAAApB,EAAAI,QAAAJ,EAAAqB,QACApB,EAAAkB,kBAAA,EACAlB,EAAAK,SAAAP,GAGA,WAhBAC,EAAAsB,WAEA,KAAAtB,EAAAuB,QACAvB,EAAAQ,YACA,YAGAR,EAAAQ,YACA,WAWA,SAAAD,EAAAP,EAAAC,GAIA,IAHA,IACAE,EADAqB,GAAA,EAGA,OAAArB,EAAAH,EAAAI,SAAA,CACA,GAAAoB,GAAA,KAAArB,EAAA,CACAF,EAAAK,SAAAP,EACA,MAGAyB,EAAA,KAAArB,EAGA,gBAkBA,OACAsB,WAAA,SAAAC,GACA,OACApB,SAAAP,EACA4B,WAAAD,GAAA,EACAhB,QAAA,KAGAkB,MAAA,SAAA5B,EAAAC,GACA,OAAAD,EAAAsB,WAAA,MACArB,EAAAK,UAAAP,GAAAC,EAAAC,IAEA4B,OAAA,SAAA5B,EAAA6B,GACA,IAAAnC,EAAAM,EAAAS,QAAAf,OAGA,OAFAmC,GAAA,KAAAA,EAAA,IAA6CnC,IAC7CA,EAAA,IAAAA,EAAA,GACAA,EAAAG,GAEAiC,cAAA,OAGA5C,EAAA6C,WAAA,6BA/KAC,CAAQC,EAAQ","file":"static/js/81.01c49b44.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"sieve\", function (config) {\n    function words(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var keywords = words(\"if elsif else stop require\");\n    var atoms = words(\"true false not\");\n    var indentUnit = config.indentUnit;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \"/\" && stream.eat(\"*\")) {\n        state.tokenize = tokenCComment;\n        return tokenCComment(stream, state);\n      }\n\n      if (ch === '#') {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (ch == \"\\\"\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (ch == \"(\") {\n        state._indent.push(\"(\"); // add virtual angel wings so that editor behaves...\n        // ...more sane incase of broken brackets\n\n\n        state._indent.push(\"{\");\n\n        return null;\n      }\n\n      if (ch === \"{\") {\n        state._indent.push(\"{\");\n\n        return null;\n      }\n\n      if (ch == \")\") {\n        state._indent.pop();\n\n        state._indent.pop();\n      }\n\n      if (ch === \"}\") {\n        state._indent.pop();\n\n        return null;\n      }\n\n      if (ch == \",\") return null;\n      if (ch == \";\") return null;\n      if (/[{}\\(\\),;]/.test(ch)) return null; // 1*DIGIT \"K\" / \"M\" / \"G\"\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\d]/);\n        stream.eat(/[KkMmGg]/);\n        return \"number\";\n      } // \":\" (ALPHA / \"_\") *(ALPHA / DIGIT / \"_\")\n\n\n      if (ch == \":\") {\n        stream.eatWhile(/[a-zA-Z_]/);\n        stream.eatWhile(/[a-zA-Z0-9_]/);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/\\w/);\n      var cur = stream.current(); // \"text:\" *(SP / HTAB) (hash-comment / CRLF)\n      // *(multiline-literal / multiline-dotstart)\n      // \".\" CRLF\n\n      if (cur == \"text\" && stream.eat(\":\")) {\n        state.tokenize = tokenMultiLineString;\n        return \"string\";\n      }\n\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n      return null;\n    }\n\n    function tokenMultiLineString(stream, state) {\n      state._multiLineString = true; // the first line is special it may contain a comment\n\n      if (!stream.sol()) {\n        stream.eatSpace();\n\n        if (stream.peek() == \"#\") {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n\n        stream.skipToEnd();\n        return \"string\";\n      }\n\n      if (stream.next() == \".\" && stream.eol()) {\n        state._multiLineString = false;\n        state.tokenize = tokenBase;\n      }\n\n      return \"string\";\n    }\n\n    function tokenCComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while ((ch = stream.next()) != null) {\n        if (maybeEnd && ch == \"/\") {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && !escaped) break;\n          escaped = !escaped && ch == \"\\\\\";\n        }\n\n        if (!escaped) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n\n    return {\n      startState: function startState(base) {\n        return {\n          tokenize: tokenBase,\n          baseIndent: base || 0,\n          _indent: []\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return (state.tokenize || tokenBase)(stream, state);\n      },\n      indent: function indent(state, _textAfter) {\n        var length = state._indent.length;\n        if (_textAfter && _textAfter[0] == \"}\") length--;\n        if (length < 0) length = 0;\n        return length * indentUnit;\n      },\n      electricChars: \"}\"\n    };\n  });\n  CodeMirror.defineMIME(\"application/sieve\", \"sieve\");\n});"],"sourceRoot":""}