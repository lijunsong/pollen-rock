{"version":3,"sources":["../node_modules/codemirror/mode/nginx/nginx.js"],"names":["CodeMirror","defineMode","config","words","str","obj","split","i","length","type","keywords","keywords_block","keywords_important","indentUnit","ret","style","tp","tokenBase","stream","state","eatWhile","cur","current","propertyIsEnumerable","quote","ch","next","eat","tokenize","tokenCComment","tokenSGMLComment","escaped","skipToEnd","match","test","maybeEnd","dashes","startState","base","baseIndent","stack","token","eatSpace","context","pop","push","indent","textAfter","n","electricChars","defineMIME","mod","__webpack_require__"],"mappings":"+EAOC,SAAAA,GACD,aAEAA,EAAAC,WAAA,iBAAAC,GACA,SAAAC,EAAAC,GAIA,IAHA,IAAAC,EAAA,GACAF,EAAAC,EAAAE,MAAA,KAEAC,EAAA,EAAqBA,EAAAJ,EAAAK,SAAkBD,EACvCF,EAAAF,EAAAI,KAAA,EAGA,OAAAF,EAGA,IAYAI,EAZAC,EAAAP,EAEA,wgKAGAQ,EAAAR,EAEA,uFACAS,EAAAT,EAEA,oGACAU,EAAAX,EAAAW,WAGA,SAAAC,EAAAC,EAAAC,GAEA,OADAP,EAAAO,EACAD,EAGA,SAAAE,EAAAC,EAAAC,GACAD,EAAAE,SAAA,WACA,IAAAC,EAAAH,EAAAI,UAEA,GAAAZ,EAAAa,qBAAAF,GACA,gBACO,GAAAV,EAAAY,qBAAAF,GACP,mBACO,GAAAT,EAAAW,qBAAAF,GACP,iBAKA,IAiEAG,EAjEAC,EAAAP,EAAAQ,OAEA,WAAAD,GACAP,EAAAE,SAAA,YACAN,EAAA,OAAAI,EAAAI,YACO,KAAAG,GAAAP,EAAAS,IAAA,MACPR,EAAAS,SAAAC,EACAA,EAAAX,EAAAC,IACO,KAAAM,GAAAP,EAAAS,IAAA,MACPR,EAAAS,SAAAE,EACAA,EAAAZ,EAAAC,IACO,KAAAM,EAA0C,KAAAA,GAAA,KAAAA,IAAAP,EAAAS,IAAA,KAAkF,KAAAF,GAAA,KAAAA,GACnIN,EAAAS,UAqDAJ,EArDAC,EAsDA,SAAAP,EAAAC,GAIA,IAHA,IACAM,EADAM,GAAA,EAGA,OAAAN,EAAAP,EAAAQ,UACAD,GAAAD,GAAAO,IACAA,MAAA,MAAAN,EAIA,OADAM,IAAAZ,EAAAS,SAAAX,GACAH,EAAA,qBA/DAK,EAAAS,SAAAV,EAAAC,IACO,KAAAM,GACPP,EAAAc,YACAlB,EAAA,sBACO,KAAAW,GACPP,EAAAe,MAAA,WACAnB,EAAA,wBACO,KAAAoB,KAAAT,IACPP,EAAAE,SAAA,UACAN,EAAA,kBACO,YAAAoB,KAAAT,GACPX,EAAA,kBACO,aAAeoB,KAAAT,GACtBX,EAAA,KAAAW,IAEAP,EAAAE,SAAA,YACAN,EAAA,wBAlBiDA,EAAA,qBAA1CA,EAAA,gBAsBP,SAAAe,EAAAX,EAAAC,GAIA,IAHA,IACAM,EADAU,GAAA,EAGA,OAAAV,EAAAP,EAAAQ,SAAA,CACA,GAAAS,GAAA,KAAAV,EAAA,CACAN,EAAAS,SAAAX,EACA,MAGAkB,EAAA,KAAAV,EAGA,OAAAX,EAAA,qBAGA,SAAAgB,EAAAZ,EAAAC,GAIA,IAHA,IACAM,EADAW,EAAA,EAGA,OAAAX,EAAAP,EAAAQ,SAAA,CACA,GAAAU,GAAA,QAAAX,EAAA,CACAN,EAAAS,SAAAX,EACA,MAGAmB,EAAA,KAAAX,EAAAW,EAAA,IAGA,OAAAtB,EAAA,qBAkBA,OACAuB,WAAA,SAAAC,GACA,OACAV,SAAAX,EACAsB,WAAAD,GAAA,EACAE,MAAA,KAGAC,MAAA,SAAAvB,EAAAC,GACA,GAAAD,EAAAwB,WAAA,YACAjC,EAAA,KACA,IAAAM,EAAAI,EAAAS,SAAAV,EAAAC,GACAwB,EAAAxB,EAAAqB,MAAArB,EAAAqB,MAAAhC,OAAA,GAUA,MATA,QAAAC,GAAA,QAAAkC,EAAA5B,EAAA,OAAgE,YAAAA,IAChE,QAAA4B,EAAA5B,EAAA,SAAkD4B,GAAA,WAAAA,IAAwC5B,EAAA,QAE1F,QAAA4B,GAAA,YAAyCT,KAAAzB,IAAAU,EAAAqB,MAAAI,MAEzC,KAAAnC,EACA,UAAAkC,EAAAxB,EAAAqB,MAAArB,EAAAqB,MAAAhC,OAAA,aAAmFW,EAAAqB,MAAAK,KAAA,KAC1E,KAAApC,EAAoBU,EAAAqB,MAAAI,MAAqB,UAAAnC,EAAAU,EAAAqB,MAAAK,KAAA,UAAsD,KAAAF,GAAsB,WAAAlC,GAAAU,EAAAqB,MAAAK,KAAA,QAE9H9B,GAEA+B,OAAA,SAAA3B,EAAA4B,GACA,IAAAC,EAAA7B,EAAAqB,MAAAhC,OAEA,MADA,MAAgB0B,KAAAa,KAAAC,GAAA,QAAA7B,EAAAqB,MAAArB,EAAAqB,MAAAhC,OAAA,QAChBW,EAAAoB,WAAAS,EAAAnC,GAEAoC,cAAA,OAGAjD,EAAAkD,WAAA,6BAnKAC,CAAQC,EAAQ","file":"static/js/59.91303d11.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"nginx\", function (config) {\n    function words(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var keywords = words(\n    /* ngxDirectiveControl */\n    \"break return rewrite set\" +\n    /* ngxDirective */\n    \" accept_mutex accept_mutex_delay access_log add_after_body add_before_body add_header addition_types aio alias allow ancient_browser ancient_browser_value auth_basic auth_basic_user_file auth_http auth_http_header auth_http_timeout autoindex autoindex_exact_size autoindex_localtime charset charset_types client_body_buffer_size client_body_in_file_only client_body_in_single_buffer client_body_temp_path client_body_timeout client_header_buffer_size client_header_timeout client_max_body_size connection_pool_size create_full_put_path daemon dav_access dav_methods debug_connection debug_points default_type degradation degrade deny devpoll_changes devpoll_events directio directio_alignment empty_gif env epoll_events error_log eventport_events expires fastcgi_bind fastcgi_buffer_size fastcgi_buffers fastcgi_busy_buffers_size fastcgi_cache fastcgi_cache_key fastcgi_cache_methods fastcgi_cache_min_uses fastcgi_cache_path fastcgi_cache_use_stale fastcgi_cache_valid fastcgi_catch_stderr fastcgi_connect_timeout fastcgi_hide_header fastcgi_ignore_client_abort fastcgi_ignore_headers fastcgi_index fastcgi_intercept_errors fastcgi_max_temp_file_size fastcgi_next_upstream fastcgi_param fastcgi_pass_header fastcgi_pass_request_body fastcgi_pass_request_headers fastcgi_read_timeout fastcgi_send_lowat fastcgi_send_timeout fastcgi_split_path_info fastcgi_store fastcgi_store_access fastcgi_temp_file_write_size fastcgi_temp_path fastcgi_upstream_fail_timeout fastcgi_upstream_max_fails flv geoip_city geoip_country google_perftools_profiles gzip gzip_buffers gzip_comp_level gzip_disable gzip_hash gzip_http_version gzip_min_length gzip_no_buffer gzip_proxied gzip_static gzip_types gzip_vary gzip_window if_modified_since ignore_invalid_headers image_filter image_filter_buffer image_filter_jpeg_quality image_filter_transparency imap_auth imap_capabilities imap_client_buffer index ip_hash keepalive_requests keepalive_timeout kqueue_changes kqueue_events large_client_header_buffers limit_conn limit_conn_log_level limit_rate limit_rate_after limit_req limit_req_log_level limit_req_zone limit_zone lingering_time lingering_timeout lock_file log_format log_not_found log_subrequest map_hash_bucket_size map_hash_max_size master_process memcached_bind memcached_buffer_size memcached_connect_timeout memcached_next_upstream memcached_read_timeout memcached_send_timeout memcached_upstream_fail_timeout memcached_upstream_max_fails merge_slashes min_delete_depth modern_browser modern_browser_value msie_padding msie_refresh multi_accept open_file_cache open_file_cache_errors open_file_cache_events open_file_cache_min_uses open_file_cache_valid open_log_file_cache output_buffers override_charset perl perl_modules perl_require perl_set pid pop3_auth pop3_capabilities port_in_redirect postpone_gzipping postpone_output protocol proxy proxy_bind proxy_buffer proxy_buffer_size proxy_buffering proxy_buffers proxy_busy_buffers_size proxy_cache proxy_cache_key proxy_cache_methods proxy_cache_min_uses proxy_cache_path proxy_cache_use_stale proxy_cache_valid proxy_connect_timeout proxy_headers_hash_bucket_size proxy_headers_hash_max_size proxy_hide_header proxy_ignore_client_abort proxy_ignore_headers proxy_intercept_errors proxy_max_temp_file_size proxy_method proxy_next_upstream proxy_pass_error_message proxy_pass_header proxy_pass_request_body proxy_pass_request_headers proxy_read_timeout proxy_redirect proxy_send_lowat proxy_send_timeout proxy_set_body proxy_set_header proxy_ssl_session_reuse proxy_store proxy_store_access proxy_temp_file_write_size proxy_temp_path proxy_timeout proxy_upstream_fail_timeout proxy_upstream_max_fails random_index read_ahead real_ip_header recursive_error_pages request_pool_size reset_timedout_connection resolver resolver_timeout rewrite_log rtsig_overflow_events rtsig_overflow_test rtsig_overflow_threshold rtsig_signo satisfy secure_link_secret send_lowat send_timeout sendfile sendfile_max_chunk server_name_in_redirect server_names_hash_bucket_size server_names_hash_max_size server_tokens set_real_ip_from smtp_auth smtp_capabilities smtp_client_buffer smtp_greeting_delay so_keepalive source_charset ssi ssi_ignore_recycled_buffers ssi_min_file_chunk ssi_silent_errors ssi_types ssi_value_length ssl ssl_certificate ssl_certificate_key ssl_ciphers ssl_client_certificate ssl_crl ssl_dhparam ssl_engine ssl_prefer_server_ciphers ssl_protocols ssl_session_cache ssl_session_timeout ssl_verify_client ssl_verify_depth starttls stub_status sub_filter sub_filter_once sub_filter_types tcp_nodelay tcp_nopush thread_stack_size timeout timer_resolution types_hash_bucket_size types_hash_max_size underscores_in_headers uninitialized_variable_warn use user userid userid_domain userid_expires userid_mark userid_name userid_p3p userid_path userid_service valid_referers variables_hash_bucket_size variables_hash_max_size worker_connections worker_cpu_affinity worker_priority worker_processes worker_rlimit_core worker_rlimit_nofile worker_rlimit_sigpending worker_threads working_directory xclient xml_entities xslt_stylesheet xslt_typesdrew@li229-23\");\n    var keywords_block = words(\n    /* ngxDirectiveBlock */\n    \"http mail events server types location upstream charset_map limit_except if geo map\");\n    var keywords_important = words(\n    /* ngxDirectiveImportant */\n    \"include root server server_name listen internal proxy_pass memcached_pass fastcgi_pass try_files\");\n    var indentUnit = config.indentUnit,\n        type;\n\n    function ret(style, tp) {\n      type = tp;\n      return style;\n    }\n\n    function tokenBase(stream, state) {\n      stream.eatWhile(/[\\w\\$_]/);\n      var cur = stream.current();\n\n      if (keywords.propertyIsEnumerable(cur)) {\n        return \"keyword\";\n      } else if (keywords_block.propertyIsEnumerable(cur)) {\n        return \"variable-2\";\n      } else if (keywords_important.propertyIsEnumerable(cur)) {\n        return \"string-2\";\n      }\n      /**/\n\n\n      var ch = stream.next();\n\n      if (ch == \"@\") {\n        stream.eatWhile(/[\\w\\\\\\-]/);\n        return ret(\"meta\", stream.current());\n      } else if (ch == \"/\" && stream.eat(\"*\")) {\n        state.tokenize = tokenCComment;\n        return tokenCComment(stream, state);\n      } else if (ch == \"<\" && stream.eat(\"!\")) {\n        state.tokenize = tokenSGMLComment;\n        return tokenSGMLComment(stream, state);\n      } else if (ch == \"=\") ret(null, \"compare\");else if ((ch == \"~\" || ch == \"|\") && stream.eat(\"=\")) return ret(null, \"compare\");else if (ch == \"\\\"\" || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (ch == \"!\") {\n        stream.match(/^\\s*\\w*/);\n        return ret(\"keyword\", \"important\");\n      } else if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w.%]/);\n        return ret(\"number\", \"unit\");\n      } else if (/[,.+>*\\/]/.test(ch)) {\n        return ret(null, \"select-op\");\n      } else if (/[;{}:\\[\\]]/.test(ch)) {\n        return ret(null, ch);\n      } else {\n        stream.eatWhile(/[\\w\\\\\\-]/);\n        return ret(\"variable\", \"variable\");\n      }\n    }\n\n    function tokenCComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while ((ch = stream.next()) != null) {\n        if (maybeEnd && ch == \"/\") {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return ret(\"comment\", \"comment\");\n    }\n\n    function tokenSGMLComment(stream, state) {\n      var dashes = 0,\n          ch;\n\n      while ((ch = stream.next()) != null) {\n        if (dashes >= 2 && ch == \">\") {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        dashes = ch == \"-\" ? dashes + 1 : 0;\n      }\n\n      return ret(\"comment\", \"comment\");\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && !escaped) break;\n          escaped = !escaped && ch == \"\\\\\";\n        }\n\n        if (!escaped) state.tokenize = tokenBase;\n        return ret(\"string\", \"string\");\n      };\n    }\n\n    return {\n      startState: function startState(base) {\n        return {\n          tokenize: tokenBase,\n          baseIndent: base || 0,\n          stack: []\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        type = null;\n        var style = state.tokenize(stream, state);\n        var context = state.stack[state.stack.length - 1];\n        if (type == \"hash\" && context == \"rule\") style = \"atom\";else if (style == \"variable\") {\n          if (context == \"rule\") style = \"number\";else if (!context || context == \"@media{\") style = \"tag\";\n        }\n        if (context == \"rule\" && /^[\\{\\};]$/.test(type)) state.stack.pop();\n\n        if (type == \"{\") {\n          if (context == \"@media\") state.stack[state.stack.length - 1] = \"@media{\";else state.stack.push(\"{\");\n        } else if (type == \"}\") state.stack.pop();else if (type == \"@media\") state.stack.push(\"@media\");else if (context == \"{\" && type != \"comment\") state.stack.push(\"rule\");\n\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        var n = state.stack.length;\n        if (/^\\}/.test(textAfter)) n -= state.stack[state.stack.length - 1] == \"rule\" ? 2 : 1;\n        return state.baseIndent + n * indentUnit;\n      },\n      electricChars: \"}\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-nginx-conf\", \"nginx\");\n});"],"sourceRoot":""}