{"version":3,"sources":["../node_modules/codemirror/mode/forth/forth.js"],"names":["CodeMirror","toWordList","words","ret","split","forEach","e","push","name","coreWordList","immediateWordList","defineMode","searchWordList","wordList","word","i","length","toUpperCase","startState","state","base","token","stream","stt","mat","eatSpace","match","backUp","undefined","skipToEnd","eatWhile","s","eat","defineMIME","mod","__webpack_require__"],"mappings":"+EAQC,SAAAA,GACD,aAEA,SAAAC,EAAAC,GACA,IAAAC,EAAA,GAMA,OALAD,EAAAE,MAAA,KAAAC,QAAA,SAAAC,GACAH,EAAAI,KAAA,CACAC,KAAAF,MAGAH,EAGA,IAAAM,EAAAR,EAAA,u6BAsCAS,EAAAT,EAAA,oIACAD,EAAAW,WAAA,mBACA,SAAAC,EAAAC,EAAAC,GACA,IAAAC,EAEA,IAAAA,EAAAF,EAAAG,OAAA,EAAmCD,GAAA,EAAQA,IAC3C,GAAAF,EAAAE,GAAAP,OAAAM,EAAAG,cACA,OAAAJ,EAAAE,GAOA,OACAG,WAAA,WACA,OACAC,MAAA,GACAC,KAAA,GACAX,eACAC,oBACAG,SAAA,KAGAQ,MAAA,SAAAC,EAAAC,GACA,IAAAC,EAEA,GAAAF,EAAAG,WACA,YAGA,QAAAF,EAAAJ,MAAA,CAEA,GAAAG,EAAAI,MAAA,wBAEA,OADAH,EAAAJ,MAAA,eACA,sBAKA,GAFAK,EAAAF,EAAAI,MAAA,wBAOA,OAJAH,EAAAV,SAAAN,KAAA,CACAC,KAAAgB,EAAA,GAAAP,gBAEAM,EAAAJ,MAAA,eACA,MAAAI,EAAAJ,MAKA,GAFAK,EAAAF,EAAAI,MAAA,uFAMA,OAHAH,EAAAV,SAAAN,KAAA,CACAC,KAAAgB,EAAA,GAAAP,gBAEA,MAAAM,EAAAJ,MAKA,GAFAK,EAAAF,EAAAI,MAAA,+BAGA,gBAAAH,EAAAJ,UAES,CAGT,GAAAG,EAAAI,MAAA,gBAGA,OAFAH,EAAAJ,MAAA,GACAG,EAAAK,OAAA,GACA,sBAGA,GAAAL,EAAAI,MAAA,eAEA,OADAH,EAAAJ,MAAA,GACA,sBAGA,GAAAG,EAAAI,MAAA,4BACA,gBAOA,OAFAF,EAAAF,EAAAI,MAAA,uBAGAE,IAAAhB,EAAAW,EAAAV,SAAAW,EAAA,IACA,WAAAD,EAAAJ,MAIA,OAAAK,EAAA,IACAF,EAAAO,YACA,UAAAN,EAAAJ,YAIAS,IAAAhB,EAAAW,EAAAd,aAAAe,EAAA,IACA,UAAAD,EAAAJ,WAGAS,IAAAhB,EAAAW,EAAAb,kBAAAc,EAAA,IACA,UAAAD,EAAAJ,MAGA,MAAAK,EAAA,IACAF,EAAAQ,SAAA,SAAAC,GACA,YAAAA,IAEAT,EAAAU,IAAA,KACA,UAAAT,EAAAJ,OAIA,OAAAK,EAAA,IACAF,EAAAQ,SAAA,SAAAC,GACA,YAAAA,IAEAT,EAAAU,IAAA,KACA,SAAAT,EAAAJ,OAGA,OAAAK,EAAA,WAAAA,EAAA,WAAAA,EAAA,IACAF,EAAAQ,SAAA,SAAAC,GACA,YAAAA,IAEAT,EAAAU,IAAA,KACA,SAAAT,EAAAJ,OAIAK,EAAA,eACA,SAAAD,EAAAJ,MAMA,OAAAI,EAAAJ,WArDA,MA0DAnB,EAAAiC,WAAA,wBApMAC,CAAQC,EAAQ","file":"static/js/32.0265e2b2.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Author: Aliaksei Chapyzhenka\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function toWordList(words) {\n    var ret = [];\n    words.split(' ').forEach(function (e) {\n      ret.push({\n        name: e\n      });\n    });\n    return ret;\n  }\n\n  var coreWordList = toWordList('INVERT AND OR XOR\\\n 2* 2/ LSHIFT RSHIFT\\\n 0= = 0< < > U< MIN MAX\\\n 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP\\\n >R R> R@\\\n + - 1+ 1- ABS NEGATE\\\n S>D * M* UM*\\\n FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD\\\n HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2!\\\n ALIGN ALIGNED +! ALLOT\\\n CHAR [CHAR] [ ] BL\\\n FIND EXECUTE IMMEDIATE COUNT LITERAL STATE\\\n ; DOES> >BODY\\\n EVALUATE\\\n SOURCE >IN\\\n <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL\\\n FILL MOVE\\\n . CR EMIT SPACE SPACES TYPE U. .R U.R\\\n ACCEPT\\\n TRUE FALSE\\\n <> U> 0<> 0>\\\n NIP TUCK ROLL PICK\\\n 2>R 2R@ 2R>\\\n WITHIN UNUSED MARKER\\\n I J\\\n TO\\\n COMPILE, [COMPILE]\\\n SAVE-INPUT RESTORE-INPUT\\\n PAD ERASE\\\n 2LITERAL DNEGATE\\\n D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS\\\n M+ M*/ D. D.R 2ROT DU<\\\n CATCH THROW\\\n FREE RESIZE ALLOCATE\\\n CS-PICK CS-ROLL\\\n GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER\\\n PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER\\\n -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL');\n  var immediateWordList = toWordList('IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE');\n  CodeMirror.defineMode('forth', function () {\n    function searchWordList(wordList, word) {\n      var i;\n\n      for (i = wordList.length - 1; i >= 0; i--) {\n        if (wordList[i].name === word.toUpperCase()) {\n          return wordList[i];\n        }\n      }\n\n      return undefined;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          state: '',\n          base: 10,\n          coreWordList: coreWordList,\n          immediateWordList: immediateWordList,\n          wordList: []\n        };\n      },\n      token: function token(stream, stt) {\n        var mat;\n\n        if (stream.eatSpace()) {\n          return null;\n        }\n\n        if (stt.state === '') {\n          // interpretation\n          if (stream.match(/^(\\]|:NONAME)(\\s|$)/i)) {\n            stt.state = ' compilation';\n            return 'builtin compilation';\n          }\n\n          mat = stream.match(/^(\\:)\\s+(\\S+)(\\s|$)+/);\n\n          if (mat) {\n            stt.wordList.push({\n              name: mat[2].toUpperCase()\n            });\n            stt.state = ' compilation';\n            return 'def' + stt.state;\n          }\n\n          mat = stream.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\\s+(\\S+)(\\s|$)+/i);\n\n          if (mat) {\n            stt.wordList.push({\n              name: mat[2].toUpperCase()\n            });\n            return 'def' + stt.state;\n          }\n\n          mat = stream.match(/^(\\'|\\[\\'\\])\\s+(\\S+)(\\s|$)+/);\n\n          if (mat) {\n            return 'builtin' + stt.state;\n          }\n        } else {\n          // compilation\n          // ; [\n          if (stream.match(/^(\\;|\\[)(\\s)/)) {\n            stt.state = '';\n            stream.backUp(1);\n            return 'builtin compilation';\n          }\n\n          if (stream.match(/^(\\;|\\[)($)/)) {\n            stt.state = '';\n            return 'builtin compilation';\n          }\n\n          if (stream.match(/^(POSTPONE)\\s+\\S+(\\s|$)+/)) {\n            return 'builtin';\n          }\n        } // dynamic wordlist\n\n\n        mat = stream.match(/^(\\S+)(\\s+|$)/);\n\n        if (mat) {\n          if (searchWordList(stt.wordList, mat[1]) !== undefined) {\n            return 'variable' + stt.state;\n          } // comments\n\n\n          if (mat[1] === '\\\\') {\n            stream.skipToEnd();\n            return 'comment' + stt.state;\n          } // core words\n\n\n          if (searchWordList(stt.coreWordList, mat[1]) !== undefined) {\n            return 'builtin' + stt.state;\n          }\n\n          if (searchWordList(stt.immediateWordList, mat[1]) !== undefined) {\n            return 'keyword' + stt.state;\n          }\n\n          if (mat[1] === '(') {\n            stream.eatWhile(function (s) {\n              return s !== ')';\n            });\n            stream.eat(')');\n            return 'comment' + stt.state;\n          } // // strings\n\n\n          if (mat[1] === '.(') {\n            stream.eatWhile(function (s) {\n              return s !== ')';\n            });\n            stream.eat(')');\n            return 'string' + stt.state;\n          }\n\n          if (mat[1] === 'S\"' || mat[1] === '.\"' || mat[1] === 'C\"') {\n            stream.eatWhile(function (s) {\n              return s !== '\"';\n            });\n            stream.eat('\"');\n            return 'string' + stt.state;\n          } // numbers\n\n\n          if (mat[1] - 0xfffffffff) {\n            return 'number' + stt.state;\n          } // if (mat[1].match(/^[-+]?[0-9]+\\.[0-9]*/)) {\n          //     return 'number' + stt.state;\n          // }\n\n\n          return 'atom' + stt.state;\n        }\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-forth\", \"forth\");\n});"],"sourceRoot":""}