{"version":3,"sources":["../node_modules/codemirror/mode/webidl/webidl.js"],"names":["CodeMirror","wordRegexp","words","RegExp","join","builtinArray","builtins","typeArray","types","keywordArray","keywords","atomArray","atoms","registerHelper","concat","startDefs","endDefs","singleOperators","integers","floats","identifiers","identifiersEnd","strings","multilineComments","multilineCommentsStart","multilineCommentsEnd","defineMode","startState","inComment","lastToken","startDef","endDef","token","stream","state","style","eatSpace","match","skipToEnd","nextToken","next","readToken","cur","current","test","defineMIME","mod","__webpack_require__"],"mappings":"gFAOC,SAAAA,GACD,aAEA,SAAAC,EAAAC,GACA,WAAAC,OAAA,MAAAD,EAAAE,KAAA,gBAIA,IAAAC,EAAA,4VACAC,EAAAL,EAAAI,GACAE,EAAA,2BACA,gCACA,yBACA,UACA,0JACA,uGACA,MACA,QAEAC,EAAAP,EAAAM,GACAE,EAAA,oOAEA,4BACAC,EAAAT,EAAAQ,GACAE,EAAA,gBACA,iBACA,QAEAC,EAAAX,EAAAU,GACAX,EAAAa,eAAA,qBAAAR,EAAAS,OAAAP,GAAAO,OAAAL,GAAAK,OAAAH,IACA,IACAI,EAAAd,EADA,8CAGAe,EAAAf,EADA,aAEAgB,EAAA,WACAC,EAAA,6CACAC,EAAA,+EACAC,EAAA,4BACAC,EAAA,oCACAC,EAAA,WACAC,EAAA,eACAC,EAAA,UACAC,EAAA,WAqEAzB,EAAA0B,WAAA,oBACA,OACAC,WAAA,WACA,OAEAC,WAAA,EAEAC,UAAA,GAEAC,UAAA,EAEAC,QAAA,IAGAC,MAAA,SAAAC,EAAAC,GACA,IAAAC,EAlFA,SAAAF,EAAAC,GAEA,GAAAD,EAAAG,WAAA,YAEA,GAAAF,EAAAN,UACA,OAAAK,EAAAI,MAAAZ,IACAS,EAAAN,WAAA,EACA,YAGAK,EAAAK,YACA,WAGA,GAAAL,EAAAI,MAAA,MAEA,OADAJ,EAAAK,YACA,UAGA,GAAAL,EAAAI,MAAAd,GAAA,gBAEA,GAAAU,EAAAI,MAAAb,GAEA,OADAU,EAAAN,WAAA,EACA,UAIA,GAAAK,EAAAI,MAAA,mBACAJ,EAAAI,MAAAnB,IAAAe,EAAAI,MAAAlB,IAAA,eAIA,GAAAc,EAAAI,MAAAf,GAAA,eAEA,GAAAY,EAAAJ,UAAAG,EAAAI,MAAAjB,GAAA,YAEA,GAAAc,EAAAH,QAAAE,EAAAI,MAAAhB,GAEA,OADAa,EAAAH,QAAA,EACA,MAGA,GAAAE,EAAAI,MAAA3B,GAAA,gBAEA,GAAAuB,EAAAI,MAAA7B,GAAA,CACA,IAAAqB,EAAAK,EAAAL,UACAU,GAAAN,EAAAI,MAAA,0BAEA,YAAAR,GAAA,eAAAA,GAAA,eAAAU,GAAA,MAAAA,EAEA,UAGA,aAIA,OAAAN,EAAAI,MAAA/B,GAAA,UACA2B,EAAAI,MAAAzB,GAAA,OACAqB,EAAAI,MAAAjB,GAAA,WAEAa,EAAAI,MAAApB,GAAA,YAEAgB,EAAAO,OACA,MAmBAC,CAAAR,EAAAC,GAEA,GAAAC,EAAA,CACA,IAAAO,EAAAT,EAAAU,UACAT,EAAAL,UAAAa,EAEA,YAAAP,GACAD,EAAAJ,SAAAf,EAAA6B,KAAAF,GACAR,EAAAH,OAAAG,EAAAH,QAAAf,EAAA4B,KAAAF,IAEAR,EAAAJ,UAAA,EAIA,OAAAK,MAIAnC,EAAA6C,WAAA,0BAnJAC,CAAQC,EAAQ","file":"static/js/106.95870f07.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  ;\n  var builtinArray = [\"Clamp\", \"Constructor\", \"EnforceRange\", \"Exposed\", \"ImplicitThis\", \"Global\", \"PrimaryGlobal\", \"LegacyArrayClass\", \"LegacyUnenumerableNamedProperties\", \"LenientThis\", \"NamedConstructor\", \"NewObject\", \"NoInterfaceObject\", \"OverrideBuiltins\", \"PutForwards\", \"Replaceable\", \"SameObject\", \"TreatNonObjectAsNull\", \"TreatNullAs\", \"EmptyString\", \"Unforgeable\", \"Unscopeable\"];\n  var builtins = wordRegexp(builtinArray);\n  var typeArray = [\"unsigned\", \"short\", \"long\", // UnsignedIntegerType\n  \"unrestricted\", \"float\", \"double\", // UnrestrictedFloatType\n  \"boolean\", \"byte\", \"octet\", // Rest of PrimitiveType\n  \"Promise\", // PromiseType\n  \"ArrayBuffer\", \"DataView\", \"Int8Array\", \"Int16Array\", \"Int32Array\", \"Uint8Array\", \"Uint16Array\", \"Uint32Array\", \"Uint8ClampedArray\", \"Float32Array\", \"Float64Array\", // BufferRelatedType\n  \"ByteString\", \"DOMString\", \"USVString\", \"sequence\", \"object\", \"RegExp\", \"Error\", \"DOMException\", \"FrozenArray\", // Rest of NonAnyType\n  \"any\", // Rest of SingleType\n  \"void\" // Rest of ReturnType\n  ];\n  var types = wordRegexp(typeArray);\n  var keywordArray = [\"attribute\", \"callback\", \"const\", \"deleter\", \"dictionary\", \"enum\", \"getter\", \"implements\", \"inherit\", \"interface\", \"iterable\", \"legacycaller\", \"maplike\", \"partial\", \"required\", \"serializer\", \"setlike\", \"setter\", \"static\", \"stringifier\", \"typedef\", // ArgumentNameKeyword except\n  // \"unrestricted\"\n  \"optional\", \"readonly\", \"or\"];\n  var keywords = wordRegexp(keywordArray);\n  var atomArray = [\"true\", \"false\", // BooleanLiteral\n  \"Infinity\", \"NaN\", // FloatLiteral\n  \"null\" // Rest of ConstValue\n  ];\n  var atoms = wordRegexp(atomArray);\n  CodeMirror.registerHelper(\"hintWords\", \"webidl\", builtinArray.concat(typeArray).concat(keywordArray).concat(atomArray));\n  var startDefArray = [\"callback\", \"dictionary\", \"enum\", \"interface\"];\n  var startDefs = wordRegexp(startDefArray);\n  var endDefArray = [\"typedef\"];\n  var endDefs = wordRegexp(endDefArray);\n  var singleOperators = /^[:<=>?]/;\n  var integers = /^-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/;\n  var floats = /^-?(([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/;\n  var identifiers = /^_?[A-Za-z][0-9A-Z_a-z-]*/;\n  var identifiersEnd = /^_?[A-Za-z][0-9A-Z_a-z-]*(?=\\s*;)/;\n  var strings = /^\"[^\"]*\"/;\n  var multilineComments = /^\\/\\*.*?\\*\\//;\n  var multilineCommentsStart = /^\\/\\*.*/;\n  var multilineCommentsEnd = /^.*?\\*\\//;\n\n  function readToken(stream, state) {\n    // whitespace\n    if (stream.eatSpace()) return null; // comment\n\n    if (state.inComment) {\n      if (stream.match(multilineCommentsEnd)) {\n        state.inComment = false;\n        return \"comment\";\n      }\n\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (stream.match(\"//\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (stream.match(multilineComments)) return \"comment\";\n\n    if (stream.match(multilineCommentsStart)) {\n      state.inComment = true;\n      return \"comment\";\n    } // integer and float\n\n\n    if (stream.match(/^-?[0-9\\.]/, false)) {\n      if (stream.match(integers) || stream.match(floats)) return \"number\";\n    } // string\n\n\n    if (stream.match(strings)) return \"string\"; // identifier\n\n    if (state.startDef && stream.match(identifiers)) return \"def\";\n\n    if (state.endDef && stream.match(identifiersEnd)) {\n      state.endDef = false;\n      return \"def\";\n    }\n\n    if (stream.match(keywords)) return \"keyword\";\n\n    if (stream.match(types)) {\n      var lastToken = state.lastToken;\n      var nextToken = (stream.match(/^\\s*(.+?)\\b/, false) || [])[1];\n\n      if (lastToken === \":\" || lastToken === \"implements\" || nextToken === \"implements\" || nextToken === \"=\") {\n        // Used as identifier\n        return \"builtin\";\n      } else {\n        // Used as type\n        return \"variable-3\";\n      }\n    }\n\n    if (stream.match(builtins)) return \"builtin\";\n    if (stream.match(atoms)) return \"atom\";\n    if (stream.match(identifiers)) return \"variable\"; // other\n\n    if (stream.match(singleOperators)) return \"operator\"; // unrecognized\n\n    stream.next();\n    return null;\n  }\n\n  ;\n  CodeMirror.defineMode(\"webidl\", function () {\n    return {\n      startState: function startState() {\n        return {\n          // Is in multiline comment\n          inComment: false,\n          // Last non-whitespace, matched token\n          lastToken: \"\",\n          // Next token is a definition\n          startDef: false,\n          // Last token of the statement is a definition\n          endDef: false\n        };\n      },\n      token: function token(stream, state) {\n        var style = readToken(stream, state);\n\n        if (style) {\n          var cur = stream.current();\n          state.lastToken = cur;\n\n          if (style === \"keyword\") {\n            state.startDef = startDefs.test(cur);\n            state.endDef = state.endDef || endDefs.test(cur);\n          } else {\n            state.startDef = false;\n          }\n        }\n\n        return style;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-webidl\", \"webidl\");\n});"],"sourceRoot":""}