{"version":3,"sources":["../node_modules/codemirror/mode/textile/textile.js"],"names":["CodeMirror","TOKEN_STYLES","addition","attributes","bold","cite","code","definitionList","deletion","div","em","footnote","footCite","header","html","image","italic","link","linkDefinition","list1","list2","list3","notextile","pre","p","quote","span","specialChar","strong","sub","sup","table","tableHeading","handlePhraseModifier","stream","state","ch","eat","togglePhraseModifier","match","tokenStyles","spec","tokenStylesWith","type","phraseModifier","closeRE","openSize","charBefore","pos","string","charAt","charAfter","peek","test","RegExp","source","mode","Modes","disabled","textileDisabled","styles","layoutType","push","concat","i","arguments","length","activeStyles","join","extraStyles","blankLine","spanningLayout","key","hasOwnProperty","newLayout","REs","cache","single","bc","bq","definitionListEnd","drawTable","foot","list","para","tableCellAttributes","tableText","text","align","selector","lang","pad","css","createRe","name","makeRe","RE","choiceRe","pattern","arg","parts","unshift","apply","blockType","newMode","parseInt","next","layoutLength","listDepth","listMod","skipToEnd","tableCell","defineMode","startState","token","sol","startNewLine","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/90.8255eb1b.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") {\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  } else if (typeof define == \"function\" && define.amd) {\n    // AMD\n    define([\"../../lib/codemirror\"], mod);\n  } else {\n    // Plain browser env\n    mod(CodeMirror);\n  }\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var TOKEN_STYLES = {\n    addition: \"positive\",\n    attributes: \"attribute\",\n    bold: \"strong\",\n    cite: \"keyword\",\n    code: \"atom\",\n    definitionList: \"number\",\n    deletion: \"negative\",\n    div: \"punctuation\",\n    em: \"em\",\n    footnote: \"variable\",\n    footCite: \"qualifier\",\n    header: \"header\",\n    html: \"comment\",\n    image: \"string\",\n    italic: \"em\",\n    link: \"link\",\n    linkDefinition: \"link\",\n    list1: \"variable-2\",\n    list2: \"variable-3\",\n    list3: \"keyword\",\n    notextile: \"string-2\",\n    pre: \"operator\",\n    p: \"property\",\n    quote: \"bracket\",\n    span: \"quote\",\n    specialChar: \"tag\",\n    strong: \"strong\",\n    sub: \"builtin\",\n    sup: \"builtin\",\n    table: \"variable-3\",\n    tableHeading: \"operator\"\n  };\n\n  function startNewLine(stream, state) {\n    state.mode = Modes.newLayout;\n    state.tableHeading = false;\n    if (state.layoutType === \"definitionList\" && state.spanningLayout && stream.match(RE(\"definitionListEnd\"), false)) state.spanningLayout = false;\n  }\n\n  function handlePhraseModifier(stream, state, ch) {\n    if (ch === \"_\") {\n      if (stream.eat(\"_\")) return togglePhraseModifier(stream, state, \"italic\", /__/, 2);else return togglePhraseModifier(stream, state, \"em\", /_/, 1);\n    }\n\n    if (ch === \"*\") {\n      if (stream.eat(\"*\")) {\n        return togglePhraseModifier(stream, state, \"bold\", /\\*\\*/, 2);\n      }\n\n      return togglePhraseModifier(stream, state, \"strong\", /\\*/, 1);\n    }\n\n    if (ch === \"[\") {\n      if (stream.match(/\\d+\\]/)) state.footCite = true;\n      return tokenStyles(state);\n    }\n\n    if (ch === \"(\") {\n      var spec = stream.match(/^(r|tm|c)\\)/);\n      if (spec) return tokenStylesWith(state, TOKEN_STYLES.specialChar);\n    }\n\n    if (ch === \"<\" && stream.match(/(\\w+)[^>]+>[^<]+<\\/\\1>/)) return tokenStylesWith(state, TOKEN_STYLES.html);\n    if (ch === \"?\" && stream.eat(\"?\")) return togglePhraseModifier(stream, state, \"cite\", /\\?\\?/, 2);\n    if (ch === \"=\" && stream.eat(\"=\")) return togglePhraseModifier(stream, state, \"notextile\", /==/, 2);\n    if (ch === \"-\" && !stream.eat(\"-\")) return togglePhraseModifier(stream, state, \"deletion\", /-/, 1);\n    if (ch === \"+\") return togglePhraseModifier(stream, state, \"addition\", /\\+/, 1);\n    if (ch === \"~\") return togglePhraseModifier(stream, state, \"sub\", /~/, 1);\n    if (ch === \"^\") return togglePhraseModifier(stream, state, \"sup\", /\\^/, 1);\n    if (ch === \"%\") return togglePhraseModifier(stream, state, \"span\", /%/, 1);\n    if (ch === \"@\") return togglePhraseModifier(stream, state, \"code\", /@/, 1);\n\n    if (ch === \"!\") {\n      var type = togglePhraseModifier(stream, state, \"image\", /(?:\\([^\\)]+\\))?!/, 1);\n      stream.match(/^:\\S+/); // optional Url portion\n\n      return type;\n    }\n\n    return tokenStyles(state);\n  }\n\n  function togglePhraseModifier(stream, state, phraseModifier, closeRE, openSize) {\n    var charBefore = stream.pos > openSize ? stream.string.charAt(stream.pos - openSize - 1) : null;\n    var charAfter = stream.peek();\n\n    if (state[phraseModifier]) {\n      if ((!charAfter || /\\W/.test(charAfter)) && charBefore && /\\S/.test(charBefore)) {\n        var type = tokenStyles(state);\n        state[phraseModifier] = false;\n        return type;\n      }\n    } else if ((!charBefore || /\\W/.test(charBefore)) && charAfter && /\\S/.test(charAfter) && stream.match(new RegExp(\"^.*\\\\S\" + closeRE.source + \"(?:\\\\W|$)\"), false)) {\n      state[phraseModifier] = true;\n      state.mode = Modes.attributes;\n    }\n\n    return tokenStyles(state);\n  }\n\n  ;\n\n  function tokenStyles(state) {\n    var disabled = textileDisabled(state);\n    if (disabled) return disabled;\n    var styles = [];\n    if (state.layoutType) styles.push(TOKEN_STYLES[state.layoutType]);\n    styles = styles.concat(activeStyles(state, \"addition\", \"bold\", \"cite\", \"code\", \"deletion\", \"em\", \"footCite\", \"image\", \"italic\", \"link\", \"span\", \"strong\", \"sub\", \"sup\", \"table\", \"tableHeading\"));\n    if (state.layoutType === \"header\") styles.push(TOKEN_STYLES.header + \"-\" + state.header);\n    return styles.length ? styles.join(\" \") : null;\n  }\n\n  function textileDisabled(state) {\n    var type = state.layoutType;\n\n    switch (type) {\n      case \"notextile\":\n      case \"code\":\n      case \"pre\":\n        return TOKEN_STYLES[type];\n\n      default:\n        if (state.notextile) return TOKEN_STYLES.notextile + (type ? \" \" + TOKEN_STYLES[type] : \"\");\n        return null;\n    }\n  }\n\n  function tokenStylesWith(state, extraStyles) {\n    var disabled = textileDisabled(state);\n    if (disabled) return disabled;\n    var type = tokenStyles(state);\n    if (extraStyles) return type ? type + \" \" + extraStyles : extraStyles;else return type;\n  }\n\n  function activeStyles(state) {\n    var styles = [];\n\n    for (var i = 1; i < arguments.length; ++i) {\n      if (state[arguments[i]]) styles.push(TOKEN_STYLES[arguments[i]]);\n    }\n\n    return styles;\n  }\n\n  function blankLine(state) {\n    var spanningLayout = state.spanningLayout,\n        type = state.layoutType;\n\n    for (var key in state) {\n      if (state.hasOwnProperty(key)) delete state[key];\n    }\n\n    state.mode = Modes.newLayout;\n\n    if (spanningLayout) {\n      state.layoutType = type;\n      state.spanningLayout = true;\n    }\n  }\n\n  var REs = {\n    cache: {},\n    single: {\n      bc: \"bc\",\n      bq: \"bq\",\n      definitionList: /- .*?:=+/,\n      definitionListEnd: /.*=:\\s*$/,\n      div: \"div\",\n      drawTable: /\\|.*\\|/,\n      foot: /fn\\d+/,\n      header: /h[1-6]/,\n      html: /\\s*<(?:\\/)?(\\w+)(?:[^>]+)?>(?:[^<]+<\\/\\1>)?/,\n      link: /[^\"]+\":\\S/,\n      linkDefinition: /\\[[^\\s\\]]+\\]\\S+/,\n      list: /(?:#+|\\*+)/,\n      notextile: \"notextile\",\n      para: \"p\",\n      pre: \"pre\",\n      table: \"table\",\n      tableCellAttributes: /[\\/\\\\]\\d+/,\n      tableHeading: /\\|_\\./,\n      tableText: /[^\"_\\*\\[\\(\\?\\+~\\^%@|-]+/,\n      text: /[^!\"_=\\*\\[\\(<\\?\\+~\\^%@-]+/\n    },\n    attributes: {\n      align: /(?:<>|<|>|=)/,\n      selector: /\\([^\\(][^\\)]+\\)/,\n      lang: /\\[[^\\[\\]]+\\]/,\n      pad: /(?:\\(+|\\)+){1,2}/,\n      css: /\\{[^\\}]+\\}/\n    },\n    createRe: function createRe(name) {\n      switch (name) {\n        case \"drawTable\":\n          return REs.makeRe(\"^\", REs.single.drawTable, \"$\");\n\n        case \"html\":\n          return REs.makeRe(\"^\", REs.single.html, \"(?:\", REs.single.html, \")*\", \"$\");\n\n        case \"linkDefinition\":\n          return REs.makeRe(\"^\", REs.single.linkDefinition, \"$\");\n\n        case \"listLayout\":\n          return REs.makeRe(\"^\", REs.single.list, RE(\"allAttributes\"), \"*\\\\s+\");\n\n        case \"tableCellAttributes\":\n          return REs.makeRe(\"^\", REs.choiceRe(REs.single.tableCellAttributes, RE(\"allAttributes\")), \"+\\\\.\");\n\n        case \"type\":\n          return REs.makeRe(\"^\", RE(\"allTypes\"));\n\n        case \"typeLayout\":\n          return REs.makeRe(\"^\", RE(\"allTypes\"), RE(\"allAttributes\"), \"*\\\\.\\\\.?\", \"(\\\\s+|$)\");\n\n        case \"attributes\":\n          return REs.makeRe(\"^\", RE(\"allAttributes\"), \"+\");\n\n        case \"allTypes\":\n          return REs.choiceRe(REs.single.div, REs.single.foot, REs.single.header, REs.single.bc, REs.single.bq, REs.single.notextile, REs.single.pre, REs.single.table, REs.single.para);\n\n        case \"allAttributes\":\n          return REs.choiceRe(REs.attributes.selector, REs.attributes.css, REs.attributes.lang, REs.attributes.align, REs.attributes.pad);\n\n        default:\n          return REs.makeRe(\"^\", REs.single[name]);\n      }\n    },\n    makeRe: function makeRe() {\n      var pattern = \"\";\n\n      for (var i = 0; i < arguments.length; ++i) {\n        var arg = arguments[i];\n        pattern += typeof arg === \"string\" ? arg : arg.source;\n      }\n\n      return new RegExp(pattern);\n    },\n    choiceRe: function choiceRe() {\n      var parts = [arguments[0]];\n\n      for (var i = 1; i < arguments.length; ++i) {\n        parts[i * 2 - 1] = \"|\";\n        parts[i * 2] = arguments[i];\n      }\n\n      parts.unshift(\"(?:\");\n      parts.push(\")\");\n      return REs.makeRe.apply(null, parts);\n    }\n  };\n\n  function RE(name) {\n    return REs.cache[name] || (REs.cache[name] = REs.createRe(name));\n  }\n\n  var Modes = {\n    newLayout: function newLayout(stream, state) {\n      if (stream.match(RE(\"typeLayout\"), false)) {\n        state.spanningLayout = false;\n        return (state.mode = Modes.blockType)(stream, state);\n      }\n\n      var newMode;\n\n      if (!textileDisabled(state)) {\n        if (stream.match(RE(\"listLayout\"), false)) newMode = Modes.list;else if (stream.match(RE(\"drawTable\"), false)) newMode = Modes.table;else if (stream.match(RE(\"linkDefinition\"), false)) newMode = Modes.linkDefinition;else if (stream.match(RE(\"definitionList\"))) newMode = Modes.definitionList;else if (stream.match(RE(\"html\"), false)) newMode = Modes.html;\n      }\n\n      return (state.mode = newMode || Modes.text)(stream, state);\n    },\n    blockType: function blockType(stream, state) {\n      var match, type;\n      state.layoutType = null;\n      if (match = stream.match(RE(\"type\"))) type = match[0];else return (state.mode = Modes.text)(stream, state);\n\n      if (match = type.match(RE(\"header\"))) {\n        state.layoutType = \"header\";\n        state.header = parseInt(match[0][1]);\n      } else if (type.match(RE(\"bq\"))) {\n        state.layoutType = \"quote\";\n      } else if (type.match(RE(\"bc\"))) {\n        state.layoutType = \"code\";\n      } else if (type.match(RE(\"foot\"))) {\n        state.layoutType = \"footnote\";\n      } else if (type.match(RE(\"notextile\"))) {\n        state.layoutType = \"notextile\";\n      } else if (type.match(RE(\"pre\"))) {\n        state.layoutType = \"pre\";\n      } else if (type.match(RE(\"div\"))) {\n        state.layoutType = \"div\";\n      } else if (type.match(RE(\"table\"))) {\n        state.layoutType = \"table\";\n      }\n\n      state.mode = Modes.attributes;\n      return tokenStyles(state);\n    },\n    text: function text(stream, state) {\n      if (stream.match(RE(\"text\"))) return tokenStyles(state);\n      var ch = stream.next();\n      if (ch === '\"') return (state.mode = Modes.link)(stream, state);\n      return handlePhraseModifier(stream, state, ch);\n    },\n    attributes: function attributes(stream, state) {\n      state.mode = Modes.layoutLength;\n      if (stream.match(RE(\"attributes\"))) return tokenStylesWith(state, TOKEN_STYLES.attributes);else return tokenStyles(state);\n    },\n    layoutLength: function layoutLength(stream, state) {\n      if (stream.eat(\".\") && stream.eat(\".\")) state.spanningLayout = true;\n      state.mode = Modes.text;\n      return tokenStyles(state);\n    },\n    list: function list(stream, state) {\n      var match = stream.match(RE(\"list\"));\n      state.listDepth = match[0].length;\n      var listMod = (state.listDepth - 1) % 3;\n      if (!listMod) state.layoutType = \"list1\";else if (listMod === 1) state.layoutType = \"list2\";else state.layoutType = \"list3\";\n      state.mode = Modes.attributes;\n      return tokenStyles(state);\n    },\n    link: function link(stream, state) {\n      state.mode = Modes.text;\n\n      if (stream.match(RE(\"link\"))) {\n        stream.match(/\\S+/);\n        return tokenStylesWith(state, TOKEN_STYLES.link);\n      }\n\n      return tokenStyles(state);\n    },\n    linkDefinition: function linkDefinition(stream, state) {\n      stream.skipToEnd();\n      return tokenStylesWith(state, TOKEN_STYLES.linkDefinition);\n    },\n    definitionList: function definitionList(stream, state) {\n      stream.match(RE(\"definitionList\"));\n      state.layoutType = \"definitionList\";\n      if (stream.match(/\\s*$/)) state.spanningLayout = true;else state.mode = Modes.attributes;\n      return tokenStyles(state);\n    },\n    html: function html(stream, state) {\n      stream.skipToEnd();\n      return tokenStylesWith(state, TOKEN_STYLES.html);\n    },\n    table: function table(stream, state) {\n      state.layoutType = \"table\";\n      return (state.mode = Modes.tableCell)(stream, state);\n    },\n    tableCell: function tableCell(stream, state) {\n      if (stream.match(RE(\"tableHeading\"))) state.tableHeading = true;else stream.eat(\"|\");\n      state.mode = Modes.tableCellAttributes;\n      return tokenStyles(state);\n    },\n    tableCellAttributes: function tableCellAttributes(stream, state) {\n      state.mode = Modes.tableText;\n      if (stream.match(RE(\"tableCellAttributes\"))) return tokenStylesWith(state, TOKEN_STYLES.attributes);else return tokenStyles(state);\n    },\n    tableText: function tableText(stream, state) {\n      if (stream.match(RE(\"tableText\"))) return tokenStyles(state);\n\n      if (stream.peek() === \"|\") {\n        // end of cell\n        state.mode = Modes.tableCell;\n        return tokenStyles(state);\n      }\n\n      return handlePhraseModifier(stream, state, stream.next());\n    }\n  };\n  CodeMirror.defineMode(\"textile\", function () {\n    return {\n      startState: function startState() {\n        return {\n          mode: Modes.newLayout\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) startNewLine(stream, state);\n        return state.mode(stream, state);\n      },\n      blankLine: blankLine\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-textile\", \"textile\");\n});"],"sourceRoot":""}