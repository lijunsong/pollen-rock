{"version":3,"sources":["../node_modules/codemirror/mode/css/css.js"],"names":["CodeMirror","keySet","array","keys","i","length","toLowerCase","defineMode","config","parserConfig","inline","propertyKeywords","resolveMode","type","override","indentUnit","tokenHooks","documentTypes","mediaTypes","mediaFeatures","mediaValueKeywords","nonStandardPropertyKeywords","fontProperties","counterDescriptors","colorKeywords","valueKeywords","allowNested","lineComment","supportsAtComponent","ret","style","tp","tokenString","quote","stream","state","ch","escaped","next","backUp","tokenize","tokenParenthesized","match","Context","indent","prev","this","pushContext","context","indentation","popContext","pass","states","popAndPass","n","wordAsValue","word","current","hasOwnProperty","top","test","stateArg","charAt","block","maybeprop","prop","propBlock","_stream","parens","pseudo","atBlock","atComponentBlock","atBlock_parens","restricted_atBlock_before","restricted_atBlock","keyframes","at","interpolation","startState","base","token","eatSpace","result","eatWhile","eat","peek","textAfter","cx","Math","max","electricChars","blockCommentStart","blockCommentEnd","blockCommentContinue","fold","documentTypes_","mediaTypes_","mediaFeatures_","mediaValueKeywords_","propertyKeywords_","nonStandardPropertyKeywords_","colorKeywords_","valueKeywords_","allWords","concat","tokenCComment","maybeEnd","registerHelper","defineMIME","/","name","skipToEnd",":","$","#","helperType","@","&","mod","__webpack_require__"],"mappings":"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","file":"static/js/1.be50980a.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"css\", function (config, parserConfig) {\n    var inline = parserConfig.inline;\n    if (!parserConfig.propertyKeywords) parserConfig = CodeMirror.resolveMode(\"text/css\");\n    var indentUnit = config.indentUnit,\n        tokenHooks = parserConfig.tokenHooks,\n        documentTypes = parserConfig.documentTypes || {},\n        mediaTypes = parserConfig.mediaTypes || {},\n        mediaFeatures = parserConfig.mediaFeatures || {},\n        mediaValueKeywords = parserConfig.mediaValueKeywords || {},\n        propertyKeywords = parserConfig.propertyKeywords || {},\n        nonStandardPropertyKeywords = parserConfig.nonStandardPropertyKeywords || {},\n        fontProperties = parserConfig.fontProperties || {},\n        counterDescriptors = parserConfig.counterDescriptors || {},\n        colorKeywords = parserConfig.colorKeywords || {},\n        valueKeywords = parserConfig.valueKeywords || {},\n        allowNested = parserConfig.allowNested,\n        lineComment = parserConfig.lineComment,\n        supportsAtComponent = parserConfig.supportsAtComponent === true;\n    var type, override;\n\n    function ret(style, tp) {\n      type = tp;\n      return style;\n    } // Tokenizers\n\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (tokenHooks[ch]) {\n        var result = tokenHooks[ch](stream, state);\n        if (result !== false) return result;\n      }\n\n      if (ch == \"@\") {\n        stream.eatWhile(/[\\w\\\\\\-]/);\n        return ret(\"def\", stream.current());\n      } else if (ch == \"=\" || (ch == \"~\" || ch == \"|\") && stream.eat(\"=\")) {\n        return ret(null, \"compare\");\n      } else if (ch == \"\\\"\" || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      } else if (ch == \"#\") {\n        stream.eatWhile(/[\\w\\\\\\-]/);\n        return ret(\"atom\", \"hash\");\n      } else if (ch == \"!\") {\n        stream.match(/^\\s*\\w*/);\n        return ret(\"keyword\", \"important\");\n      } else if (/\\d/.test(ch) || ch == \".\" && stream.eat(/\\d/)) {\n        stream.eatWhile(/[\\w.%]/);\n        return ret(\"number\", \"unit\");\n      } else if (ch === \"-\") {\n        if (/[\\d.]/.test(stream.peek())) {\n          stream.eatWhile(/[\\w.%]/);\n          return ret(\"number\", \"unit\");\n        } else if (stream.match(/^-[\\w\\\\\\-]*/)) {\n          stream.eatWhile(/[\\w\\\\\\-]/);\n          if (stream.match(/^\\s*:/, false)) return ret(\"variable-2\", \"variable-definition\");\n          return ret(\"variable-2\", \"variable\");\n        } else if (stream.match(/^\\w+-/)) {\n          return ret(\"meta\", \"meta\");\n        }\n      } else if (/[,+>*\\/]/.test(ch)) {\n        return ret(null, \"select-op\");\n      } else if (ch == \".\" && stream.match(/^-?[_a-z][_a-z0-9-]*/i)) {\n        return ret(\"qualifier\", \"qualifier\");\n      } else if (/[:;{}\\[\\]\\(\\)]/.test(ch)) {\n        return ret(null, ch);\n      } else if ((ch == \"u\" || ch == \"U\") && stream.match(/rl(-prefix)?\\(/i) || (ch == \"d\" || ch == \"D\") && stream.match(\"omain(\", true, true) || (ch == \"r\" || ch == \"R\") && stream.match(\"egexp(\", true, true)) {\n        stream.backUp(1);\n        state.tokenize = tokenParenthesized;\n        return ret(\"property\", \"word\");\n      } else if (/[\\w\\\\\\-]/.test(ch)) {\n        stream.eatWhile(/[\\w\\\\\\-]/);\n        return ret(\"property\", \"word\");\n      } else {\n        return ret(null, null);\n      }\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && !escaped) {\n            if (quote == \")\") stream.backUp(1);\n            break;\n          }\n\n          escaped = !escaped && ch == \"\\\\\";\n        }\n\n        if (ch == quote || !escaped && quote != \")\") state.tokenize = null;\n        return ret(\"string\", \"string\");\n      };\n    }\n\n    function tokenParenthesized(stream, state) {\n      stream.next(); // Must be '('\n\n      if (!stream.match(/\\s*[\\\"\\')]/, false)) state.tokenize = tokenString(\")\");else state.tokenize = null;\n      return ret(null, \"(\");\n    } // Context management\n\n\n    function Context(type, indent, prev) {\n      this.type = type;\n      this.indent = indent;\n      this.prev = prev;\n    }\n\n    function pushContext(state, stream, type, indent) {\n      state.context = new Context(type, stream.indentation() + (indent === false ? 0 : indentUnit), state.context);\n      return type;\n    }\n\n    function popContext(state) {\n      if (state.context.prev) state.context = state.context.prev;\n      return state.context.type;\n    }\n\n    function pass(type, stream, state) {\n      return states[state.context.type](type, stream, state);\n    }\n\n    function popAndPass(type, stream, state, n) {\n      for (var i = n || 1; i > 0; i--) {\n        state.context = state.context.prev;\n      }\n\n      return pass(type, stream, state);\n    } // Parser\n\n\n    function wordAsValue(stream) {\n      var word = stream.current().toLowerCase();\n      if (valueKeywords.hasOwnProperty(word)) override = \"atom\";else if (colorKeywords.hasOwnProperty(word)) override = \"keyword\";else override = \"variable\";\n    }\n\n    var states = {};\n\n    states.top = function (type, stream, state) {\n      if (type == \"{\") {\n        return pushContext(state, stream, \"block\");\n      } else if (type == \"}\" && state.context.prev) {\n        return popContext(state);\n      } else if (supportsAtComponent && /@component/i.test(type)) {\n        return pushContext(state, stream, \"atComponentBlock\");\n      } else if (/^@(-moz-)?document$/i.test(type)) {\n        return pushContext(state, stream, \"documentTypes\");\n      } else if (/^@(media|supports|(-moz-)?document|import)$/i.test(type)) {\n        return pushContext(state, stream, \"atBlock\");\n      } else if (/^@(font-face|counter-style)/i.test(type)) {\n        state.stateArg = type;\n        return \"restricted_atBlock_before\";\n      } else if (/^@(-(moz|ms|o|webkit)-)?keyframes$/i.test(type)) {\n        return \"keyframes\";\n      } else if (type && type.charAt(0) == \"@\") {\n        return pushContext(state, stream, \"at\");\n      } else if (type == \"hash\") {\n        override = \"builtin\";\n      } else if (type == \"word\") {\n        override = \"tag\";\n      } else if (type == \"variable-definition\") {\n        return \"maybeprop\";\n      } else if (type == \"interpolation\") {\n        return pushContext(state, stream, \"interpolation\");\n      } else if (type == \":\") {\n        return \"pseudo\";\n      } else if (allowNested && type == \"(\") {\n        return pushContext(state, stream, \"parens\");\n      }\n\n      return state.context.type;\n    };\n\n    states.block = function (type, stream, state) {\n      if (type == \"word\") {\n        var word = stream.current().toLowerCase();\n\n        if (propertyKeywords.hasOwnProperty(word)) {\n          override = \"property\";\n          return \"maybeprop\";\n        } else if (nonStandardPropertyKeywords.hasOwnProperty(word)) {\n          override = \"string-2\";\n          return \"maybeprop\";\n        } else if (allowNested) {\n          override = stream.match(/^\\s*:(?:\\s|$)/, false) ? \"property\" : \"tag\";\n          return \"block\";\n        } else {\n          override += \" error\";\n          return \"maybeprop\";\n        }\n      } else if (type == \"meta\") {\n        return \"block\";\n      } else if (!allowNested && (type == \"hash\" || type == \"qualifier\")) {\n        override = \"error\";\n        return \"block\";\n      } else {\n        return states.top(type, stream, state);\n      }\n    };\n\n    states.maybeprop = function (type, stream, state) {\n      if (type == \":\") return pushContext(state, stream, \"prop\");\n      return pass(type, stream, state);\n    };\n\n    states.prop = function (type, stream, state) {\n      if (type == \";\") return popContext(state);\n      if (type == \"{\" && allowNested) return pushContext(state, stream, \"propBlock\");\n      if (type == \"}\" || type == \"{\") return popAndPass(type, stream, state);\n      if (type == \"(\") return pushContext(state, stream, \"parens\");\n\n      if (type == \"hash\" && !/^#([0-9a-fA-f]{3,4}|[0-9a-fA-f]{6}|[0-9a-fA-f]{8})$/.test(stream.current())) {\n        override += \" error\";\n      } else if (type == \"word\") {\n        wordAsValue(stream);\n      } else if (type == \"interpolation\") {\n        return pushContext(state, stream, \"interpolation\");\n      }\n\n      return \"prop\";\n    };\n\n    states.propBlock = function (type, _stream, state) {\n      if (type == \"}\") return popContext(state);\n\n      if (type == \"word\") {\n        override = \"property\";\n        return \"maybeprop\";\n      }\n\n      return state.context.type;\n    };\n\n    states.parens = function (type, stream, state) {\n      if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state);\n      if (type == \")\") return popContext(state);\n      if (type == \"(\") return pushContext(state, stream, \"parens\");\n      if (type == \"interpolation\") return pushContext(state, stream, \"interpolation\");\n      if (type == \"word\") wordAsValue(stream);\n      return \"parens\";\n    };\n\n    states.pseudo = function (type, stream, state) {\n      if (type == \"meta\") return \"pseudo\";\n\n      if (type == \"word\") {\n        override = \"variable-3\";\n        return state.context.type;\n      }\n\n      return pass(type, stream, state);\n    };\n\n    states.documentTypes = function (type, stream, state) {\n      if (type == \"word\" && documentTypes.hasOwnProperty(stream.current())) {\n        override = \"tag\";\n        return state.context.type;\n      } else {\n        return states.atBlock(type, stream, state);\n      }\n    };\n\n    states.atBlock = function (type, stream, state) {\n      if (type == \"(\") return pushContext(state, stream, \"atBlock_parens\");\n      if (type == \"}\" || type == \";\") return popAndPass(type, stream, state);\n      if (type == \"{\") return popContext(state) && pushContext(state, stream, allowNested ? \"block\" : \"top\");\n      if (type == \"interpolation\") return pushContext(state, stream, \"interpolation\");\n\n      if (type == \"word\") {\n        var word = stream.current().toLowerCase();\n        if (word == \"only\" || word == \"not\" || word == \"and\" || word == \"or\") override = \"keyword\";else if (mediaTypes.hasOwnProperty(word)) override = \"attribute\";else if (mediaFeatures.hasOwnProperty(word)) override = \"property\";else if (mediaValueKeywords.hasOwnProperty(word)) override = \"keyword\";else if (propertyKeywords.hasOwnProperty(word)) override = \"property\";else if (nonStandardPropertyKeywords.hasOwnProperty(word)) override = \"string-2\";else if (valueKeywords.hasOwnProperty(word)) override = \"atom\";else if (colorKeywords.hasOwnProperty(word)) override = \"keyword\";else override = \"error\";\n      }\n\n      return state.context.type;\n    };\n\n    states.atComponentBlock = function (type, stream, state) {\n      if (type == \"}\") return popAndPass(type, stream, state);\n      if (type == \"{\") return popContext(state) && pushContext(state, stream, allowNested ? \"block\" : \"top\", false);\n      if (type == \"word\") override = \"error\";\n      return state.context.type;\n    };\n\n    states.atBlock_parens = function (type, stream, state) {\n      if (type == \")\") return popContext(state);\n      if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state, 2);\n      return states.atBlock(type, stream, state);\n    };\n\n    states.restricted_atBlock_before = function (type, stream, state) {\n      if (type == \"{\") return pushContext(state, stream, \"restricted_atBlock\");\n\n      if (type == \"word\" && state.stateArg == \"@counter-style\") {\n        override = \"variable\";\n        return \"restricted_atBlock_before\";\n      }\n\n      return pass(type, stream, state);\n    };\n\n    states.restricted_atBlock = function (type, stream, state) {\n      if (type == \"}\") {\n        state.stateArg = null;\n        return popContext(state);\n      }\n\n      if (type == \"word\") {\n        if (state.stateArg == \"@font-face\" && !fontProperties.hasOwnProperty(stream.current().toLowerCase()) || state.stateArg == \"@counter-style\" && !counterDescriptors.hasOwnProperty(stream.current().toLowerCase())) override = \"error\";else override = \"property\";\n        return \"maybeprop\";\n      }\n\n      return \"restricted_atBlock\";\n    };\n\n    states.keyframes = function (type, stream, state) {\n      if (type == \"word\") {\n        override = \"variable\";\n        return \"keyframes\";\n      }\n\n      if (type == \"{\") return pushContext(state, stream, \"top\");\n      return pass(type, stream, state);\n    };\n\n    states.at = function (type, stream, state) {\n      if (type == \";\") return popContext(state);\n      if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state);\n      if (type == \"word\") override = \"tag\";else if (type == \"hash\") override = \"builtin\";\n      return \"at\";\n    };\n\n    states.interpolation = function (type, stream, state) {\n      if (type == \"}\") return popContext(state);\n      if (type == \"{\" || type == \";\") return popAndPass(type, stream, state);\n      if (type == \"word\") override = \"variable\";else if (type != \"variable\" && type != \"(\" && type != \")\") override = \"error\";\n      return \"interpolation\";\n    };\n\n    return {\n      startState: function startState(base) {\n        return {\n          tokenize: null,\n          state: inline ? \"block\" : \"top\",\n          stateArg: null,\n          context: new Context(inline ? \"block\" : \"top\", base || 0, null)\n        };\n      },\n      token: function token(stream, state) {\n        if (!state.tokenize && stream.eatSpace()) return null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n\n        if (style && typeof style == \"object\") {\n          type = style[1];\n          style = style[0];\n        }\n\n        override = style;\n        if (type != \"comment\") state.state = states[state.state](type, stream, state);\n        return override;\n      },\n      indent: function indent(state, textAfter) {\n        var cx = state.context,\n            ch = textAfter && textAfter.charAt(0);\n        var indent = cx.indent;\n        if (cx.type == \"prop\" && (ch == \"}\" || ch == \")\")) cx = cx.prev;\n\n        if (cx.prev) {\n          if (ch == \"}\" && (cx.type == \"block\" || cx.type == \"top\" || cx.type == \"interpolation\" || cx.type == \"restricted_atBlock\")) {\n            // Resume indentation from parent context.\n            cx = cx.prev;\n            indent = cx.indent;\n          } else if (ch == \")\" && (cx.type == \"parens\" || cx.type == \"atBlock_parens\") || ch == \"{\" && (cx.type == \"at\" || cx.type == \"atBlock\")) {\n            // Dedent relative to current context.\n            indent = Math.max(0, cx.indent - indentUnit);\n          }\n        }\n\n        return indent;\n      },\n      electricChars: \"}\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      blockCommentContinue: \" * \",\n      lineComment: lineComment,\n      fold: \"brace\"\n    };\n  });\n\n  function keySet(array) {\n    var keys = {};\n\n    for (var i = 0; i < array.length; ++i) {\n      keys[array[i].toLowerCase()] = true;\n    }\n\n    return keys;\n  }\n\n  var documentTypes_ = [\"domain\", \"regexp\", \"url\", \"url-prefix\"],\n      documentTypes = keySet(documentTypes_);\n  var mediaTypes_ = [\"all\", \"aural\", \"braille\", \"handheld\", \"print\", \"projection\", \"screen\", \"tty\", \"tv\", \"embossed\"],\n      mediaTypes = keySet(mediaTypes_);\n  var mediaFeatures_ = [\"width\", \"min-width\", \"max-width\", \"height\", \"min-height\", \"max-height\", \"device-width\", \"min-device-width\", \"max-device-width\", \"device-height\", \"min-device-height\", \"max-device-height\", \"aspect-ratio\", \"min-aspect-ratio\", \"max-aspect-ratio\", \"device-aspect-ratio\", \"min-device-aspect-ratio\", \"max-device-aspect-ratio\", \"color\", \"min-color\", \"max-color\", \"color-index\", \"min-color-index\", \"max-color-index\", \"monochrome\", \"min-monochrome\", \"max-monochrome\", \"resolution\", \"min-resolution\", \"max-resolution\", \"scan\", \"grid\", \"orientation\", \"device-pixel-ratio\", \"min-device-pixel-ratio\", \"max-device-pixel-ratio\", \"pointer\", \"any-pointer\", \"hover\", \"any-hover\"],\n      mediaFeatures = keySet(mediaFeatures_);\n  var mediaValueKeywords_ = [\"landscape\", \"portrait\", \"none\", \"coarse\", \"fine\", \"on-demand\", \"hover\", \"interlace\", \"progressive\"],\n      mediaValueKeywords = keySet(mediaValueKeywords_);\n  var propertyKeywords_ = [\"align-content\", \"align-items\", \"align-self\", \"alignment-adjust\", \"alignment-baseline\", \"anchor-point\", \"animation\", \"animation-delay\", \"animation-direction\", \"animation-duration\", \"animation-fill-mode\", \"animation-iteration-count\", \"animation-name\", \"animation-play-state\", \"animation-timing-function\", \"appearance\", \"azimuth\", \"backface-visibility\", \"background\", \"background-attachment\", \"background-blend-mode\", \"background-clip\", \"background-color\", \"background-image\", \"background-origin\", \"background-position\", \"background-repeat\", \"background-size\", \"baseline-shift\", \"binding\", \"bleed\", \"bookmark-label\", \"bookmark-level\", \"bookmark-state\", \"bookmark-target\", \"border\", \"border-bottom\", \"border-bottom-color\", \"border-bottom-left-radius\", \"border-bottom-right-radius\", \"border-bottom-style\", \"border-bottom-width\", \"border-collapse\", \"border-color\", \"border-image\", \"border-image-outset\", \"border-image-repeat\", \"border-image-slice\", \"border-image-source\", \"border-image-width\", \"border-left\", \"border-left-color\", \"border-left-style\", \"border-left-width\", \"border-radius\", \"border-right\", \"border-right-color\", \"border-right-style\", \"border-right-width\", \"border-spacing\", \"border-style\", \"border-top\", \"border-top-color\", \"border-top-left-radius\", \"border-top-right-radius\", \"border-top-style\", \"border-top-width\", \"border-width\", \"bottom\", \"box-decoration-break\", \"box-shadow\", \"box-sizing\", \"break-after\", \"break-before\", \"break-inside\", \"caption-side\", \"caret-color\", \"clear\", \"clip\", \"color\", \"color-profile\", \"column-count\", \"column-fill\", \"column-gap\", \"column-rule\", \"column-rule-color\", \"column-rule-style\", \"column-rule-width\", \"column-span\", \"column-width\", \"columns\", \"content\", \"counter-increment\", \"counter-reset\", \"crop\", \"cue\", \"cue-after\", \"cue-before\", \"cursor\", \"direction\", \"display\", \"dominant-baseline\", \"drop-initial-after-adjust\", \"drop-initial-after-align\", \"drop-initial-before-adjust\", \"drop-initial-before-align\", \"drop-initial-size\", \"drop-initial-value\", \"elevation\", \"empty-cells\", \"fit\", \"fit-position\", \"flex\", \"flex-basis\", \"flex-direction\", \"flex-flow\", \"flex-grow\", \"flex-shrink\", \"flex-wrap\", \"float\", \"float-offset\", \"flow-from\", \"flow-into\", \"font\", \"font-feature-settings\", \"font-family\", \"font-kerning\", \"font-language-override\", \"font-size\", \"font-size-adjust\", \"font-stretch\", \"font-style\", \"font-synthesis\", \"font-variant\", \"font-variant-alternates\", \"font-variant-caps\", \"font-variant-east-asian\", \"font-variant-ligatures\", \"font-variant-numeric\", \"font-variant-position\", \"font-weight\", \"grid\", \"grid-area\", \"grid-auto-columns\", \"grid-auto-flow\", \"grid-auto-rows\", \"grid-column\", \"grid-column-end\", \"grid-column-gap\", \"grid-column-start\", \"grid-gap\", \"grid-row\", \"grid-row-end\", \"grid-row-gap\", \"grid-row-start\", \"grid-template\", \"grid-template-areas\", \"grid-template-columns\", \"grid-template-rows\", \"hanging-punctuation\", \"height\", \"hyphens\", \"icon\", \"image-orientation\", \"image-rendering\", \"image-resolution\", \"inline-box-align\", \"justify-content\", \"justify-items\", \"justify-self\", \"left\", \"letter-spacing\", \"line-break\", \"line-height\", \"line-stacking\", \"line-stacking-ruby\", \"line-stacking-shift\", \"line-stacking-strategy\", \"list-style\", \"list-style-image\", \"list-style-position\", \"list-style-type\", \"margin\", \"margin-bottom\", \"margin-left\", \"margin-right\", \"margin-top\", \"marks\", \"marquee-direction\", \"marquee-loop\", \"marquee-play-count\", \"marquee-speed\", \"marquee-style\", \"max-height\", \"max-width\", \"min-height\", \"min-width\", \"mix-blend-mode\", \"move-to\", \"nav-down\", \"nav-index\", \"nav-left\", \"nav-right\", \"nav-up\", \"object-fit\", \"object-position\", \"opacity\", \"order\", \"orphans\", \"outline\", \"outline-color\", \"outline-offset\", \"outline-style\", \"outline-width\", \"overflow\", \"overflow-style\", \"overflow-wrap\", \"overflow-x\", \"overflow-y\", \"padding\", \"padding-bottom\", \"padding-left\", \"padding-right\", \"padding-top\", \"page\", \"page-break-after\", \"page-break-before\", \"page-break-inside\", \"page-policy\", \"pause\", \"pause-after\", \"pause-before\", \"perspective\", \"perspective-origin\", \"pitch\", \"pitch-range\", \"place-content\", \"place-items\", \"place-self\", \"play-during\", \"position\", \"presentation-level\", \"punctuation-trim\", \"quotes\", \"region-break-after\", \"region-break-before\", \"region-break-inside\", \"region-fragment\", \"rendering-intent\", \"resize\", \"rest\", \"rest-after\", \"rest-before\", \"richness\", \"right\", \"rotation\", \"rotation-point\", \"ruby-align\", \"ruby-overhang\", \"ruby-position\", \"ruby-span\", \"shape-image-threshold\", \"shape-inside\", \"shape-margin\", \"shape-outside\", \"size\", \"speak\", \"speak-as\", \"speak-header\", \"speak-numeral\", \"speak-punctuation\", \"speech-rate\", \"stress\", \"string-set\", \"tab-size\", \"table-layout\", \"target\", \"target-name\", \"target-new\", \"target-position\", \"text-align\", \"text-align-last\", \"text-decoration\", \"text-decoration-color\", \"text-decoration-line\", \"text-decoration-skip\", \"text-decoration-style\", \"text-emphasis\", \"text-emphasis-color\", \"text-emphasis-position\", \"text-emphasis-style\", \"text-height\", \"text-indent\", \"text-justify\", \"text-outline\", \"text-overflow\", \"text-shadow\", \"text-size-adjust\", \"text-space-collapse\", \"text-transform\", \"text-underline-position\", \"text-wrap\", \"top\", \"transform\", \"transform-origin\", \"transform-style\", \"transition\", \"transition-delay\", \"transition-duration\", \"transition-property\", \"transition-timing-function\", \"unicode-bidi\", \"user-select\", \"vertical-align\", \"visibility\", \"voice-balance\", \"voice-duration\", \"voice-family\", \"voice-pitch\", \"voice-range\", \"voice-rate\", \"voice-stress\", \"voice-volume\", \"volume\", \"white-space\", \"widows\", \"width\", \"will-change\", \"word-break\", \"word-spacing\", \"word-wrap\", \"z-index\", // SVG-specific\n  \"clip-path\", \"clip-rule\", \"mask\", \"enable-background\", \"filter\", \"flood-color\", \"flood-opacity\", \"lighting-color\", \"stop-color\", \"stop-opacity\", \"pointer-events\", \"color-interpolation\", \"color-interpolation-filters\", \"color-rendering\", \"fill\", \"fill-opacity\", \"fill-rule\", \"image-rendering\", \"marker\", \"marker-end\", \"marker-mid\", \"marker-start\", \"shape-rendering\", \"stroke\", \"stroke-dasharray\", \"stroke-dashoffset\", \"stroke-linecap\", \"stroke-linejoin\", \"stroke-miterlimit\", \"stroke-opacity\", \"stroke-width\", \"text-rendering\", \"baseline-shift\", \"dominant-baseline\", \"glyph-orientation-horizontal\", \"glyph-orientation-vertical\", \"text-anchor\", \"writing-mode\"],\n      propertyKeywords = keySet(propertyKeywords_);\n  var nonStandardPropertyKeywords_ = [\"scrollbar-arrow-color\", \"scrollbar-base-color\", \"scrollbar-dark-shadow-color\", \"scrollbar-face-color\", \"scrollbar-highlight-color\", \"scrollbar-shadow-color\", \"scrollbar-3d-light-color\", \"scrollbar-track-color\", \"shape-inside\", \"searchfield-cancel-button\", \"searchfield-decoration\", \"searchfield-results-button\", \"searchfield-results-decoration\", \"zoom\"],\n      nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_);\n  var fontProperties_ = [\"font-family\", \"src\", \"unicode-range\", \"font-variant\", \"font-feature-settings\", \"font-stretch\", \"font-weight\", \"font-style\"],\n      fontProperties = keySet(fontProperties_);\n  var counterDescriptors_ = [\"additive-symbols\", \"fallback\", \"negative\", \"pad\", \"prefix\", \"range\", \"speak-as\", \"suffix\", \"symbols\", \"system\"],\n      counterDescriptors = keySet(counterDescriptors_);\n  var colorKeywords_ = [\"aliceblue\", \"antiquewhite\", \"aqua\", \"aquamarine\", \"azure\", \"beige\", \"bisque\", \"black\", \"blanchedalmond\", \"blue\", \"blueviolet\", \"brown\", \"burlywood\", \"cadetblue\", \"chartreuse\", \"chocolate\", \"coral\", \"cornflowerblue\", \"cornsilk\", \"crimson\", \"cyan\", \"darkblue\", \"darkcyan\", \"darkgoldenrod\", \"darkgray\", \"darkgreen\", \"darkkhaki\", \"darkmagenta\", \"darkolivegreen\", \"darkorange\", \"darkorchid\", \"darkred\", \"darksalmon\", \"darkseagreen\", \"darkslateblue\", \"darkslategray\", \"darkturquoise\", \"darkviolet\", \"deeppink\", \"deepskyblue\", \"dimgray\", \"dodgerblue\", \"firebrick\", \"floralwhite\", \"forestgreen\", \"fuchsia\", \"gainsboro\", \"ghostwhite\", \"gold\", \"goldenrod\", \"gray\", \"grey\", \"green\", \"greenyellow\", \"honeydew\", \"hotpink\", \"indianred\", \"indigo\", \"ivory\", \"khaki\", \"lavender\", \"lavenderblush\", \"lawngreen\", \"lemonchiffon\", \"lightblue\", \"lightcoral\", \"lightcyan\", \"lightgoldenrodyellow\", \"lightgray\", \"lightgreen\", \"lightpink\", \"lightsalmon\", \"lightseagreen\", \"lightskyblue\", \"lightslategray\", \"lightsteelblue\", \"lightyellow\", \"lime\", \"limegreen\", \"linen\", \"magenta\", \"maroon\", \"mediumaquamarine\", \"mediumblue\", \"mediumorchid\", \"mediumpurple\", \"mediumseagreen\", \"mediumslateblue\", \"mediumspringgreen\", \"mediumturquoise\", \"mediumvioletred\", \"midnightblue\", \"mintcream\", \"mistyrose\", \"moccasin\", \"navajowhite\", \"navy\", \"oldlace\", \"olive\", \"olivedrab\", \"orange\", \"orangered\", \"orchid\", \"palegoldenrod\", \"palegreen\", \"paleturquoise\", \"palevioletred\", \"papayawhip\", \"peachpuff\", \"peru\", \"pink\", \"plum\", \"powderblue\", \"purple\", \"rebeccapurple\", \"red\", \"rosybrown\", \"royalblue\", \"saddlebrown\", \"salmon\", \"sandybrown\", \"seagreen\", \"seashell\", \"sienna\", \"silver\", \"skyblue\", \"slateblue\", \"slategray\", \"snow\", \"springgreen\", \"steelblue\", \"tan\", \"teal\", \"thistle\", \"tomato\", \"turquoise\", \"violet\", \"wheat\", \"white\", \"whitesmoke\", \"yellow\", \"yellowgreen\"],\n      colorKeywords = keySet(colorKeywords_);\n  var valueKeywords_ = [\"above\", \"absolute\", \"activeborder\", \"additive\", \"activecaption\", \"afar\", \"after-white-space\", \"ahead\", \"alias\", \"all\", \"all-scroll\", \"alphabetic\", \"alternate\", \"always\", \"amharic\", \"amharic-abegede\", \"antialiased\", \"appworkspace\", \"arabic-indic\", \"armenian\", \"asterisks\", \"attr\", \"auto\", \"auto-flow\", \"avoid\", \"avoid-column\", \"avoid-page\", \"avoid-region\", \"background\", \"backwards\", \"baseline\", \"below\", \"bidi-override\", \"binary\", \"bengali\", \"blink\", \"block\", \"block-axis\", \"bold\", \"bolder\", \"border\", \"border-box\", \"both\", \"bottom\", \"break\", \"break-all\", \"break-word\", \"bullets\", \"button\", \"button-bevel\", \"buttonface\", \"buttonhighlight\", \"buttonshadow\", \"buttontext\", \"calc\", \"cambodian\", \"capitalize\", \"caps-lock-indicator\", \"caption\", \"captiontext\", \"caret\", \"cell\", \"center\", \"checkbox\", \"circle\", \"cjk-decimal\", \"cjk-earthly-branch\", \"cjk-heavenly-stem\", \"cjk-ideographic\", \"clear\", \"clip\", \"close-quote\", \"col-resize\", \"collapse\", \"color\", \"color-burn\", \"color-dodge\", \"column\", \"column-reverse\", \"compact\", \"condensed\", \"contain\", \"content\", \"contents\", \"content-box\", \"context-menu\", \"continuous\", \"copy\", \"counter\", \"counters\", \"cover\", \"crop\", \"cross\", \"crosshair\", \"currentcolor\", \"cursive\", \"cyclic\", \"darken\", \"dashed\", \"decimal\", \"decimal-leading-zero\", \"default\", \"default-button\", \"dense\", \"destination-atop\", \"destination-in\", \"destination-out\", \"destination-over\", \"devanagari\", \"difference\", \"disc\", \"discard\", \"disclosure-closed\", \"disclosure-open\", \"document\", \"dot-dash\", \"dot-dot-dash\", \"dotted\", \"double\", \"down\", \"e-resize\", \"ease\", \"ease-in\", \"ease-in-out\", \"ease-out\", \"element\", \"ellipse\", \"ellipsis\", \"embed\", \"end\", \"ethiopic\", \"ethiopic-abegede\", \"ethiopic-abegede-am-et\", \"ethiopic-abegede-gez\", \"ethiopic-abegede-ti-er\", \"ethiopic-abegede-ti-et\", \"ethiopic-halehame-aa-er\", \"ethiopic-halehame-aa-et\", \"ethiopic-halehame-am-et\", \"ethiopic-halehame-gez\", \"ethiopic-halehame-om-et\", \"ethiopic-halehame-sid-et\", \"ethiopic-halehame-so-et\", \"ethiopic-halehame-ti-er\", \"ethiopic-halehame-ti-et\", \"ethiopic-halehame-tig\", \"ethiopic-numeric\", \"ew-resize\", \"exclusion\", \"expanded\", \"extends\", \"extra-condensed\", \"extra-expanded\", \"fantasy\", \"fast\", \"fill\", \"fixed\", \"flat\", \"flex\", \"flex-end\", \"flex-start\", \"footnotes\", \"forwards\", \"from\", \"geometricPrecision\", \"georgian\", \"graytext\", \"grid\", \"groove\", \"gujarati\", \"gurmukhi\", \"hand\", \"hangul\", \"hangul-consonant\", \"hard-light\", \"hebrew\", \"help\", \"hidden\", \"hide\", \"higher\", \"highlight\", \"highlighttext\", \"hiragana\", \"hiragana-iroha\", \"horizontal\", \"hsl\", \"hsla\", \"hue\", \"icon\", \"ignore\", \"inactiveborder\", \"inactivecaption\", \"inactivecaptiontext\", \"infinite\", \"infobackground\", \"infotext\", \"inherit\", \"initial\", \"inline\", \"inline-axis\", \"inline-block\", \"inline-flex\", \"inline-grid\", \"inline-table\", \"inset\", \"inside\", \"intrinsic\", \"invert\", \"italic\", \"japanese-formal\", \"japanese-informal\", \"justify\", \"kannada\", \"katakana\", \"katakana-iroha\", \"keep-all\", \"khmer\", \"korean-hangul-formal\", \"korean-hanja-formal\", \"korean-hanja-informal\", \"landscape\", \"lao\", \"large\", \"larger\", \"left\", \"level\", \"lighter\", \"lighten\", \"line-through\", \"linear\", \"linear-gradient\", \"lines\", \"list-item\", \"listbox\", \"listitem\", \"local\", \"logical\", \"loud\", \"lower\", \"lower-alpha\", \"lower-armenian\", \"lower-greek\", \"lower-hexadecimal\", \"lower-latin\", \"lower-norwegian\", \"lower-roman\", \"lowercase\", \"ltr\", \"luminosity\", \"malayalam\", \"match\", \"matrix\", \"matrix3d\", \"media-controls-background\", \"media-current-time-display\", \"media-fullscreen-button\", \"media-mute-button\", \"media-play-button\", \"media-return-to-realtime-button\", \"media-rewind-button\", \"media-seek-back-button\", \"media-seek-forward-button\", \"media-slider\", \"media-sliderthumb\", \"media-time-remaining-display\", \"media-volume-slider\", \"media-volume-slider-container\", \"media-volume-sliderthumb\", \"medium\", \"menu\", \"menulist\", \"menulist-button\", \"menulist-text\", \"menulist-textfield\", \"menutext\", \"message-box\", \"middle\", \"min-intrinsic\", \"mix\", \"mongolian\", \"monospace\", \"move\", \"multiple\", \"multiply\", \"myanmar\", \"n-resize\", \"narrower\", \"ne-resize\", \"nesw-resize\", \"no-close-quote\", \"no-drop\", \"no-open-quote\", \"no-repeat\", \"none\", \"normal\", \"not-allowed\", \"nowrap\", \"ns-resize\", \"numbers\", \"numeric\", \"nw-resize\", \"nwse-resize\", \"oblique\", \"octal\", \"opacity\", \"open-quote\", \"optimizeLegibility\", \"optimizeSpeed\", \"oriya\", \"oromo\", \"outset\", \"outside\", \"outside-shape\", \"overlay\", \"overline\", \"padding\", \"padding-box\", \"painted\", \"page\", \"paused\", \"persian\", \"perspective\", \"plus-darker\", \"plus-lighter\", \"pointer\", \"polygon\", \"portrait\", \"pre\", \"pre-line\", \"pre-wrap\", \"preserve-3d\", \"progress\", \"push-button\", \"radial-gradient\", \"radio\", \"read-only\", \"read-write\", \"read-write-plaintext-only\", \"rectangle\", \"region\", \"relative\", \"repeat\", \"repeating-linear-gradient\", \"repeating-radial-gradient\", \"repeat-x\", \"repeat-y\", \"reset\", \"reverse\", \"rgb\", \"rgba\", \"ridge\", \"right\", \"rotate\", \"rotate3d\", \"rotateX\", \"rotateY\", \"rotateZ\", \"round\", \"row\", \"row-resize\", \"row-reverse\", \"rtl\", \"run-in\", \"running\", \"s-resize\", \"sans-serif\", \"saturation\", \"scale\", \"scale3d\", \"scaleX\", \"scaleY\", \"scaleZ\", \"screen\", \"scroll\", \"scrollbar\", \"scroll-position\", \"se-resize\", \"searchfield\", \"searchfield-cancel-button\", \"searchfield-decoration\", \"searchfield-results-button\", \"searchfield-results-decoration\", \"self-start\", \"self-end\", \"semi-condensed\", \"semi-expanded\", \"separate\", \"serif\", \"show\", \"sidama\", \"simp-chinese-formal\", \"simp-chinese-informal\", \"single\", \"skew\", \"skewX\", \"skewY\", \"skip-white-space\", \"slide\", \"slider-horizontal\", \"slider-vertical\", \"sliderthumb-horizontal\", \"sliderthumb-vertical\", \"slow\", \"small\", \"small-caps\", \"small-caption\", \"smaller\", \"soft-light\", \"solid\", \"somali\", \"source-atop\", \"source-in\", \"source-out\", \"source-over\", \"space\", \"space-around\", \"space-between\", \"space-evenly\", \"spell-out\", \"square\", \"square-button\", \"start\", \"static\", \"status-bar\", \"stretch\", \"stroke\", \"sub\", \"subpixel-antialiased\", \"super\", \"sw-resize\", \"symbolic\", \"symbols\", \"system-ui\", \"table\", \"table-caption\", \"table-cell\", \"table-column\", \"table-column-group\", \"table-footer-group\", \"table-header-group\", \"table-row\", \"table-row-group\", \"tamil\", \"telugu\", \"text\", \"text-bottom\", \"text-top\", \"textarea\", \"textfield\", \"thai\", \"thick\", \"thin\", \"threeddarkshadow\", \"threedface\", \"threedhighlight\", \"threedlightshadow\", \"threedshadow\", \"tibetan\", \"tigre\", \"tigrinya-er\", \"tigrinya-er-abegede\", \"tigrinya-et\", \"tigrinya-et-abegede\", \"to\", \"top\", \"trad-chinese-formal\", \"trad-chinese-informal\", \"transform\", \"translate\", \"translate3d\", \"translateX\", \"translateY\", \"translateZ\", \"transparent\", \"ultra-condensed\", \"ultra-expanded\", \"underline\", \"unset\", \"up\", \"upper-alpha\", \"upper-armenian\", \"upper-greek\", \"upper-hexadecimal\", \"upper-latin\", \"upper-norwegian\", \"upper-roman\", \"uppercase\", \"urdu\", \"url\", \"var\", \"vertical\", \"vertical-text\", \"visible\", \"visibleFill\", \"visiblePainted\", \"visibleStroke\", \"visual\", \"w-resize\", \"wait\", \"wave\", \"wider\", \"window\", \"windowframe\", \"windowtext\", \"words\", \"wrap\", \"wrap-reverse\", \"x-large\", \"x-small\", \"xor\", \"xx-large\", \"xx-small\"],\n      valueKeywords = keySet(valueKeywords_);\n  var allWords = documentTypes_.concat(mediaTypes_).concat(mediaFeatures_).concat(mediaValueKeywords_).concat(propertyKeywords_).concat(nonStandardPropertyKeywords_).concat(colorKeywords_).concat(valueKeywords_);\n  CodeMirror.registerHelper(\"hintWords\", \"css\", allWords);\n\n  function tokenCComment(stream, state) {\n    var maybeEnd = false,\n        ch;\n\n    while ((ch = stream.next()) != null) {\n      if (maybeEnd && ch == \"/\") {\n        state.tokenize = null;\n        break;\n      }\n\n      maybeEnd = ch == \"*\";\n    }\n\n    return [\"comment\", \"comment\"];\n  }\n\n  CodeMirror.defineMIME(\"text/css\", {\n    documentTypes: documentTypes,\n    mediaTypes: mediaTypes,\n    mediaFeatures: mediaFeatures,\n    mediaValueKeywords: mediaValueKeywords,\n    propertyKeywords: propertyKeywords,\n    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n    fontProperties: fontProperties,\n    counterDescriptors: counterDescriptors,\n    colorKeywords: colorKeywords,\n    valueKeywords: valueKeywords,\n    tokenHooks: {\n      \"/\": function _(stream, state) {\n        if (!stream.eat(\"*\")) return false;\n        state.tokenize = tokenCComment;\n        return tokenCComment(stream, state);\n      }\n    },\n    name: \"css\"\n  });\n  CodeMirror.defineMIME(\"text/x-scss\", {\n    mediaTypes: mediaTypes,\n    mediaFeatures: mediaFeatures,\n    mediaValueKeywords: mediaValueKeywords,\n    propertyKeywords: propertyKeywords,\n    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n    colorKeywords: colorKeywords,\n    valueKeywords: valueKeywords,\n    fontProperties: fontProperties,\n    allowNested: true,\n    lineComment: \"//\",\n    tokenHooks: {\n      \"/\": function _(stream, state) {\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return [\"comment\", \"comment\"];\n        } else if (stream.eat(\"*\")) {\n          state.tokenize = tokenCComment;\n          return tokenCComment(stream, state);\n        } else {\n          return [\"operator\", \"operator\"];\n        }\n      },\n      \":\": function _(stream) {\n        if (stream.match(/\\s*\\{/, false)) return [null, null];\n        return false;\n      },\n      \"$\": function $(stream) {\n        stream.match(/^[\\w-]+/);\n        if (stream.match(/^\\s*:/, false)) return [\"variable-2\", \"variable-definition\"];\n        return [\"variable-2\", \"variable\"];\n      },\n      \"#\": function _(stream) {\n        if (!stream.eat(\"{\")) return false;\n        return [null, \"interpolation\"];\n      }\n    },\n    name: \"css\",\n    helperType: \"scss\"\n  });\n  CodeMirror.defineMIME(\"text/x-less\", {\n    mediaTypes: mediaTypes,\n    mediaFeatures: mediaFeatures,\n    mediaValueKeywords: mediaValueKeywords,\n    propertyKeywords: propertyKeywords,\n    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n    colorKeywords: colorKeywords,\n    valueKeywords: valueKeywords,\n    fontProperties: fontProperties,\n    allowNested: true,\n    lineComment: \"//\",\n    tokenHooks: {\n      \"/\": function _(stream, state) {\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return [\"comment\", \"comment\"];\n        } else if (stream.eat(\"*\")) {\n          state.tokenize = tokenCComment;\n          return tokenCComment(stream, state);\n        } else {\n          return [\"operator\", \"operator\"];\n        }\n      },\n      \"@\": function _(stream) {\n        if (stream.eat(\"{\")) return [null, \"interpolation\"];\n        if (stream.match(/^(charset|document|font-face|import|(-(moz|ms|o|webkit)-)?keyframes|media|namespace|page|supports)\\b/i, false)) return false;\n        stream.eatWhile(/[\\w\\\\\\-]/);\n        if (stream.match(/^\\s*:/, false)) return [\"variable-2\", \"variable-definition\"];\n        return [\"variable-2\", \"variable\"];\n      },\n      \"&\": function _() {\n        return [\"atom\", \"atom\"];\n      }\n    },\n    name: \"css\",\n    helperType: \"less\"\n  });\n  CodeMirror.defineMIME(\"text/x-gss\", {\n    documentTypes: documentTypes,\n    mediaTypes: mediaTypes,\n    mediaFeatures: mediaFeatures,\n    propertyKeywords: propertyKeywords,\n    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n    fontProperties: fontProperties,\n    counterDescriptors: counterDescriptors,\n    colorKeywords: colorKeywords,\n    valueKeywords: valueKeywords,\n    supportsAtComponent: true,\n    tokenHooks: {\n      \"/\": function _(stream, state) {\n        if (!stream.eat(\"*\")) return false;\n        state.tokenize = tokenCComment;\n        return tokenCComment(stream, state);\n      }\n    },\n    name: \"css\",\n    helperType: \"gss\"\n  });\n});"],"sourceRoot":""}