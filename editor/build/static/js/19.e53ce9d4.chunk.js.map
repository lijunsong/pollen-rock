{"version":3,"sources":["../node_modules/codemirror/mode/d/d.js"],"names":["CodeMirror","words","str","obj","split","i","length","defineMode","config","parserConfig","curPunc","indentUnit","statementIndentUnit","keywords","builtin","blockKeywords","atoms","hooks","multiLineStrings","isOperatorChar","tokenBase","stream","state","quote","ch","next","result","tokenize","escaped","end","test","eatWhile","eat","tokenNestedComment","tokenComment","skipToEnd","cur","current","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","textAfter","Pass","firstChar","charAt","closing","electricChars","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","defineMIME","name","@","_state","mod","__webpack_require__"],"mappings":"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","file":"static/js/19.e53ce9d4.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"d\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n        keywords = parserConfig.keywords || {},\n        builtin = parserConfig.builtin || {},\n        blockKeywords = parserConfig.blockKeywords || {},\n        atoms = parserConfig.atoms || {},\n        hooks = parserConfig.hooks || {},\n        multiLineStrings = parserConfig.multiLineStrings;\n    var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (hooks[ch]) {\n        var result = hooks[ch](stream, state);\n        if (result !== false) return result;\n      }\n\n      if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n        curPunc = ch;\n        return null;\n      }\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n\n      if (ch == \"/\") {\n        if (stream.eat(\"+\")) {\n          state.tokenize = tokenNestedComment;\n          return tokenNestedComment(stream, state);\n        }\n\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      var cur = stream.current();\n\n      if (keywords.propertyIsEnumerable(cur)) {\n        if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n        return \"keyword\";\n      }\n\n      if (builtin.propertyIsEnumerable(cur)) {\n        if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n        return \"builtin\";\n      }\n\n      if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenNestedComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n\n        maybeEnd = ch == \"+\";\n      }\n\n      return \"comment\";\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    } // Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n      token: function token(stream, state) {\n        var ctx = state.context;\n\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\" || style == \"meta\") return style;\n        if (ctx.align == null) ctx.align = true;\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") popContext(state);else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n\n          if (ctx.type == \"}\") ctx = popContext(state);\n\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n        } else if (curPunc == ctx.type) popContext(state);else if ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\") pushContext(state, stream.column(), \"statement\");\n        state.startOfLine = false;\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n        var ctx = state.context,\n            firstChar = textAfter && textAfter.charAt(0);\n        if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n        var closing = firstChar == ctx.type;\n        if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);else if (ctx.align) return ctx.column + (closing ? 0 : 1);else return ctx.indented + (closing ? 0 : indentUnit);\n      },\n      electricChars: \"{}\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      blockCommentContinue: \" * \",\n      lineComment: \"//\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {},\n        words = str.split(\" \");\n\n    for (var i = 0; i < words.length; ++i) {\n      obj[words[i]] = true;\n    }\n\n    return obj;\n  }\n\n  var blockKeywords = \"body catch class do else enum for foreach foreach_reverse if in interface mixin \" + \"out scope struct switch try union unittest version while with\";\n  CodeMirror.defineMIME(\"text/x-d\", {\n    name: \"d\",\n    keywords: words(\"abstract alias align asm assert auto break case cast cdouble cent cfloat const continue \" + \"debug default delegate delete deprecated export extern final finally function goto immutable \" + \"import inout invariant is lazy macro module new nothrow override package pragma private \" + \"protected public pure ref return shared short static super synchronized template this \" + \"throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters \" + blockKeywords),\n    blockKeywords: words(blockKeywords),\n    builtin: words(\"bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte \" + \"ucent uint ulong ushort wchar wstring void size_t sizediff_t\"),\n    atoms: words(\"exit failure success true false null\"),\n    hooks: {\n      \"@\": function _(stream, _state) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      }\n    }\n  });\n});"],"sourceRoot":""}