{"version":3,"sources":["../node_modules/codemirror/mode/jinja2/jinja2.js"],"names":["CodeMirror","defineMode","keywords","operator","sign","atom","number","tokenBase","stream","state","ch","peek","incomment","skipTo","eatWhile","skipToEnd","intag","match","instring","next","eat","sol","RegExp","join","startState","tokenize","token","blockCommentStart","blockCommentEnd","mod","__webpack_require__"],"mappings":"+EAOC,SAAAA,GACD,aAEAA,EAAAC,WAAA,oBACA,IAAAC,EAAA,0mBACAC,EAAA,oBACAC,EAAA,aACAC,EAAA,iBACAC,EAAA,6BAIA,SAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAF,EAAAG,OAEA,GAAAF,EAAAG,UAQA,OAPAJ,EAAAK,OAAA,OAGAL,EAAAM,SAAA,QACAL,EAAAG,WAAA,GAHAJ,EAAAO,YAMA,UACO,GAAAN,EAAAO,MAAA,CAEP,GAAAP,EAAAN,SAAA,CAGA,GAFAM,EAAAN,UAAA,EAEAK,EAAAS,MAAAZ,GACA,aAGA,GAAAG,EAAAS,MAAAX,GACA,eAKA,GAAAG,EAAAL,KAAA,CAGA,GAFAK,EAAAL,MAAA,EAEAI,EAAAS,MAAAZ,GACA,aAGA,GAAAG,EAAAS,MAAAX,GACA,eAIA,GAAAG,EAAAS,SAMA,OALAR,GAAAD,EAAAS,WACAT,EAAAS,UAAA,GAGAV,EAAAW,OACA,SACS,QAAAT,GAAA,KAAAA,EAGT,OAFAD,EAAAS,SAAAR,EACAF,EAAAW,OACA,SACS,GAAAX,EAAAS,MAAAR,EAAAO,MAAA,MAAuCR,EAAAY,IAAA,MAAAZ,EAAAS,MAAAR,EAAAO,MAAA,KAEhD,OADAP,EAAAO,OAAA,EACA,MACS,GAAAR,EAAAS,MAAAd,GAET,OADAM,EAAAN,UAAA,EACA,WACS,GAAAK,EAAAS,MAAAb,GACTK,EAAAL,MAAA,OAEA,GAAAI,EAAAY,IAAA,MAAAZ,EAAAa,MAAA,CACA,GAAAb,EAAAS,MAAAf,GACA,gBAGA,GAAAM,EAAAS,MAAAZ,GACA,aAGA,GAAAG,EAAAS,MAAAX,GACA,eAGAE,EAAAa,OACAb,EAAAW,YAGAX,EAAAW,OAIA,iBACO,GAAAX,EAAAY,IAAA,KAAuB,CAC9B,GAAAZ,EAAAY,IAAA,KAUA,OATAX,EAAAG,WAAA,EAEAJ,EAAAK,OAAA,OAGAL,EAAAM,SAAA,QACAL,EAAAG,WAAA,GAHAJ,EAAAO,YAMA,UACS,GAAAL,EAAAF,EAAAY,IAAA,QAST,OAPAX,EAAAO,MAAAN,EAEA,KAAAA,IACAD,EAAAO,MAAA,KAGAR,EAAAY,IAAA,KACA,MAIAZ,EAAAW,OAIA,OAjHAjB,EAAA,IAAAoB,OAAA,KAAApB,EAAAqB,KAAA,gBACAlB,EAAA,IAAAiB,OAAA,KAAAjB,EAAAkB,KAAA,gBAgHA,CACAC,WAAA,WACA,OACAC,SAAAlB,IAGAmB,MAAA,SAAAlB,EAAAC,GACA,OAAAA,EAAAgB,SAAAjB,EAAAC,IAEAkB,kBAAA,KACAC,gBAAA,QAvIAC,CAAQC,EAAQ","file":"static/js/47.5d3e70dd.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"jinja2\", function () {\n    var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\", \"extends\", \"filter\", \"endfilter\", \"firstof\", \"for\", \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\", \"ifequal\", \"endifequal\", \"ifnotequal\", \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\", \"parsed\", \"regroup\", \"reversed\", \"spaceless\", \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\", \"closeblock\", \"openvariable\", \"closevariable\", \"openbrace\", \"closebrace\", \"opencomment\", \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\", \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\", \"endblocktrans\", \"get_available_languages\", \"get_current_language_bidi\", \"plural\"],\n        operator = /^[+\\-*&%=<>!?|~^]/,\n        sign = /^[:\\[\\(\\{]/,\n        atom = [\"true\", \"false\"],\n        number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase(stream, state) {\n      var ch = stream.peek(); //Comment\n\n      if (state.incomment) {\n        if (!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n\n        return \"comment\"; //Tag\n      } else if (state.intag) {\n        //After operator\n        if (state.operator) {\n          state.operator = false;\n\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        } //After sign\n\n\n        if (state.sign) {\n          state.sign = false;\n\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if (state.instring) {\n          if (ch == state.instring) {\n            state.instring = false;\n          }\n\n          stream.next();\n          return \"string\";\n        } else if (ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if (stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if (stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if (stream.eat(\" \") || stream.sol()) {\n            if (stream.match(keywords)) {\n              return \"keyword\";\n            }\n\n            if (stream.match(atom)) {\n              return \"atom\";\n            }\n\n            if (stream.match(number)) {\n              return \"number\";\n            }\n\n            if (stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n        }\n\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n\n          if (!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n\n          return \"comment\"; //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n\n          if (ch == \"{\") {\n            state.intag = \"}\";\n          }\n\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n\n      stream.next();\n    }\n\n    ;\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase\n        };\n      },\n      token: function token(stream, state) {\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"{#\",\n      blockCommentEnd: \"#}\"\n    };\n  });\n});"],"sourceRoot":""}