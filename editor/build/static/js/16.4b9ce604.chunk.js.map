{"version":3,"sources":["../node_modules/codemirror/mode/commonlisp/commonlisp.js"],"names":["CodeMirror","defineMode","config","type","specialForm","assumeBody","numLiteral","symbol","readSym","stream","ch","next","test","backUp","current","base","state","eatSpace","match","tokenize","inString","skipToEnd","skipTo","inComment","name","charAt","lastType","escaped","last","startState","ctx","prev","start","indentTo","token","sol","style","indentUnit","column","indent","_textAfter","i","closeBrackets","pairs","lineComment","blockCommentStart","blockCommentEnd","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/16.4b9ce604.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"commonlisp\", function (config) {\n    var specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;\n    var assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;\n    var numLiteral = /^(?:[+\\-]?(?:\\d+|\\d*\\.\\d+)(?:[efd][+\\-]?\\d+)?|[+\\-]?\\d+(?:\\/[+\\-]?\\d+)?|#b[+\\-]?[01]+|#o[+\\-]?[0-7]+|#x[+\\-]?[\\da-f]+)/;\n    var symbol = /[^\\s'`,@()\\[\\]\";]/;\n    var type;\n\n    function readSym(stream) {\n      var ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"\\\\\") stream.next();else if (!symbol.test(ch)) {\n          stream.backUp(1);\n          break;\n        }\n      }\n\n      return stream.current();\n    }\n\n    function base(stream, state) {\n      if (stream.eatSpace()) {\n        type = \"ws\";\n        return null;\n      }\n\n      if (stream.match(numLiteral)) return \"number\";\n      var ch = stream.next();\n      if (ch == \"\\\\\") ch = stream.next();\n      if (ch == '\"') return (state.tokenize = inString)(stream, state);else if (ch == \"(\") {\n        type = \"open\";\n        return \"bracket\";\n      } else if (ch == \")\" || ch == \"]\") {\n        type = \"close\";\n        return \"bracket\";\n      } else if (ch == \";\") {\n        stream.skipToEnd();\n        type = \"ws\";\n        return \"comment\";\n      } else if (/['`,@]/.test(ch)) return null;else if (ch == \"|\") {\n        if (stream.skipTo(\"|\")) {\n          stream.next();\n          return \"symbol\";\n        } else {\n          stream.skipToEnd();\n          return \"error\";\n        }\n      } else if (ch == \"#\") {\n        var ch = stream.next();\n\n        if (ch == \"(\") {\n          type = \"open\";\n          return \"bracket\";\n        } else if (/[+\\-=\\.']/.test(ch)) return null;else if (/\\d/.test(ch) && stream.match(/^\\d*#/)) return null;else if (ch == \"|\") return (state.tokenize = inComment)(stream, state);else if (ch == \":\") {\n          readSym(stream);\n          return \"meta\";\n        } else if (ch == \"\\\\\") {\n          stream.next();\n          readSym(stream);\n          return \"string-2\";\n        } else return \"error\";\n      } else {\n        var name = readSym(stream);\n        if (name == \".\") return null;\n        type = \"symbol\";\n        if (name == \"nil\" || name == \"t\" || name.charAt(0) == \":\") return \"atom\";\n        if (state.lastType == \"open\" && (specialForm.test(name) || assumeBody.test(name))) return \"keyword\";\n        if (name.charAt(0) == \"&\") return \"variable-2\";\n        return \"variable\";\n      }\n    }\n\n    function inString(stream, state) {\n      var escaped = false,\n          next;\n\n      while (next = stream.next()) {\n        if (next == '\"' && !escaped) {\n          state.tokenize = base;\n          break;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      return \"string\";\n    }\n\n    function inComment(stream, state) {\n      var next, last;\n\n      while (next = stream.next()) {\n        if (next == \"#\" && last == \"|\") {\n          state.tokenize = base;\n          break;\n        }\n\n        last = next;\n      }\n\n      type = \"ws\";\n      return \"comment\";\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          ctx: {\n            prev: null,\n            start: 0,\n            indentTo: 0\n          },\n          lastType: null,\n          tokenize: base\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol() && typeof state.ctx.indentTo != \"number\") state.ctx.indentTo = state.ctx.start + 1;\n        type = null;\n        var style = state.tokenize(stream, state);\n\n        if (type != \"ws\") {\n          if (state.ctx.indentTo == null) {\n            if (type == \"symbol\" && assumeBody.test(stream.current())) state.ctx.indentTo = state.ctx.start + config.indentUnit;else state.ctx.indentTo = \"next\";\n          } else if (state.ctx.indentTo == \"next\") {\n            state.ctx.indentTo = stream.column();\n          }\n\n          state.lastType = type;\n        }\n\n        if (type == \"open\") state.ctx = {\n          prev: state.ctx,\n          start: stream.column(),\n          indentTo: null\n        };else if (type == \"close\") state.ctx = state.ctx.prev || state.ctx;\n        return style;\n      },\n      indent: function indent(state, _textAfter) {\n        var i = state.ctx.indentTo;\n        return typeof i == \"number\" ? i : state.ctx.start + 1;\n      },\n      closeBrackets: {\n        pairs: \"()[]{}\\\"\\\"\"\n      },\n      lineComment: \";;\",\n      blockCommentStart: \"#|\",\n      blockCommentEnd: \"|#\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-common-lisp\", \"commonlisp\");\n});"],"sourceRoot":""}