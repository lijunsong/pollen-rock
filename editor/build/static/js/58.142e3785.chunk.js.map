{"version":3,"sources":["../node_modules/codemirror/mode/mumps/mumps.js"],"names":["CodeMirror","defineMode","wordRegexp","words","RegExp","join","singleOperators","doubleOperators","singleDelimiters","brackets","identifiers","intrinsicFuncs","command","startState","label","commandMode","token","stream","state","style","sol","ch","peek","skipToEnd","match","skipTo","next","test","eatWhile","tokenBase","defineMIME","mod","__webpack_require__"],"mappings":"+EAWC,SAAAA,GACD,aAEAA,EAAAC,WAAA,mBACA,SAAAC,EAAAC,GACA,WAAAC,OAAA,MAAAD,EAAAE,KAAA,oBAGA,IAAAC,EAAA,IAAAF,OAAA,sCACAG,EAAA,IAAAH,OAAA,8CACAI,EAAA,IAAAJ,OAAA,YACAK,EAAA,IAAAL,OAAA,QACAM,EAAA,IAAAN,OAAA,0BAIAO,EAAAT,EADA,mlBAEAU,EAAAV,EAJA,6RAqFA,OACAW,WAAA,WACA,OACAC,OAAA,EACAC,YAAA,IAGAC,MAAA,SAAAC,EAAAC,GACA,IAAAC,EAvFA,SAAAF,EAAAC,GACAD,EAAAG,QACAF,EAAAJ,OAAA,EACAI,EAAAH,YAAA,GAQA,IAAAM,EAAAJ,EAAAK,OAcA,MAZA,KAAAD,GAAA,MAAAA,GAEAH,EAAAJ,OAAA,EACA,GAAAI,EAAAH,YAAAG,EAAAH,YAAA,GAA0DG,EAAAH,YAAA,MAAAG,EAAAH,eAAAG,EAAAH,YAAA,IACnD,KAAAM,GAAAH,EAAAH,YAAA,IACPG,EAAAH,YAAA,KAAAM,GAAA,EACA,GAIA,MAAAA,GAAA,OAAAA,IAAAH,EAAAJ,OAAA,GAEA,MAAAO,GACAJ,EAAAM,YACA,WAIAN,EAAAO,MAAA,6CAEA,KAAAH,EACAJ,EAAAQ,OAAA,MACAR,EAAAS,OACA,WAEAT,EAAAM,YACA,SAKAN,EAAAO,MAAAjB,IAAAU,EAAAO,MAAAlB,GAAA,WAEAW,EAAAO,MAAAhB,GAAA,KAEAC,EAAAkB,KAAAN,IACAJ,EAAAS,OACA,WAGAR,EAAAH,YAAA,GAAAE,EAAAO,MAAAZ,GAAA,aACAK,EAAAO,MAAAb,GAAA,UACAM,EAAAO,MAAAd,GAAA,WAGA,MAAAW,GAAA,MAAAA,GACAJ,EAAAS,OACA,WAIA,MAAAL,GACAJ,EAAAS,OACA,YAGA,QAAAC,KAAAN,IACAJ,EAAAW,SAAA,SACA,aAIAX,EAAAS,OACA,SAWAG,CAAAZ,EAAAC,GACA,OAAAA,EAAAJ,MAAA,MACAK,MAIAnB,EAAA8B,WAAA,wBAnHAC,CAAQC,EAAQ","file":"static/js/58.142e3785.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\n  This MUMPS Language script was constructed using vbscript.js as a template.\n*/\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"mumps\", function () {\n    function wordRegexp(words) {\n      return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n    }\n\n    var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&#!_?\\\\\\\\<>=\\\\'\\\\[\\\\]]\");\n    var doubleOperators = new RegExp(\"^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))\");\n    var singleDelimiters = new RegExp(\"^[\\\\.,:]\");\n    var brackets = new RegExp(\"[()]\");\n    var identifiers = new RegExp(\"^[%A-Za-z][A-Za-z0-9]*\");\n    var commandKeywords = [\"break\", \"close\", \"do\", \"else\", \"for\", \"goto\", \"halt\", \"hang\", \"if\", \"job\", \"kill\", \"lock\", \"merge\", \"new\", \"open\", \"quit\", \"read\", \"set\", \"tcommit\", \"trollback\", \"tstart\", \"use\", \"view\", \"write\", \"xecute\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"q\", \"r\", \"s\", \"tc\", \"tro\", \"ts\", \"u\", \"v\", \"w\", \"x\"]; // The following list includes instrinsic functions _and_ special variables\n\n    var intrinsicFuncsWords = [\"\\\\$ascii\", \"\\\\$char\", \"\\\\$data\", \"\\\\$ecode\", \"\\\\$estack\", \"\\\\$etrap\", \"\\\\$extract\", \"\\\\$find\", \"\\\\$fnumber\", \"\\\\$get\", \"\\\\$horolog\", \"\\\\$io\", \"\\\\$increment\", \"\\\\$job\", \"\\\\$justify\", \"\\\\$length\", \"\\\\$name\", \"\\\\$next\", \"\\\\$order\", \"\\\\$piece\", \"\\\\$qlength\", \"\\\\$qsubscript\", \"\\\\$query\", \"\\\\$quit\", \"\\\\$random\", \"\\\\$reverse\", \"\\\\$select\", \"\\\\$stack\", \"\\\\$test\", \"\\\\$text\", \"\\\\$translate\", \"\\\\$view\", \"\\\\$x\", \"\\\\$y\", \"\\\\$a\", \"\\\\$c\", \"\\\\$d\", \"\\\\$e\", \"\\\\$ec\", \"\\\\$es\", \"\\\\$et\", \"\\\\$f\", \"\\\\$fn\", \"\\\\$g\", \"\\\\$h\", \"\\\\$i\", \"\\\\$j\", \"\\\\$l\", \"\\\\$n\", \"\\\\$na\", \"\\\\$o\", \"\\\\$p\", \"\\\\$q\", \"\\\\$ql\", \"\\\\$qs\", \"\\\\$r\", \"\\\\$re\", \"\\\\$s\", \"\\\\$st\", \"\\\\$t\", \"\\\\$tr\", \"\\\\$v\", \"\\\\$z\"];\n    var intrinsicFuncs = wordRegexp(intrinsicFuncsWords);\n    var command = wordRegexp(commandKeywords);\n\n    function tokenBase(stream, state) {\n      if (stream.sol()) {\n        state.label = true;\n        state.commandMode = 0;\n      } // The <space> character has meaning in MUMPS. Ignoring consecutive\n      // spaces would interfere with interpreting whether the next non-space\n      // character belongs to the command or argument context.\n      // Examine each character and update a mode variable whose interpretation is:\n      //   >0 => command    0 => argument    <0 => command post-conditional\n\n\n      var ch = stream.peek();\n\n      if (ch == \" \" || ch == \"\\t\") {\n        // Pre-process <space>\n        state.label = false;\n        if (state.commandMode == 0) state.commandMode = 1;else if (state.commandMode < 0 || state.commandMode == 2) state.commandMode = 0;\n      } else if (ch != \".\" && state.commandMode > 0) {\n        if (ch == \":\") state.commandMode = -1; // SIS - Command post-conditional\n        else state.commandMode = 2;\n      } // Do not color parameter list as line tag\n\n\n      if (ch === \"(\" || ch === \"\\t\") state.label = false; // MUMPS comment starts with \";\"\n\n      if (ch === \";\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } // Number Literals // SIS/RLM - MUMPS permits canonic number followed by concatenate operator\n\n\n      if (stream.match(/^[-+]?\\d+(\\.\\d+)?([eE][-+]?\\d+)?/)) return \"number\"; // Handle Strings\n\n      if (ch == '\"') {\n        if (stream.skipTo('\"')) {\n          stream.next();\n          return \"string\";\n        } else {\n          stream.skipToEnd();\n          return \"error\";\n        }\n      } // Handle operators and Delimiters\n\n\n      if (stream.match(doubleOperators) || stream.match(singleOperators)) return \"operator\"; // Prevents leading \".\" in DO block from falling through to error\n\n      if (stream.match(singleDelimiters)) return null;\n\n      if (brackets.test(ch)) {\n        stream.next();\n        return \"bracket\";\n      }\n\n      if (state.commandMode > 0 && stream.match(command)) return \"variable-2\";\n      if (stream.match(intrinsicFuncs)) return \"builtin\";\n      if (stream.match(identifiers)) return \"variable\"; // Detect dollar-sign when not a documented intrinsic function\n      // \"^\" may introduce a GVN or SSVN - Color same as function\n\n      if (ch === \"$\" || ch === \"^\") {\n        stream.next();\n        return \"builtin\";\n      } // MUMPS Indirection\n\n\n      if (ch === \"@\") {\n        stream.next();\n        return \"string-2\";\n      }\n\n      if (/[\\w%]/.test(ch)) {\n        stream.eatWhile(/[\\w%]/);\n        return \"variable\";\n      } // Handle non-detected items\n\n\n      stream.next();\n      return \"error\";\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          label: false,\n          commandMode: 0\n        };\n      },\n      token: function token(stream, state) {\n        var style = tokenBase(stream, state);\n        if (state.label) return \"tag\";\n        return style;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-mumps\", \"mumps\");\n});"],"sourceRoot":""}