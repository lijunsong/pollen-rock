{"version":3,"sources":["../node_modules/codemirror/mode/jsx/jsx.js","../node_modules/codemirror/mode/xml/xml.js"],"names":["CodeMirror","Context","state","mode","depth","prev","this","copyContext","context","copyState","defineMode","config","modeConfig","xmlMode","getMode","name","allowMissing","multilineTagIndentPastTag","allowMissingTagName","jsMode","base","flatXMLIndent","tagName","result","indent","token","stream","cx","match","skipToEnd","peek","skipAttribute","xmlContext","startOfLine","indentUnit","lexical","indented","startState","stop","style","cur","current","test","indexOf","backUp","length","xmlToken","expressionAllowed","skipExpression","jsToken","textAfter","fullLine","innerMode","defineMIME","typescript","mod","__webpack_require__","htmlConfig","autoSelfClosers","area","br","col","command","embed","frame","hr","img","input","keygen","link","meta","param","source","track","wbr","menuitem","implicitlyClosed","dd","li","optgroup","option","p","rp","rt","tbody","td","tfoot","th","tr","contextGrabbers","dt","address","article","aside","blockquote","dir","div","dl","fieldset","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","menu","nav","ol","pre","section","table","ul","thead","doNotIndent","allowUnquoted","caseFold","xmlConfig","editorConf","config_","type","setStyle","defaults","htmlMode","prop","inText","chain","parser","tokenize","ch","next","eat","inBlock","eatWhile","doctype","inTag","baseState","tagStart","quote","closure","eol","isInAttribute","inAttribute","stringStartCol","column","terminator","hasOwnProperty","noIndent","popContext","maybePopContext","nextTagName","parentTagName","tagNameState","closeTagNameState","attrState","matchClosing","closeState","closeStateErr","_stream","attrEqState","attrValueState","attrContinuedState","isInText","baseIndent","sol","indentation","eatSpace","Pass","multilineTagIndentFactor","alignCDATA","tagAfter","exec","grabbers","electricInput","blockCommentStart","blockCommentEnd","configuration","helperType","mimeModes"],"mappings":"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","file":"static/js/48.735344e0.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../javascript/javascript\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../javascript/javascript\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\"; // Depth means the amount of open braces in JS context, in XML\n  // context 0 means not in tag, 1 means in tag, and 2 means in tag\n  // and js block comment.\n\n  function Context(state, mode, depth, prev) {\n    this.state = state;\n    this.mode = mode;\n    this.depth = depth;\n    this.prev = prev;\n  }\n\n  function copyContext(context) {\n    return new Context(CodeMirror.copyState(context.mode, context.state), context.mode, context.depth, context.prev && copyContext(context.prev));\n  }\n\n  CodeMirror.defineMode(\"jsx\", function (config, modeConfig) {\n    var xmlMode = CodeMirror.getMode(config, {\n      name: \"xml\",\n      allowMissing: true,\n      multilineTagIndentPastTag: false,\n      allowMissingTagName: true\n    });\n    var jsMode = CodeMirror.getMode(config, modeConfig && modeConfig.base || \"javascript\");\n\n    function flatXMLIndent(state) {\n      var tagName = state.tagName;\n      state.tagName = null;\n      var result = xmlMode.indent(state, \"\");\n      state.tagName = tagName;\n      return result;\n    }\n\n    function token(stream, state) {\n      if (state.context.mode == xmlMode) return xmlToken(stream, state, state.context);else return jsToken(stream, state, state.context);\n    }\n\n    function xmlToken(stream, state, cx) {\n      if (cx.depth == 2) {\n        // Inside a JS /* */ comment\n        if (stream.match(/^.*?\\*\\//)) cx.depth = 1;else stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (stream.peek() == \"{\") {\n        xmlMode.skipAttribute(cx.state);\n        var indent = flatXMLIndent(cx.state),\n            xmlContext = cx.state.context; // If JS starts on same line as tag\n\n        if (xmlContext && stream.match(/^[^>]*>\\s*$/, false)) {\n          while (xmlContext.prev && !xmlContext.startOfLine) {\n            xmlContext = xmlContext.prev;\n          } // If tag starts the line, use XML indentation level\n\n\n          if (xmlContext.startOfLine) indent -= config.indentUnit; // Else use JS indentation level\n          else if (cx.prev.state.lexical) indent = cx.prev.state.lexical.indented; // Else if inside of tag\n        } else if (cx.depth == 1) {\n          indent += config.indentUnit;\n        }\n\n        state.context = new Context(CodeMirror.startState(jsMode, indent), jsMode, 0, state.context);\n        return null;\n      }\n\n      if (cx.depth == 1) {\n        // Inside of tag\n        if (stream.peek() == \"<\") {\n          // Tag inside of tag\n          xmlMode.skipAttribute(cx.state);\n          state.context = new Context(CodeMirror.startState(xmlMode, flatXMLIndent(cx.state)), xmlMode, 0, state.context);\n          return null;\n        } else if (stream.match(\"//\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (stream.match(\"/*\")) {\n          cx.depth = 2;\n          return token(stream, state);\n        }\n      }\n\n      var style = xmlMode.token(stream, cx.state),\n          cur = stream.current(),\n          stop;\n\n      if (/\\btag\\b/.test(style)) {\n        if (/>$/.test(cur)) {\n          if (cx.state.context) cx.depth = 0;else state.context = state.context.prev;\n        } else if (/^</.test(cur)) {\n          cx.depth = 1;\n        }\n      } else if (!style && (stop = cur.indexOf(\"{\")) > -1) {\n        stream.backUp(cur.length - stop);\n      }\n\n      return style;\n    }\n\n    function jsToken(stream, state, cx) {\n      if (stream.peek() == \"<\" && jsMode.expressionAllowed(stream, cx.state)) {\n        jsMode.skipExpression(cx.state);\n        state.context = new Context(CodeMirror.startState(xmlMode, jsMode.indent(cx.state, \"\")), xmlMode, 0, state.context);\n        return null;\n      }\n\n      var style = jsMode.token(stream, cx.state);\n\n      if (!style && cx.depth != null) {\n        var cur = stream.current();\n\n        if (cur == \"{\") {\n          cx.depth++;\n        } else if (cur == \"}\") {\n          if (--cx.depth == 0) state.context = state.context.prev;\n        }\n      }\n\n      return style;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          context: new Context(CodeMirror.startState(jsMode), jsMode)\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          context: copyContext(state.context)\n        };\n      },\n      token: token,\n      indent: function indent(state, textAfter, fullLine) {\n        return state.context.mode.indent(state.context.state, textAfter, fullLine);\n      },\n      innerMode: function innerMode(state) {\n        return state.context;\n      }\n    };\n  }, \"xml\", \"javascript\");\n  CodeMirror.defineMIME(\"text/jsx\", \"jsx\");\n  CodeMirror.defineMIME(\"text/typescript-jsx\", {\n    name: \"jsx\",\n    base: {\n      name: \"javascript\",\n      typescript: true\n    }\n  });\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var htmlConfig = {\n    autoSelfClosers: {\n      'area': true,\n      'base': true,\n      'br': true,\n      'col': true,\n      'command': true,\n      'embed': true,\n      'frame': true,\n      'hr': true,\n      'img': true,\n      'input': true,\n      'keygen': true,\n      'link': true,\n      'meta': true,\n      'param': true,\n      'source': true,\n      'track': true,\n      'wbr': true,\n      'menuitem': true\n    },\n    implicitlyClosed: {\n      'dd': true,\n      'li': true,\n      'optgroup': true,\n      'option': true,\n      'p': true,\n      'rp': true,\n      'rt': true,\n      'tbody': true,\n      'td': true,\n      'tfoot': true,\n      'th': true,\n      'tr': true\n    },\n    contextGrabbers: {\n      'dd': {\n        'dd': true,\n        'dt': true\n      },\n      'dt': {\n        'dd': true,\n        'dt': true\n      },\n      'li': {\n        'li': true\n      },\n      'option': {\n        'option': true,\n        'optgroup': true\n      },\n      'optgroup': {\n        'optgroup': true\n      },\n      'p': {\n        'address': true,\n        'article': true,\n        'aside': true,\n        'blockquote': true,\n        'dir': true,\n        'div': true,\n        'dl': true,\n        'fieldset': true,\n        'footer': true,\n        'form': true,\n        'h1': true,\n        'h2': true,\n        'h3': true,\n        'h4': true,\n        'h5': true,\n        'h6': true,\n        'header': true,\n        'hgroup': true,\n        'hr': true,\n        'menu': true,\n        'nav': true,\n        'ol': true,\n        'p': true,\n        'pre': true,\n        'section': true,\n        'table': true,\n        'ul': true\n      },\n      'rp': {\n        'rp': true,\n        'rt': true\n      },\n      'rt': {\n        'rp': true,\n        'rt': true\n      },\n      'tbody': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'td': {\n        'td': true,\n        'th': true\n      },\n      'tfoot': {\n        'tbody': true\n      },\n      'th': {\n        'td': true,\n        'th': true\n      },\n      'thead': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'tr': {\n        'tr': true\n      }\n    },\n    doNotIndent: {\n      \"pre\": true\n    },\n    allowUnquoted: true,\n    allowMissing: true,\n    caseFold: true\n  };\n  var xmlConfig = {\n    autoSelfClosers: {},\n    implicitlyClosed: {},\n    contextGrabbers: {},\n    doNotIndent: {},\n    allowUnquoted: false,\n    allowMissing: false,\n    allowMissingTagName: false,\n    caseFold: false\n  };\n  CodeMirror.defineMode(\"xml\", function (editorConf, config_) {\n    var indentUnit = editorConf.indentUnit;\n    var config = {};\n    var defaults = config_.htmlMode ? htmlConfig : xmlConfig;\n\n    for (var prop in defaults) {\n      config[prop] = defaults[prop];\n    }\n\n    for (var prop in config_) {\n      config[prop] = config_[prop];\n    } // Return variables for tokenizers\n\n\n    var type, setStyle;\n\n    function inText(stream, state) {\n      function chain(parser) {\n        state.tokenize = parser;\n        return parser(stream, state);\n      }\n\n      var ch = stream.next();\n\n      if (ch == \"<\") {\n        if (stream.eat(\"!\")) {\n          if (stream.eat(\"[\")) {\n            if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));else return null;\n          } else if (stream.match(\"--\")) {\n            return chain(inBlock(\"comment\", \"-->\"));\n          } else if (stream.match(\"DOCTYPE\", true, true)) {\n            stream.eatWhile(/[\\w\\._\\-]/);\n            return chain(doctype(1));\n          } else {\n            return null;\n          }\n        } else if (stream.eat(\"?\")) {\n          stream.eatWhile(/[\\w\\._\\-]/);\n          state.tokenize = inBlock(\"meta\", \"?>\");\n          return \"meta\";\n        } else {\n          type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n          state.tokenize = inTag;\n          return \"tag bracket\";\n        }\n      } else if (ch == \"&\") {\n        var ok;\n\n        if (stream.eat(\"#\")) {\n          if (stream.eat(\"x\")) {\n            ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n          } else {\n            ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n          }\n        } else {\n          ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n        }\n\n        return ok ? \"atom\" : \"error\";\n      } else {\n        stream.eatWhile(/[^&<]/);\n        return null;\n      }\n    }\n\n    inText.isInText = true;\n\n    function inTag(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \">\" || ch == \"/\" && stream.eat(\">\")) {\n        state.tokenize = inText;\n        type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n        return \"tag bracket\";\n      } else if (ch == \"=\") {\n        type = \"equals\";\n        return null;\n      } else if (ch == \"<\") {\n        state.tokenize = inText;\n        state.state = baseState;\n        state.tagName = state.tagStart = null;\n        var next = state.tokenize(stream, state);\n        return next ? next + \" tag error\" : \"tag error\";\n      } else if (/[\\'\\\"]/.test(ch)) {\n        state.tokenize = inAttribute(ch);\n        state.stringStartCol = stream.column();\n        return state.tokenize(stream, state);\n      } else {\n        stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\n        return \"word\";\n      }\n    }\n\n    function inAttribute(quote) {\n      var closure = function closure(stream, state) {\n        while (!stream.eol()) {\n          if (stream.next() == quote) {\n            state.tokenize = inTag;\n            break;\n          }\n        }\n\n        return \"string\";\n      };\n\n      closure.isInAttribute = true;\n      return closure;\n    }\n\n    function inBlock(style, terminator) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = inText;\n            break;\n          }\n\n          stream.next();\n        }\n\n        return style;\n      };\n    }\n\n    function doctype(depth) {\n      return function (stream, state) {\n        var ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == \"<\") {\n            state.tokenize = doctype(depth + 1);\n            return state.tokenize(stream, state);\n          } else if (ch == \">\") {\n            if (depth == 1) {\n              state.tokenize = inText;\n              break;\n            } else {\n              state.tokenize = doctype(depth - 1);\n              return state.tokenize(stream, state);\n            }\n          }\n        }\n\n        return \"meta\";\n      };\n    }\n\n    function Context(state, tagName, startOfLine) {\n      this.prev = state.context;\n      this.tagName = tagName;\n      this.indent = state.indented;\n      this.startOfLine = startOfLine;\n      if (config.doNotIndent.hasOwnProperty(tagName) || state.context && state.context.noIndent) this.noIndent = true;\n    }\n\n    function popContext(state) {\n      if (state.context) state.context = state.context.prev;\n    }\n\n    function maybePopContext(state, nextTagName) {\n      var parentTagName;\n\n      while (true) {\n        if (!state.context) {\n          return;\n        }\n\n        parentTagName = state.context.tagName;\n\n        if (!config.contextGrabbers.hasOwnProperty(parentTagName) || !config.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {\n          return;\n        }\n\n        popContext(state);\n      }\n    }\n\n    function baseState(type, stream, state) {\n      if (type == \"openTag\") {\n        state.tagStart = stream.column();\n        return tagNameState;\n      } else if (type == \"closeTag\") {\n        return closeTagNameState;\n      } else {\n        return baseState;\n      }\n    }\n\n    function tagNameState(type, stream, state) {\n      if (type == \"word\") {\n        state.tagName = stream.current();\n        setStyle = \"tag\";\n        return attrState;\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return attrState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return tagNameState;\n      }\n    }\n\n    function closeTagNameState(type, stream, state) {\n      if (type == \"word\") {\n        var tagName = stream.current();\n        if (state.context && state.context.tagName != tagName && config.implicitlyClosed.hasOwnProperty(state.context.tagName)) popContext(state);\n\n        if (state.context && state.context.tagName == tagName || config.matchClosing === false) {\n          setStyle = \"tag\";\n          return closeState;\n        } else {\n          setStyle = \"tag error\";\n          return closeStateErr;\n        }\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return closeState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return closeStateErr;\n      }\n    }\n\n    function closeState(type, _stream, state) {\n      if (type != \"endTag\") {\n        setStyle = \"error\";\n        return closeState;\n      }\n\n      popContext(state);\n      return baseState;\n    }\n\n    function closeStateErr(type, stream, state) {\n      setStyle = \"error\";\n      return closeState(type, stream, state);\n    }\n\n    function attrState(type, _stream, state) {\n      if (type == \"word\") {\n        setStyle = \"attribute\";\n        return attrEqState;\n      } else if (type == \"endTag\" || type == \"selfcloseTag\") {\n        var tagName = state.tagName,\n            tagStart = state.tagStart;\n        state.tagName = state.tagStart = null;\n\n        if (type == \"selfcloseTag\" || config.autoSelfClosers.hasOwnProperty(tagName)) {\n          maybePopContext(state, tagName);\n        } else {\n          maybePopContext(state, tagName);\n          state.context = new Context(state, tagName, tagStart == state.indented);\n        }\n\n        return baseState;\n      }\n\n      setStyle = \"error\";\n      return attrState;\n    }\n\n    function attrEqState(type, stream, state) {\n      if (type == \"equals\") return attrValueState;\n      if (!config.allowMissing) setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrValueState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n\n      if (type == \"word\" && config.allowUnquoted) {\n        setStyle = \"string\";\n        return attrState;\n      }\n\n      setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrContinuedState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n      return attrState(type, stream, state);\n    }\n\n    return {\n      startState: function startState(baseIndent) {\n        var state = {\n          tokenize: inText,\n          state: baseState,\n          indented: baseIndent || 0,\n          tagName: null,\n          tagStart: null,\n          context: null\n        };\n        if (baseIndent != null) state.baseIndent = baseIndent;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (!state.tagName && stream.sol()) state.indented = stream.indentation();\n        if (stream.eatSpace()) return null;\n        type = null;\n        var style = state.tokenize(stream, state);\n\n        if ((style || type) && style != \"comment\") {\n          setStyle = null;\n          state.state = state.state(type || style, stream, state);\n          if (setStyle) style = setStyle == \"error\" ? style + \" error\" : setStyle;\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter, fullLine) {\n        var context = state.context; // Indent multi-line strings (e.g. css).\n\n        if (state.tokenize.isInAttribute) {\n          if (state.tagStart == state.indented) return state.stringStartCol + 1;else return state.indented + indentUnit;\n        }\n\n        if (context && context.noIndent) return CodeMirror.Pass;\n        if (state.tokenize != inTag && state.tokenize != inText) return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0; // Indent the starts of attribute names.\n\n        if (state.tagName) {\n          if (config.multilineTagIndentPastTag !== false) return state.tagStart + state.tagName.length + 2;else return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n        }\n\n        if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\n        var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n\n        if (tagAfter && tagAfter[1]) {\n          // Closing tag spotted\n          while (context) {\n            if (context.tagName == tagAfter[2]) {\n              context = context.prev;\n              break;\n            } else if (config.implicitlyClosed.hasOwnProperty(context.tagName)) {\n              context = context.prev;\n            } else {\n              break;\n            }\n          }\n        } else if (tagAfter) {\n          // Opening tag spotted\n          while (context) {\n            var grabbers = config.contextGrabbers[context.tagName];\n            if (grabbers && grabbers.hasOwnProperty(tagAfter[2])) context = context.prev;else break;\n          }\n        }\n\n        while (context && context.prev && !context.startOfLine) {\n          context = context.prev;\n        }\n\n        if (context) return context.indent + indentUnit;else return state.baseIndent || 0;\n      },\n      electricInput: /<\\/[\\s\\w:]+>$/,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      configuration: config.htmlMode ? \"html\" : \"xml\",\n      helperType: config.htmlMode ? \"html\" : \"xml\",\n      skipAttribute: function skipAttribute(state) {\n        if (state.state == attrValueState) state.state = attrState;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/xml\", \"xml\");\n  CodeMirror.defineMIME(\"application/xml\", \"xml\");\n  if (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\")) CodeMirror.defineMIME(\"text/html\", {\n    name: \"xml\",\n    htmlMode: true\n  });\n});"],"sourceRoot":""}