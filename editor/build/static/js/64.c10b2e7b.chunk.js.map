{"version":3,"sources":["../node_modules/codemirror/mode/pascal/pascal.js"],"names":["CodeMirror","defineMode","keywords","str","obj","words","split","i","length","atoms","null","isOperatorChar","tokenComment","stream","state","ch","maybeEnd","next","tokenize","startState","token","eatSpace","style","quote","startOfLine","skipToEnd","escaped","end","eat","test","eatWhile","cur","current","propertyIsEnumerable","electricChars","defineMIME","mod","__webpack_require__"],"mappings":"+EAOC,SAAAA,GACD,aAEAA,EAAAC,WAAA,oBAYA,IAAAC,EAXA,SAAAC,GAIA,IAHA,IAAAC,EAAA,GACAC,EAAAF,EAAAG,MAAA,KAEAC,EAAA,EAAqBA,EAAAF,EAAAG,SAAkBD,EACvCH,EAAAC,EAAAE,KAAA,EAGA,OAAAH,EAGAC,CAAA,w9BACAI,EAAA,CACAC,MAAA,GAEAC,EAAA,mBAoEA,SAAAC,EAAAC,EAAAC,GAIA,IAHA,IACAC,EADAC,GAAA,EAGAD,EAAAF,EAAAI,QAAA,CACA,QAAAF,GAAAC,EAAA,CACAF,EAAAI,SAAA,KACA,MAGAF,EAAA,KAAAD,EAGA,gBAIA,OACAI,WAAA,WACA,OACAD,SAAA,OAGAE,MAAA,SAAAP,EAAAC,GACA,GAAAD,EAAAQ,WAAA,YACA,IAAAC,GAAAR,EAAAI,UA3FA,SAAAL,EAAAC,GACA,IA6CAS,EA7CAR,EAAAF,EAAAI,OAEA,QAAAF,GAAAD,EAAAU,YAEA,OADAX,EAAAY,YACA,OAGA,QAAAV,GAAA,KAAAA,EAEA,OADAD,EAAAI,UAqCAK,EArCAR,EAsCA,SAAAF,EAAAC,GAKA,IAJA,IACAG,EADAS,GAAA,EAEAC,GAAA,EAEA,OAAAV,EAAAJ,EAAAI,SAAA,CACA,GAAAA,GAAAM,IAAAG,EAAA,CACAC,GAAA,EACA,MAGAD,MAAA,MAAAT,EAIA,OADAU,GAAAD,IAAAZ,EAAAI,SAAA,MACA,WApDAJ,EAAAI,SAAAL,EAAAC,GAGA,QAAAC,GAAAF,EAAAe,IAAA,KAEA,OADAd,EAAAI,SAAAN,EACAA,EAAAC,EAAAC,GAGA,wBAAwBe,KAAAd,GACxB,YAGA,QAAAc,KAAAd,GAEA,OADAF,EAAAiB,SAAA,UACA,SAGA,QAAAf,GACAF,EAAAe,IAAA,KAEA,OADAf,EAAAY,YACA,UAIA,GAAAd,EAAAkB,KAAAd,GAEA,OADAF,EAAAiB,SAAAnB,GACA,WAGAE,EAAAiB,SAAA,WACA,IAAAC,EAAAlB,EAAAmB,UACA,OAAA9B,EAAA+B,qBAAAF,GAAA,UACAtB,EAAAwB,qBAAAF,GAAA,OACA,aAgDAlB,EAAAC,GACA,OAAAQ,GAGAY,cAAA,QAGAlC,EAAAmC,WAAA,0BA1HAC,CAAQC,EAAQ","file":"static/js/64.c10b2e7b.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"pascal\", function () {\n    function words(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var keywords = words(\"absolute and array asm begin case const constructor destructor div do \" + \"downto else end file for function goto if implementation in inherited \" + \"inline interface label mod nil not object of operator or packed procedure \" + \"program record reintroduce repeat self set shl shr string then to type \" + \"unit until uses var while with xor as class dispinterface except exports \" + \"finalization finally initialization inline is library on out packed \" + \"property raise resourcestring threadvar try absolute abstract alias \" + \"assembler bitpacked break cdecl continue cppdecl cvar default deprecated \" + \"dynamic enumerator experimental export external far far16 forward generic \" + \"helper implements index interrupt iocheck local message name near \" + \"nodefault noreturn nostackframe oldfpccall otherwise overload override \" + \"pascal platform private protected public published read register \" + \"reintroduce result safecall saveregisters softfloat specialize static \" + \"stdcall stored strict unaligned unimplemented varargs virtual write\");\n    var atoms = {\n      \"null\": true\n    };\n    var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \"#\" && state.startOfLine) {\n        stream.skipToEnd();\n        return \"meta\";\n      }\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (ch == \"(\" && stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n\n      if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n        return null;\n      }\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n\n      if (ch == \"/\") {\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\$_]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !escaped) state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \")\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    } // Interface\n\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: null\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\" || style == \"meta\") return style;\n        return style;\n      },\n      electricChars: \"{}\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-pascal\", \"pascal\");\n});"],"sourceRoot":""}