{"version":3,"sources":["../node_modules/codemirror/mode/javascript/javascript.js"],"names":["CodeMirror","defineMode","config","parserConfig","type","content","indentUnit","statementIndent","jsonldMode","jsonld","jsonMode","json","isTS","typescript","wordRE","wordCharacters","keywords","kw","style","A","B","C","D","operator","atom","if","while","with","else","do","try","finally","return","break","continue","new","delete","void","throw","debugger","var","const","let","function","catch","for","switch","case","default","in","typeof","instanceof","true","false","null","undefined","NaN","Infinity","this","class","super","yield","export","import","extends","await","isOperatorChar","isJsonldKeyword","ret","tp","cont","tokenBase","stream","state","quote","ch","next","tokenize","escaped","peek","match","test","eat","tokenComment","skipToEnd","expressionAllowed","inSet","readRegexp","current","tokenQuasi","lexical","eatWhile","word","lastType","propertyIsEnumerable","maybeEnd","brackets","findFatArrow","fatArrowAt","arrow","string","indexOf","start","m","exec","slice","index","depth","sawSomething","pos","charAt","bracket","atomicTypes","number","variable","regexp","jsonld-keyword","JSLexical","indented","column","align","prev","info","inScope","varname","v","localVars","name","cx","context","vars","marked","cc","pass","i","arguments","length","push","apply","inList","list","register","block","newContext","registerVarScoped","inner","Context","Var","globalVars","isModifier","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","lex","poplex","expect","wanted","exp","statement","value","vardef","parenExpr","maybeexpression","pop","maybeelse","functiondef","forspec","className","enumdef","typeexpr","pattern","expression","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","hasOwnProperty","classExpression","arrayLiteral","contCommasep","objprop","quasi","targetNoComma","target","maybeTypeArgs","maybeTarget","me","expr","property","backUp","continueQuasi","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","mayberettype","isKW","afterType","typeprop","typearg","maybeReturnType","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","formaybeinof","forspec3","classNameAfter","classBody","classfield","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","startState","basecolumn","token","sol","indentation","eatSpace","combinator","parseJS","textAfter","Pass","top","firstChar","c","closing","isContinuedStatement","doubleIndentSwitch","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","closeBrackets","helperType","skipExpression","registerHelper","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/0.7fc5f859.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"javascript\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit;\n    var statementIndent = parserConfig.statementIndent;\n    var jsonldMode = parserConfig.jsonld;\n    var jsonMode = parserConfig.json || jsonldMode;\n    var isTS = parserConfig.typescript;\n    var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/; // Tokenizer\n\n    var keywords = function () {\n      function kw(type) {\n        return {\n          type: type,\n          style: \"keyword\"\n        };\n      }\n\n      var A = kw(\"keyword a\"),\n          B = kw(\"keyword b\"),\n          C = kw(\"keyword c\"),\n          D = kw(\"keyword d\");\n      var operator = kw(\"operator\"),\n          atom = {\n        type: \"atom\",\n        style: \"atom\"\n      };\n      return {\n        \"if\": kw(\"if\"),\n        \"while\": A,\n        \"with\": A,\n        \"else\": B,\n        \"do\": B,\n        \"try\": B,\n        \"finally\": B,\n        \"return\": D,\n        \"break\": D,\n        \"continue\": D,\n        \"new\": kw(\"new\"),\n        \"delete\": C,\n        \"void\": C,\n        \"throw\": C,\n        \"debugger\": kw(\"debugger\"),\n        \"var\": kw(\"var\"),\n        \"const\": kw(\"var\"),\n        \"let\": kw(\"var\"),\n        \"function\": kw(\"function\"),\n        \"catch\": kw(\"catch\"),\n        \"for\": kw(\"for\"),\n        \"switch\": kw(\"switch\"),\n        \"case\": kw(\"case\"),\n        \"default\": kw(\"default\"),\n        \"in\": operator,\n        \"typeof\": operator,\n        \"instanceof\": operator,\n        \"true\": atom,\n        \"false\": atom,\n        \"null\": atom,\n        \"undefined\": atom,\n        \"NaN\": atom,\n        \"Infinity\": atom,\n        \"this\": kw(\"this\"),\n        \"class\": kw(\"class\"),\n        \"super\": kw(\"atom\"),\n        \"yield\": C,\n        \"export\": kw(\"export\"),\n        \"import\": kw(\"import\"),\n        \"extends\": C,\n        \"await\": C\n      };\n    }();\n\n    var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n    var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n    function readRegexp(stream) {\n      var escaped = false,\n          next,\n          inSet = false;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped) {\n          if (next == \"/\" && !inSet) return;\n          if (next == \"[\") inSet = true;else if (inSet && next == \"]\") inSet = false;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n    } // Used as scratch variables to communicate multiple values without\n    // consing up tons of objects.\n\n\n    var type, content;\n\n    function ret(tp, style, cont) {\n      type = tp;\n      content = cont;\n      return style;\n    }\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      } else if (ch == \".\" && stream.match(/^\\d+(?:[eE][+\\-]?\\d+)?/)) {\n        return ret(\"number\", \"number\");\n      } else if (ch == \".\" && stream.match(\"..\")) {\n        return ret(\"spread\", \"meta\");\n      } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n        return ret(ch);\n      } else if (ch == \"=\" && stream.eat(\">\")) {\n        return ret(\"=>\", \"operator\");\n      } else if (ch == \"0\" && stream.match(/^(?:x[\\da-f]+|o[0-7]+|b[01]+)n?/i)) {\n        return ret(\"number\", \"number\");\n      } else if (/\\d/.test(ch)) {\n        stream.match(/^\\d*(?:n|(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?/);\n        return ret(\"number\", \"number\");\n      } else if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        } else if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return ret(\"comment\", \"comment\");\n        } else if (expressionAllowed(stream, state, 1)) {\n          readRegexp(stream);\n          stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n          return ret(\"regexp\", \"string-2\");\n        } else {\n          stream.eat(\"=\");\n          return ret(\"operator\", \"operator\", stream.current());\n        }\n      } else if (ch == \"`\") {\n        state.tokenize = tokenQuasi;\n        return tokenQuasi(stream, state);\n      } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return ret(\"error\", \"error\");\n      } else if (isOperatorChar.test(ch)) {\n        if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n          if (stream.eat(\"=\")) {\n            if (ch == \"!\" || ch == \"=\") stream.eat(\"=\");\n          } else if (/[<>*+\\-]/.test(ch)) {\n            stream.eat(ch);\n            if (ch == \">\") stream.eat(ch);\n          }\n        }\n\n        return ret(\"operator\", \"operator\", stream.current());\n      } else if (wordRE.test(ch)) {\n        stream.eatWhile(wordRE);\n        var word = stream.current();\n\n        if (state.lastType != \".\") {\n          if (keywords.propertyIsEnumerable(word)) {\n            var kw = keywords[word];\n            return ret(kw.type, kw.style, word);\n          }\n\n          if (word == \"async\" && stream.match(/^(\\s|\\/\\*.*?\\*\\/)*[\\[\\(\\w]/, false)) return ret(\"async\", \"keyword\", word);\n        }\n\n        return ret(\"variable\", \"variable\", word);\n      }\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next;\n\n        if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)) {\n          state.tokenize = tokenBase;\n          return ret(\"jsonld-keyword\", \"meta\");\n        }\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) break;\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (!escaped) state.tokenize = tokenBase;\n        return ret(\"string\", \"string\");\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return ret(\"comment\", \"comment\");\n    }\n\n    function tokenQuasi(stream, state) {\n      var escaped = false,\n          next;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      return ret(\"quasi\", \"string-2\", stream.current());\n    }\n\n    var brackets = \"([{}])\"; // This is a crude lookahead trick to try and notice that we're\n    // parsing the argument patterns for a fat-arrow function before we\n    // actually hit the arrow token. It only works if the arrow is on\n    // the same line as the arguments and there's no strange noise\n    // (comments) in between. Fallback is to only notice when we hit the\n    // arrow, and not declare the arguments as locals for the arrow\n    // body.\n\n    function findFatArrow(stream, state) {\n      if (state.fatArrowAt) state.fatArrowAt = null;\n      var arrow = stream.string.indexOf(\"=>\", stream.start);\n      if (arrow < 0) return;\n\n      if (isTS) {\n        // Try to skip TypeScript return type declarations after the arguments\n        var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow));\n        if (m) arrow = m.index;\n      }\n\n      var depth = 0,\n          sawSomething = false;\n\n      for (var pos = arrow - 1; pos >= 0; --pos) {\n        var ch = stream.string.charAt(pos);\n        var bracket = brackets.indexOf(ch);\n\n        if (bracket >= 0 && bracket < 3) {\n          if (!depth) {\n            ++pos;\n            break;\n          }\n\n          if (--depth == 0) {\n            if (ch == \"(\") sawSomething = true;\n            break;\n          }\n        } else if (bracket >= 3 && bracket < 6) {\n          ++depth;\n        } else if (wordRE.test(ch)) {\n          sawSomething = true;\n        } else if (/[\"'\\/]/.test(ch)) {\n          return;\n        } else if (sawSomething && !depth) {\n          ++pos;\n          break;\n        }\n      }\n\n      if (sawSomething && !depth) state.fatArrowAt = pos;\n    } // Parser\n\n\n    var atomicTypes = {\n      \"atom\": true,\n      \"number\": true,\n      \"variable\": true,\n      \"string\": true,\n      \"regexp\": true,\n      \"this\": true,\n      \"jsonld-keyword\": true\n    };\n\n    function JSLexical(indented, column, type, align, prev, info) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.prev = prev;\n      this.info = info;\n      if (align != null) this.align = align;\n    }\n\n    function inScope(state, varname) {\n      for (var v = state.localVars; v; v = v.next) {\n        if (v.name == varname) return true;\n      }\n\n      for (var cx = state.context; cx; cx = cx.prev) {\n        for (var v = cx.vars; v; v = v.next) {\n          if (v.name == varname) return true;\n        }\n      }\n    }\n\n    function parseJS(state, style, type, content, stream) {\n      var cc = state.cc; // Communicate our context to the combinators.\n      // (Less wasteful than consing up a hundred closures on every call.)\n\n      cx.state = state;\n      cx.stream = stream;\n      cx.marked = null, cx.cc = cc;\n      cx.style = style;\n      if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = true;\n\n      while (true) {\n        var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n\n        if (combinator(type, content)) {\n          while (cc.length && cc[cc.length - 1].lex) {\n            cc.pop()();\n          }\n\n          if (cx.marked) return cx.marked;\n          if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n          return style;\n        }\n      }\n    } // Combinator utils\n\n\n    var cx = {\n      state: null,\n      column: null,\n      marked: null,\n      cc: null\n    };\n\n    function pass() {\n      for (var i = arguments.length - 1; i >= 0; i--) {\n        cx.cc.push(arguments[i]);\n      }\n    }\n\n    function cont() {\n      pass.apply(null, arguments);\n      return true;\n    }\n\n    function inList(name, list) {\n      for (var v = list; v; v = v.next) {\n        if (v.name == name) return true;\n      }\n\n      return false;\n    }\n\n    function register(varname) {\n      var state = cx.state;\n      cx.marked = \"def\";\n\n      if (state.context) {\n        if (state.lexical.info == \"var\" && state.context && state.context.block) {\n          // FIXME function decls are also not block scoped\n          var newContext = registerVarScoped(varname, state.context);\n\n          if (newContext != null) {\n            state.context = newContext;\n            return;\n          }\n        } else if (!inList(varname, state.localVars)) {\n          state.localVars = new Var(varname, state.localVars);\n          return;\n        }\n      } // Fall through means this is global\n\n\n      if (parserConfig.globalVars && !inList(varname, state.globalVars)) state.globalVars = new Var(varname, state.globalVars);\n    }\n\n    function registerVarScoped(varname, context) {\n      if (!context) {\n        return null;\n      } else if (context.block) {\n        var inner = registerVarScoped(varname, context.prev);\n        if (!inner) return null;\n        if (inner == context.prev) return context;\n        return new Context(inner, context.vars, true);\n      } else if (inList(varname, context.vars)) {\n        return context;\n      } else {\n        return new Context(context.prev, new Var(varname, context.vars), false);\n      }\n    }\n\n    function isModifier(name) {\n      return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\";\n    } // Combinators\n\n\n    function Context(prev, vars, block) {\n      this.prev = prev;\n      this.vars = vars;\n      this.block = block;\n    }\n\n    function Var(name, next) {\n      this.name = name;\n      this.next = next;\n    }\n\n    var defaultVars = new Var(\"this\", new Var(\"arguments\", null));\n\n    function pushcontext() {\n      cx.state.context = new Context(cx.state.context, cx.state.localVars, false);\n      cx.state.localVars = defaultVars;\n    }\n\n    function pushblockcontext() {\n      cx.state.context = new Context(cx.state.context, cx.state.localVars, true);\n      cx.state.localVars = null;\n    }\n\n    function popcontext() {\n      cx.state.localVars = cx.state.context.vars;\n      cx.state.context = cx.state.context.prev;\n    }\n\n    popcontext.lex = true;\n\n    function pushlex(type, info) {\n      var result = function result() {\n        var state = cx.state,\n            indent = state.indented;\n        if (state.lexical.type == \"stat\") indent = state.lexical.indented;else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev) {\n          indent = outer.indented;\n        }\n        state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n      };\n\n      result.lex = true;\n      return result;\n    }\n\n    function poplex() {\n      var state = cx.state;\n\n      if (state.lexical.prev) {\n        if (state.lexical.type == \")\") state.indented = state.lexical.indented;\n        state.lexical = state.lexical.prev;\n      }\n    }\n\n    poplex.lex = true;\n\n    function expect(wanted) {\n      function exp(type) {\n        if (type == wanted) return cont();else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();else return cont(exp);\n      }\n\n      ;\n      return exp;\n    }\n\n    function statement(type, value) {\n      if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n      if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n      if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n      if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n      if (type == \"debugger\") return cont(expect(\";\"));\n      if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n      if (type == \";\") return cont();\n\n      if (type == \"if\") {\n        if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex) cx.state.cc.pop()();\n        return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n      }\n\n      if (type == \"function\") return cont(functiondef);\n      if (type == \"for\") return cont(pushlex(\"form\"), forspec, statement, poplex);\n\n      if (type == \"class\" || isTS && value == \"interface\") {\n        cx.marked = \"keyword\";\n        return cont(pushlex(\"form\"), className, poplex);\n      }\n\n      if (type == \"variable\") {\n        if (isTS && value == \"declare\") {\n          cx.marked = \"keyword\";\n          return cont(statement);\n        } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n          cx.marked = \"keyword\";\n          if (value == \"enum\") return cont(enumdef);else if (value == \"type\") return cont(typeexpr, expect(\"operator\"), typeexpr, expect(\";\"));else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex);\n        } else if (isTS && value == \"namespace\") {\n          cx.marked = \"keyword\";\n          return cont(pushlex(\"form\"), expression, block, poplex);\n        } else if (isTS && value == \"abstract\") {\n          cx.marked = \"keyword\";\n          return cont(statement);\n        } else {\n          return cont(pushlex(\"stat\"), maybelabel);\n        }\n      }\n\n      if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext, block, poplex, poplex, popcontext);\n      if (type == \"case\") return cont(expression, expect(\":\"));\n      if (type == \"default\") return cont(expect(\":\"));\n      if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n      if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n      if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n      if (type == \"async\") return cont(statement);\n      if (value == \"@\") return cont(expression, statement);\n      return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n    }\n\n    function maybeCatchBinding(type) {\n      if (type == \"(\") return cont(funarg, expect(\")\"));\n    }\n\n    function expression(type, value) {\n      return expressionInner(type, value, false);\n    }\n\n    function expressionNoComma(type, value) {\n      return expressionInner(type, value, true);\n    }\n\n    function parenExpr(type) {\n      if (type != \"(\") return pass();\n      return cont(pushlex(\")\"), expression, expect(\")\"), poplex);\n    }\n\n    function expressionInner(type, value, noComma) {\n      if (cx.state.fatArrowAt == cx.stream.start) {\n        var body = noComma ? arrowBodyNoComma : arrowBody;\n        if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n      }\n\n      var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n      if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n      if (type == \"function\") return cont(functiondef, maybeop);\n\n      if (type == \"class\" || isTS && value == \"interface\") {\n        cx.marked = \"keyword\";\n        return cont(pushlex(\"form\"), classExpression, poplex);\n      }\n\n      if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n      if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n      if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n      if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n      if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n      if (type == \"quasi\") return pass(quasi, maybeop);\n      if (type == \"new\") return cont(maybeTarget(noComma));\n      if (type == \"import\") return cont(expression);\n      return cont();\n    }\n\n    function maybeexpression(type) {\n      if (type.match(/[;\\}\\)\\],]/)) return pass();\n      return pass(expression);\n    }\n\n    function maybeoperatorComma(type, value) {\n      if (type == \",\") return cont(expression);\n      return maybeoperatorNoComma(type, value, false);\n    }\n\n    function maybeoperatorNoComma(type, value, noComma) {\n      var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n      var expr = noComma == false ? expression : expressionNoComma;\n      if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n\n      if (type == \"operator\") {\n        if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n        if (isTS && value == \"<\" && cx.stream.match(/^([^>]|<.*?>)*>\\s*\\(/, false)) return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n        if (value == \"?\") return cont(expression, expect(\":\"), expr);\n        return cont(expr);\n      }\n\n      if (type == \"quasi\") {\n        return pass(quasi, me);\n      }\n\n      if (type == \";\") return;\n      if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n      if (type == \".\") return cont(property, me);\n      if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n\n      if (isTS && value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(typeexpr, me);\n      }\n\n      if (type == \"regexp\") {\n        cx.state.lastType = cx.marked = \"operator\";\n        cx.stream.backUp(cx.stream.pos - cx.stream.start - 1);\n        return cont(expr);\n      }\n    }\n\n    function quasi(type, value) {\n      if (type != \"quasi\") return pass();\n      if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n      return cont(expression, continueQuasi);\n    }\n\n    function continueQuasi(type) {\n      if (type == \"}\") {\n        cx.marked = \"string-2\";\n        cx.state.tokenize = tokenQuasi;\n        return cont(quasi);\n      }\n    }\n\n    function arrowBody(type) {\n      findFatArrow(cx.stream, cx.state);\n      return pass(type == \"{\" ? statement : expression);\n    }\n\n    function arrowBodyNoComma(type) {\n      findFatArrow(cx.stream, cx.state);\n      return pass(type == \"{\" ? statement : expressionNoComma);\n    }\n\n    function maybeTarget(noComma) {\n      return function (type) {\n        if (type == \".\") return cont(noComma ? targetNoComma : target);else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma);else return pass(noComma ? expressionNoComma : expression);\n      };\n    }\n\n    function target(_, value) {\n      if (value == \"target\") {\n        cx.marked = \"keyword\";\n        return cont(maybeoperatorComma);\n      }\n    }\n\n    function targetNoComma(_, value) {\n      if (value == \"target\") {\n        cx.marked = \"keyword\";\n        return cont(maybeoperatorNoComma);\n      }\n    }\n\n    function maybelabel(type) {\n      if (type == \":\") return cont(poplex, statement);\n      return pass(maybeoperatorComma, expect(\";\"), poplex);\n    }\n\n    function property(type) {\n      if (type == \"variable\") {\n        cx.marked = \"property\";\n        return cont();\n      }\n    }\n\n    function objprop(type, value) {\n      if (type == \"async\") {\n        cx.marked = \"property\";\n        return cont(objprop);\n      } else if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        if (value == \"get\" || value == \"set\") return cont(getterSetter);\n        var m; // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n\n        if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false))) cx.state.fatArrowAt = cx.stream.pos + m[0].length;\n        return cont(afterprop);\n      } else if (type == \"number\" || type == \"string\") {\n        cx.marked = jsonldMode ? \"property\" : cx.style + \" property\";\n        return cont(afterprop);\n      } else if (type == \"jsonld-keyword\") {\n        return cont(afterprop);\n      } else if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(objprop);\n      } else if (type == \"[\") {\n        return cont(expression, maybetype, expect(\"]\"), afterprop);\n      } else if (type == \"spread\") {\n        return cont(expressionNoComma, afterprop);\n      } else if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(objprop);\n      } else if (type == \":\") {\n        return pass(afterprop);\n      }\n    }\n\n    function getterSetter(type) {\n      if (type != \"variable\") return pass(afterprop);\n      cx.marked = \"property\";\n      return cont(functiondef);\n    }\n\n    function afterprop(type) {\n      if (type == \":\") return cont(expressionNoComma);\n      if (type == \"(\") return pass(functiondef);\n    }\n\n    function commasep(what, end, sep) {\n      function proceed(type, value) {\n        if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n          var lex = cx.state.lexical;\n          if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n          return cont(function (type, value) {\n            if (type == end || value == end) return pass();\n            return pass(what);\n          }, proceed);\n        }\n\n        if (type == end || value == end) return cont();\n        return cont(expect(end));\n      }\n\n      return function (type, value) {\n        if (type == end || value == end) return cont();\n        return pass(what, proceed);\n      };\n    }\n\n    function contCommasep(what, end, info) {\n      for (var i = 3; i < arguments.length; i++) {\n        cx.cc.push(arguments[i]);\n      }\n\n      return cont(pushlex(end, info), commasep(what, end), poplex);\n    }\n\n    function block(type) {\n      if (type == \"}\") return cont();\n      return pass(statement, block);\n    }\n\n    function maybetype(type, value) {\n      if (isTS) {\n        if (type == \":\") return cont(typeexpr);\n        if (value == \"?\") return cont(maybetype);\n      }\n    }\n\n    function mayberettype(type) {\n      if (isTS && type == \":\") {\n        if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr);else return cont(typeexpr);\n      }\n    }\n\n    function isKW(_, value) {\n      if (value == \"is\") {\n        cx.marked = \"keyword\";\n        return cont();\n      }\n    }\n\n    function typeexpr(type, value) {\n      if (value == \"keyof\" || value == \"typeof\") {\n        cx.marked = \"keyword\";\n        return cont(value == \"keyof\" ? typeexpr : expressionNoComma);\n      }\n\n      if (type == \"variable\" || value == \"void\") {\n        cx.marked = \"type\";\n        return cont(afterType);\n      }\n\n      if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n      if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType);\n      if (type == \"{\") return cont(pushlex(\"}\"), commasep(typeprop, \"}\", \",;\"), poplex, afterType);\n      if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType);\n      if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr);\n    }\n\n    function maybeReturnType(type) {\n      if (type == \"=>\") return cont(typeexpr);\n    }\n\n    function typeprop(type, value) {\n      if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        return cont(typeprop);\n      } else if (value == \"?\") {\n        return cont(typeprop);\n      } else if (type == \":\") {\n        return cont(typeexpr);\n      } else if (type == \"[\") {\n        return cont(expression, maybetype, expect(\"]\"), typeprop);\n      }\n    }\n\n    function typearg(type, value) {\n      if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg);\n      if (type == \":\") return cont(typeexpr);\n      return pass(typeexpr);\n    }\n\n    function afterType(type, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n      if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr);\n      if (type == \"[\") return cont(expect(\"]\"), afterType);\n\n      if (value == \"extends\" || value == \"implements\") {\n        cx.marked = \"keyword\";\n        return cont(typeexpr);\n      }\n    }\n\n    function maybeTypeArgs(_, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n    }\n\n    function typeparam() {\n      return pass(typeexpr, maybeTypeDefault);\n    }\n\n    function maybeTypeDefault(_, value) {\n      if (value == \"=\") return cont(typeexpr);\n    }\n\n    function vardef(_, value) {\n      if (value == \"enum\") {\n        cx.marked = \"keyword\";\n        return cont(enumdef);\n      }\n\n      return pass(pattern, maybetype, maybeAssign, vardefCont);\n    }\n\n    function pattern(type, value) {\n      if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(pattern);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont();\n      }\n\n      if (type == \"spread\") return cont(pattern);\n      if (type == \"[\") return contCommasep(eltpattern, \"]\");\n      if (type == \"{\") return contCommasep(proppattern, \"}\");\n    }\n\n    function proppattern(type, value) {\n      if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n        register(value);\n        return cont(maybeAssign);\n      }\n\n      if (type == \"variable\") cx.marked = \"property\";\n      if (type == \"spread\") return cont(pattern);\n      if (type == \"}\") return pass();\n      if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n      return cont(expect(\":\"), pattern, maybeAssign);\n    }\n\n    function eltpattern() {\n      return pass(pattern, maybeAssign);\n    }\n\n    function maybeAssign(_type, value) {\n      if (value == \"=\") return cont(expressionNoComma);\n    }\n\n    function vardefCont(type) {\n      if (type == \",\") return cont(vardef);\n    }\n\n    function maybeelse(type, value) {\n      if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n    }\n\n    function forspec(type, value) {\n      if (value == \"await\") return cont(forspec);\n      if (type == \"(\") return cont(pushlex(\")\"), forspec1, expect(\")\"), poplex);\n    }\n\n    function forspec1(type) {\n      if (type == \"var\") return cont(vardef, expect(\";\"), forspec2);\n      if (type == \";\") return cont(forspec2);\n      if (type == \"variable\") return cont(formaybeinof);\n      return pass(expression, expect(\";\"), forspec2);\n    }\n\n    function formaybeinof(_type, value) {\n      if (value == \"in\" || value == \"of\") {\n        cx.marked = \"keyword\";\n        return cont(expression);\n      }\n\n      return cont(maybeoperatorComma, forspec2);\n    }\n\n    function forspec2(type, value) {\n      if (type == \";\") return cont(forspec3);\n\n      if (value == \"in\" || value == \"of\") {\n        cx.marked = \"keyword\";\n        return cont(expression);\n      }\n\n      return pass(expression, expect(\";\"), forspec3);\n    }\n\n    function forspec3(type) {\n      if (type != \")\") cont(expression);\n    }\n\n    function functiondef(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(functiondef);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont(functiondef);\n      }\n\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n      if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef);\n    }\n\n    function funarg(type, value) {\n      if (value == \"@\") cont(expression, funarg);\n      if (type == \"spread\") return cont(funarg);\n\n      if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(funarg);\n      }\n\n      return pass(pattern, maybetype, maybeAssign);\n    }\n\n    function classExpression(type, value) {\n      // Class expressions may have an optional name.\n      if (type == \"variable\") return className(type, value);\n      return classNameAfter(type, value);\n    }\n\n    function className(type, value) {\n      if (type == \"variable\") {\n        register(value);\n        return cont(classNameAfter);\n      }\n    }\n\n    function classNameAfter(type, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter);\n\n      if (value == \"extends\" || value == \"implements\" || isTS && type == \",\") {\n        if (value == \"implements\") cx.marked = \"keyword\";\n        return cont(isTS ? typeexpr : expression, classNameAfter);\n      }\n\n      if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n    }\n\n    function classBody(type, value) {\n      if (type == \"async\" || type == \"variable\" && (value == \"static\" || value == \"get\" || value == \"set\" || isTS && isModifier(value)) && cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false)) {\n        cx.marked = \"keyword\";\n        return cont(classBody);\n      }\n\n      if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        return cont(isTS ? classfield : functiondef, classBody);\n      }\n\n      if (type == \"[\") return cont(expression, maybetype, expect(\"]\"), isTS ? classfield : functiondef, classBody);\n\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(classBody);\n      }\n\n      if (type == \";\") return cont(classBody);\n      if (type == \"}\") return cont();\n      if (value == \"@\") return cont(expression, classBody);\n    }\n\n    function classfield(type, value) {\n      if (value == \"?\") return cont(classfield);\n      if (type == \":\") return cont(typeexpr, maybeAssign);\n      if (value == \"=\") return cont(expressionNoComma);\n      return pass(functiondef);\n    }\n\n    function afterExport(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(maybeFrom, expect(\";\"));\n      }\n\n      if (value == \"default\") {\n        cx.marked = \"keyword\";\n        return cont(expression, expect(\";\"));\n      }\n\n      if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n      return pass(statement);\n    }\n\n    function exportField(type, value) {\n      if (value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(expect(\"variable\"));\n      }\n\n      if (type == \"variable\") return pass(expressionNoComma, exportField);\n    }\n\n    function afterImport(type) {\n      if (type == \"string\") return cont();\n      if (type == \"(\") return pass(expression);\n      return pass(importSpec, maybeMoreImports, maybeFrom);\n    }\n\n    function importSpec(type, value) {\n      if (type == \"{\") return contCommasep(importSpec, \"}\");\n      if (type == \"variable\") register(value);\n      if (value == \"*\") cx.marked = \"keyword\";\n      return cont(maybeAs);\n    }\n\n    function maybeMoreImports(type) {\n      if (type == \",\") return cont(importSpec, maybeMoreImports);\n    }\n\n    function maybeAs(_type, value) {\n      if (value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(importSpec);\n      }\n    }\n\n    function maybeFrom(_type, value) {\n      if (value == \"from\") {\n        cx.marked = \"keyword\";\n        return cont(expression);\n      }\n    }\n\n    function arrayLiteral(type) {\n      if (type == \"]\") return cont();\n      return pass(commasep(expressionNoComma, \"]\"));\n    }\n\n    function enumdef() {\n      return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex);\n    }\n\n    function enummember() {\n      return pass(pattern, maybeAssign);\n    }\n\n    function isContinuedStatement(state, textAfter) {\n      return state.lastType == \"operator\" || state.lastType == \",\" || isOperatorChar.test(textAfter.charAt(0)) || /[,.]/.test(textAfter.charAt(0));\n    }\n\n    function expressionAllowed(stream, state, backUp) {\n      return state.tokenize == tokenBase && /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) || state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0)));\n    } // Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        var state = {\n          tokenize: tokenBase,\n          lastType: \"sof\",\n          cc: [],\n          lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n          localVars: parserConfig.localVars,\n          context: parserConfig.localVars && new Context(null, null, false),\n          indented: basecolumn || 0\n        };\n        if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\") state.globalVars = parserConfig.globalVars;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = false;\n          state.indented = stream.indentation();\n          findFatArrow(stream, state);\n        }\n\n        if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        if (type == \"comment\") return style;\n        state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n        return parseJS(state, style, type, content, stream);\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize == tokenComment) return CodeMirror.Pass;\n        if (state.tokenize != tokenBase) return 0;\n        var firstChar = textAfter && textAfter.charAt(0),\n            lexical = state.lexical,\n            top; // Kludge to prevent 'maybelse' from blocking lexical scope pops\n\n        if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n          var c = state.cc[i];\n          if (c == poplex) lexical = lexical.prev;else if (c != maybeelse) break;\n        }\n\n        while ((lexical.type == \"stat\" || lexical.type == \"form\") && (firstChar == \"}\" || (top = state.cc[state.cc.length - 1]) && (top == maybeoperatorComma || top == maybeoperatorNoComma) && !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))) {\n          lexical = lexical.prev;\n        }\n\n        if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\") lexical = lexical.prev;\n        var type = lexical.type,\n            closing = firstChar == type;\n        if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);else if (type == \"form\" && firstChar == \"{\") return lexical.indented;else if (type == \"form\") return lexical.indented + indentUnit;else if (type == \"stat\") return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false) return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);else if (lexical.align) return lexical.column + (closing ? 0 : 1);else return lexical.indented + (closing ? 0 : indentUnit);\n      },\n      electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n      blockCommentStart: jsonMode ? null : \"/*\",\n      blockCommentEnd: jsonMode ? null : \"*/\",\n      blockCommentContinue: jsonMode ? null : \" * \",\n      lineComment: jsonMode ? null : \"//\",\n      fold: \"brace\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\",\n      helperType: jsonMode ? \"json\" : \"javascript\",\n      jsonldMode: jsonldMode,\n      jsonMode: jsonMode,\n      expressionAllowed: expressionAllowed,\n      skipExpression: function skipExpression(state) {\n        var top = state.cc[state.cc.length - 1];\n        if (top == expression || top == expressionNoComma) state.cc.pop();\n      }\n    };\n  });\n  CodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n  CodeMirror.defineMIME(\"text/javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/x-json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/ld+json\", {\n    name: \"javascript\",\n    jsonld: true\n  });\n  CodeMirror.defineMIME(\"text/typescript\", {\n    name: \"javascript\",\n    typescript: true\n  });\n  CodeMirror.defineMIME(\"application/typescript\", {\n    name: \"javascript\",\n    typescript: true\n  });\n});"],"sourceRoot":""}