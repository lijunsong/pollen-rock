{"version":3,"sources":["../node_modules/codemirror/mode/protobuf/protobuf.js"],"names":["CodeMirror","words","keywordArray","keywords","RegExp","join","registerHelper","identifiers","tokenBase","stream","eatSpace","match","skipToEnd","next","defineMode","token","defineMIME","mod","__webpack_require__"],"mappings":"+EAOC,SAAAA,GACD,aAOA,IALAC,EAKAC,EAAA,qSACAC,GANAF,EAMAC,EALA,IAAAE,OAAA,MAAAH,EAAAI,KAAA,qBAMAL,EAAAM,eAAA,uBAAAJ,GACA,IAAAK,EAAA,IAAAH,OAAA,iDAEA,SAAAI,EAAAC,GAEA,GAAAA,EAAAC,WAAA,YAEA,GAAAD,EAAAE,MAAA,MAEA,OADAF,EAAAG,YACA,UAIA,GAAAH,EAAAE,MAAA,kBACA,GAAAF,EAAAE,MAAA,uCACA,GAAAF,EAAAE,MAAA,kDACA,GAAAF,EAAAE,MAAA,6CAIA,OAAAF,EAAAE,MAAA,mBACA,SAGAF,EAAAE,MAAA,mBACA,SAIAF,EAAAE,MAAAR,GACA,UAGAM,EAAAE,MAAAJ,GACA,YAKAE,EAAAI,OACA,MAIAb,EAAAc,WAAA,sBACA,OACAC,MAAAP,KAGAR,EAAAgB,WAAA,8BA9DAC,CAAQC,EAAQ","file":"static/js/69.080c195f.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n  }\n\n  ;\n  var keywordArray = [\"package\", \"message\", \"import\", \"syntax\", \"required\", \"optional\", \"repeated\", \"reserved\", \"default\", \"extensions\", \"packed\", \"bool\", \"bytes\", \"double\", \"enum\", \"float\", \"string\", \"int32\", \"int64\", \"uint32\", \"uint64\", \"sint32\", \"sint64\", \"fixed32\", \"fixed64\", \"sfixed32\", \"sfixed64\", \"option\", \"service\", \"rpc\", \"returns\"];\n  var keywords = wordRegexp(keywordArray);\n  CodeMirror.registerHelper(\"hintWords\", \"protobuf\", keywordArray);\n  var identifiers = new RegExp(\"^[_A-Za-z\\xA1-\\uFFFF][_A-Za-z0-9\\xA1-\\uFFFF]*\");\n\n  function tokenBase(stream) {\n    // whitespaces\n    if (stream.eatSpace()) return null; // Handle one line Comments\n\n    if (stream.match(\"//\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    } // Handle Number Literals\n\n\n    if (stream.match(/^[0-9\\.+-]/, false)) {\n      if (stream.match(/^[+-]?0x[0-9a-fA-F]+/)) return \"number\";\n      if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?/)) return \"number\";\n      if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?/)) return \"number\";\n    } // Handle Strings\n\n\n    if (stream.match(/^\"([^\"]|(\"\"))*\"/)) {\n      return \"string\";\n    }\n\n    if (stream.match(/^'([^']|(''))*'/)) {\n      return \"string\";\n    } // Handle words\n\n\n    if (stream.match(keywords)) {\n      return \"keyword\";\n    }\n\n    if (stream.match(identifiers)) {\n      return \"variable\";\n    }\n\n    ; // Handle non-detected items\n\n    stream.next();\n    return null;\n  }\n\n  ;\n  CodeMirror.defineMode(\"protobuf\", function () {\n    return {\n      token: tokenBase\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-protobuf\", \"protobuf\");\n});"],"sourceRoot":""}