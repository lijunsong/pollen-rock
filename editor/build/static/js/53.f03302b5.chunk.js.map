{"version":3,"sources":["../node_modules/codemirror/mode/mbox/mbox.js"],"names":["CodeMirror","rfc2822","rfc2822NoEmail","registerHelper","concat","whitespace","separator","rfc2822Header","RegExp","join","rfc2822HeaderNoEmail","header","email","untilEmail","bracketedEmail","untilBracketedEmail","readToken","stream","state","sol","inSeparator","inHeader","match","inHeaders","emailPermitted","skipToEnd","style","styleForHeader","defineMode","startState","token","blankLine","defineMIME","mod","__webpack_require__"],"mappings":"+EAOC,SAAAA,GACD,aAEA,IAAAC,EAAA,qMACAC,EAAA,uDACAF,EAAAG,eAAA,mBAAAF,EAAAG,OAAAF,IACA,IAAAG,EAAA,SACAC,EAAA,SAEAC,EAAA,IAAAC,OAAA,KAAAP,EAAAQ,KAAA,YACAC,EAAA,IAAAF,OAAA,KAAAN,EAAAO,KAAA,YACAE,EAAA,UAEAC,EAAA,eACAC,EAAA,uBACAC,EAAA,SACAC,EAAA,eAOA,SAAAC,EAAAC,EAAAC,GACA,GAAAD,EAAAE,MAAA,CAIA,GAFAD,EAAAE,aAAA,EAEAF,EAAAG,UAAAJ,EAAAK,MAAAjB,GAEA,YAMA,GAJAa,EAAAG,UAAA,EACAH,EAAAP,OAAA,KAGAM,EAAAK,MAAAhB,GAGA,OAFAY,EAAAK,WAAA,EACAL,EAAAE,aAAA,EACA,OAGA,IAAAE,EACAE,GAAA,EAEA,OAAAF,EAAAL,EAAAK,MAAAZ,MAAAc,GAAA,KAAAF,EAAAL,EAAAK,MAAAf,KACAW,EAAAK,WAAA,EACAL,EAAAG,UAAA,EACAH,EAAAM,iBACAN,EAAAP,OAAAW,EAAA,GACA,QAKAJ,EAAAK,YAAAD,EAAAL,EAAAK,MAAAX,KACAO,EAAAG,UAAA,EACAH,EAAAM,gBAAA,EACAN,EAAAP,OAAAW,EAAA,GACA,SAGAJ,EAAAK,WAAA,EACAN,EAAAQ,YACA,MAGA,GAAAP,EAAAE,YACA,OAAAH,EAAAK,MAAAV,GAAA,OACAK,EAAAK,MAAAT,GAAA,QACAI,EAAAQ,YACA,QAGA,GAAAP,EAAAG,SAAA,CACA,IAAAK,EAzDA,SAAAf,GACA,kBAAAA,EAAA,SACA,SAuDAgB,CAAAT,EAAAP,QAEA,GAAAO,EAAAM,eAAA,CACA,GAAAP,EAAAK,MAAAR,GAAA,OAAAY,EAAA,QACA,GAAAT,EAAAK,MAAAP,GAAA,OAAAW,EAIA,OADAT,EAAAQ,YACAC,EAIA,OADAT,EAAAQ,YACA,KAIAzB,EAAA4B,WAAA,kBACA,OACAC,WAAA,WACA,OAEAT,aAAA,EAEAC,UAAA,EAEAG,gBAAA,EAEAb,OAAA,KAEAY,WAAA,IAGAO,MAAAd,EACAe,UAAA,SAAAb,GACAA,EAAAK,UAAAL,EAAAE,YAAAF,EAAAG,UAAA,MAIArB,EAAAgC,WAAA,2BApHAC,CAAQC,EAAQ","file":"static/js/53.f03302b5.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var rfc2822 = [\"From\", \"Sender\", \"Reply-To\", \"To\", \"Cc\", \"Bcc\", \"Message-ID\", \"In-Reply-To\", \"References\", \"Resent-From\", \"Resent-Sender\", \"Resent-To\", \"Resent-Cc\", \"Resent-Bcc\", \"Resent-Message-ID\", \"Return-Path\", \"Received\"];\n  var rfc2822NoEmail = [\"Date\", \"Subject\", \"Comments\", \"Keywords\", \"Resent-Date\"];\n  CodeMirror.registerHelper(\"hintWords\", \"mbox\", rfc2822.concat(rfc2822NoEmail));\n  var whitespace = /^[ \\t]/;\n  var separator = /^From /; // See RFC 4155\n\n  var rfc2822Header = new RegExp(\"^(\" + rfc2822.join(\"|\") + \"): \");\n  var rfc2822HeaderNoEmail = new RegExp(\"^(\" + rfc2822NoEmail.join(\"|\") + \"): \");\n  var header = /^[^:]+:/; // Optional fields defined in RFC 2822\n\n  var email = /^[^ ]+@[^ ]+/;\n  var untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;\n  var bracketedEmail = /^<.*?>/;\n  var untilBracketedEmail = /^.*?(?=<.*>)/;\n\n  function styleForHeader(header) {\n    if (header === \"Subject\") return \"header\";\n    return \"string\";\n  }\n\n  function readToken(stream, state) {\n    if (stream.sol()) {\n      // From last line\n      state.inSeparator = false;\n\n      if (state.inHeader && stream.match(whitespace)) {\n        // Header folding\n        return null;\n      } else {\n        state.inHeader = false;\n        state.header = null;\n      }\n\n      if (stream.match(separator)) {\n        state.inHeaders = true;\n        state.inSeparator = true;\n        return \"atom\";\n      }\n\n      var match;\n      var emailPermitted = false;\n\n      if ((match = stream.match(rfc2822HeaderNoEmail)) || (emailPermitted = true) && (match = stream.match(rfc2822Header))) {\n        state.inHeaders = true;\n        state.inHeader = true;\n        state.emailPermitted = emailPermitted;\n        state.header = match[1];\n        return \"atom\";\n      } // Use vim's heuristics: recognize custom headers only if the line is in a\n      // block of legitimate headers.\n\n\n      if (state.inHeaders && (match = stream.match(header))) {\n        state.inHeader = true;\n        state.emailPermitted = true;\n        state.header = match[1];\n        return \"atom\";\n      }\n\n      state.inHeaders = false;\n      stream.skipToEnd();\n      return null;\n    }\n\n    if (state.inSeparator) {\n      if (stream.match(email)) return \"link\";\n      if (stream.match(untilEmail)) return \"atom\";\n      stream.skipToEnd();\n      return \"atom\";\n    }\n\n    if (state.inHeader) {\n      var style = styleForHeader(state.header);\n\n      if (state.emailPermitted) {\n        if (stream.match(bracketedEmail)) return style + \" link\";\n        if (stream.match(untilBracketedEmail)) return style;\n      }\n\n      stream.skipToEnd();\n      return style;\n    }\n\n    stream.skipToEnd();\n    return null;\n  }\n\n  ;\n  CodeMirror.defineMode(\"mbox\", function () {\n    return {\n      startState: function startState() {\n        return {\n          // Is in a mbox separator\n          inSeparator: false,\n          // Is in a mail header\n          inHeader: false,\n          // If bracketed email is permitted. Only applicable when inHeader\n          emailPermitted: false,\n          // Name of current header\n          header: null,\n          // Is in a region of mail headers\n          inHeaders: false\n        };\n      },\n      token: readToken,\n      blankLine: function blankLine(state) {\n        state.inHeaders = state.inSeparator = state.inHeader = false;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"application/mbox\", \"mbox\");\n});"],"sourceRoot":""}